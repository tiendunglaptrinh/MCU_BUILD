/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
#define SCH_MAX_TASKS	40
#define NO_TASK_ID		0

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
typedef struct {
    void (*pTask)(void); // Pointer to the task (must be a 'void (void)' function)
    uint32_t Delay;      // Delay (ticks) until the function will (next) be run
    uint32_t Period;     // Interval (ticks) between subsequent runs
    uint8_t RunMe;       // Incremented (by scheduler) when task is due to execute
    uint32_t TaskID;     // Task ID
} sTask;

sTask SCH_tasks_G[SCH_MAX_TASKS];
uint8_t taskCount = 0;
uint8_t Error_code_G = 0;

void SCH_Init(void) {
    for (uint8_t i = 0; i < SCH_MAX_TASKS; i++) {
        SCH_Delete_Task(i); // Clear all tasks
    }
    Error_code_G = 0;
}



uint32_t SCH_Add_Task(void (*pFunction)(void), uint32_t Delay, uint32_t Period) {
    uint8_t Index = 0;

    // Find the first available slot in the task array
    while ((SCH_tasks_G[Index].pTask != NULL) && (Index < SCH_MAX_TASKS)) {
        Index++;
    }

    // Check if the task list is full
    if (Index == SCH_MAX_TASKS) {
        Error_code_G = 1; // ERROR_SCH_TOO_MANY_TASKS
        return NO_TASK_ID; // No task added
    }

    // If we found an empty slot, assign the task details
    SCH_tasks_G[Index].pTask = pFunction;
    SCH_tasks_G[Index].Delay = Delay;
    SCH_tasks_G[Index].Period = Period;
    SCH_tasks_G[Index].RunMe = 0;
    SCH_tasks_G[Index].TaskID = Index + 1; // Assign a unique task ID

    taskCount++; // Increment the task counter
    return SCH_tasks_G[Index].TaskID; // Return the TaskID
}


uint8_t SCH_Delete_Task(uint32_t TaskID) {
    for (uint8_t i = 0; i < SCH_MAX_TASKS; i++) {
        if (SCH_tasks_G[i].TaskID == TaskID && SCH_tasks_G[i].pTask != NULL) {
            SCH_tasks_G[i].pTask = NULL;
            SCH_tasks_G[i].Delay = 0;
            SCH_tasks_G[i].Period = 0;
            SCH_tasks_G[i].RunMe = 0;
            SCH_tasks_G[i].TaskID = NO_TASK_ID;
            taskCount--;
            return 1; // Task deleted successfully
        }
    }
    return 0; // Task ID invalid
}

void SCH_Update(void) {
    const uint32_t TICK_INTERVAL = 10; // Timer interrupt interval in ms

    for (uint8_t i = 0; i < SCH_MAX_TASKS; i++) {
        if (SCH_tasks_G[i].pTask != NULL) {
            if (SCH_tasks_G[i].Delay <= TICK_INTERVAL) {
                SCH_tasks_G[i].RunMe++;
                if (SCH_tasks_G[i].Period) {
                    SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period;
                }
            } else {
                SCH_tasks_G[i].Delay -= TICK_INTERVAL;
            }
        }
    }
}

void SCH_Dispatch_Tasks(void) {
    for (uint8_t i = 0; i < SCH_MAX_TASKS; i++) {
        if (SCH_tasks_G[i].RunMe > 0) {
            (*SCH_tasks_G[i].pTask)(); // Run the task
            SCH_tasks_G[i].RunMe--;

            if (SCH_tasks_G[i].Period == 0) {
                SCH_Delete_Task(SCH_tasks_G[i].TaskID); // One-shot task
            }
        }
    }
}
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim2;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */
void function1(){
	HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, 0);
	HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, 1);
	HAL_GPIO_WritePin(PINK_GPIO_Port, PINK_Pin, 1);
	HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, 1);
	HAL_GPIO_WritePin(YELLOW_GPIO_Port, YELLOW_Pin, 1);
}
void function2(){
	HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, 1);
	HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, 0);
	HAL_GPIO_WritePin(PINK_GPIO_Port, PINK_Pin, 1);
	HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, 1);
	HAL_GPIO_WritePin(YELLOW_GPIO_Port, YELLOW_Pin, 1);
}
void function3(){
	HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, 1);
	HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, 1);
	HAL_GPIO_WritePin(PINK_GPIO_Port, PINK_Pin, 0);
	HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, 1);
	HAL_GPIO_WritePin(YELLOW_GPIO_Port, YELLOW_Pin, 1);
}
void function4(){
	HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, 1);
	HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, 1);
	HAL_GPIO_WritePin(PINK_GPIO_Port, PINK_Pin, 1);
	HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, 0);
	HAL_GPIO_WritePin(YELLOW_GPIO_Port, YELLOW_Pin, 1);
}
void function5(){
	HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, 1);
	HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, 1);
	HAL_GPIO_WritePin(PINK_GPIO_Port, PINK_Pin, 1);
	HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, 1);
	HAL_GPIO_WritePin(YELLOW_GPIO_Port, YELLOW_Pin, 0);
}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Init();

	// Add tasks with different periods
	SCH_Add_Task(function1, 50, 50);   // 0.5 second
	SCH_Add_Task(function2, 100, 100); // 1 second
	SCH_Add_Task(function3, 150, 150); // 1.5 seconds
	SCH_Add_Task(function4, 200, 200); // 2 seconds
	SCH_Add_Task(function5, 250, 250); // 2.5 seconds
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  SCH_Dispatch_Tasks();
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 65535;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BLUE_Pin|GREEN_Pin|PINK_Pin|RED_Pin
                          |YELLOW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BLUE_Pin GREEN_Pin PINK_Pin RED_Pin
                           YELLOW_Pin */
  GPIO_InitStruct.Pin = BLUE_Pin|GREEN_Pin|PINK_Pin|RED_Pin
                          |YELLOW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	SCH_Update();
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
