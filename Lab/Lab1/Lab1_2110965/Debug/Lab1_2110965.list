
Lab1_2110965.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a78  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001b84  08001b84  00002b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ba8  08001ba8  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001ba8  08001ba8  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ba8  08001ba8  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ba8  08001ba8  00002ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001bac  08001bac  00002bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001bb0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001bbc  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001bbc  0000302c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000297a  00000000  00000000  00003035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e52  00000000  00000000  000059af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003f0  00000000  00000000  00006808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002d3  00000000  00000000  00006bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015647  00000000  00000000  00006ecb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004b41  00000000  00000000  0001c512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00079c88  00000000  00000000  00021053  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009acdb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000dbc  00000000  00000000  0009ad20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  0009badc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001b6c 	.word	0x08001b6c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001b6c 	.word	0x08001b6c

0800014c <display7SEG1>:
//        default:
//            break;
//    }
//}

void display7SEG1(int counter) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
    const int led_on = 0;
 8000154:	2300      	movs	r3, #0
 8000156:	60fb      	str	r3, [r7, #12]
    const int led_off = 1;
 8000158:	2301      	movs	r3, #1
 800015a:	60bb      	str	r3, [r7, #8]
    // Tắt tất cả các LED trước khi hiển thị
    HAL_GPIO_WritePin(LED1_1_GPIO_Port, LED1_1_Pin, led_off);
 800015c:	68bb      	ldr	r3, [r7, #8]
 800015e:	b2db      	uxtb	r3, r3
 8000160:	461a      	mov	r2, r3
 8000162:	2102      	movs	r1, #2
 8000164:	48a9      	ldr	r0, [pc, #676]	@ (800040c <display7SEG1+0x2c0>)
 8000166:	f001 f8df 	bl	8001328 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED1_2_GPIO_Port, LED1_2_Pin, led_off);
 800016a:	68bb      	ldr	r3, [r7, #8]
 800016c:	b2db      	uxtb	r3, r3
 800016e:	461a      	mov	r2, r3
 8000170:	2104      	movs	r1, #4
 8000172:	48a6      	ldr	r0, [pc, #664]	@ (800040c <display7SEG1+0x2c0>)
 8000174:	f001 f8d8 	bl	8001328 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED1_3_GPIO_Port, LED1_3_Pin, led_off);
 8000178:	68bb      	ldr	r3, [r7, #8]
 800017a:	b2db      	uxtb	r3, r3
 800017c:	461a      	mov	r2, r3
 800017e:	2108      	movs	r1, #8
 8000180:	48a2      	ldr	r0, [pc, #648]	@ (800040c <display7SEG1+0x2c0>)
 8000182:	f001 f8d1 	bl	8001328 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED1_4_GPIO_Port, LED1_4_Pin, led_off);
 8000186:	68bb      	ldr	r3, [r7, #8]
 8000188:	b2db      	uxtb	r3, r3
 800018a:	461a      	mov	r2, r3
 800018c:	2110      	movs	r1, #16
 800018e:	489f      	ldr	r0, [pc, #636]	@ (800040c <display7SEG1+0x2c0>)
 8000190:	f001 f8ca 	bl	8001328 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED1_5_GPIO_Port, LED1_5_Pin, led_off);
 8000194:	68bb      	ldr	r3, [r7, #8]
 8000196:	b2db      	uxtb	r3, r3
 8000198:	461a      	mov	r2, r3
 800019a:	2120      	movs	r1, #32
 800019c:	489b      	ldr	r0, [pc, #620]	@ (800040c <display7SEG1+0x2c0>)
 800019e:	f001 f8c3 	bl	8001328 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED1_6_GPIO_Port, LED1_6_Pin, led_off);
 80001a2:	68bb      	ldr	r3, [r7, #8]
 80001a4:	b2db      	uxtb	r3, r3
 80001a6:	461a      	mov	r2, r3
 80001a8:	2140      	movs	r1, #64	@ 0x40
 80001aa:	4898      	ldr	r0, [pc, #608]	@ (800040c <display7SEG1+0x2c0>)
 80001ac:	f001 f8bc 	bl	8001328 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED1_7_GPIO_Port, LED1_7_Pin, led_off);
 80001b0:	68bb      	ldr	r3, [r7, #8]
 80001b2:	b2db      	uxtb	r3, r3
 80001b4:	461a      	mov	r2, r3
 80001b6:	2180      	movs	r1, #128	@ 0x80
 80001b8:	4894      	ldr	r0, [pc, #592]	@ (800040c <display7SEG1+0x2c0>)
 80001ba:	f001 f8b5 	bl	8001328 <HAL_GPIO_WritePin>

    // Bật các LED theo giá trị của counter
    switch (counter) {
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	2b09      	cmp	r3, #9
 80001c2:	f200 8182 	bhi.w	80004ca <display7SEG1+0x37e>
 80001c6:	a201      	add	r2, pc, #4	@ (adr r2, 80001cc <display7SEG1+0x80>)
 80001c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001cc:	080001f5 	.word	0x080001f5
 80001d0:	08000259 	.word	0x08000259
 80001d4:	08000277 	.word	0x08000277
 80001d8:	080002bf 	.word	0x080002bf
 80001dc:	08000307 	.word	0x08000307
 80001e0:	08000341 	.word	0x08000341
 80001e4:	08000389 	.word	0x08000389
 80001e8:	080003df 	.word	0x080003df
 80001ec:	08000411 	.word	0x08000411
 80001f0:	08000475 	.word	0x08000475
        case 0:
            HAL_GPIO_WritePin(LED1_1_GPIO_Port, LED1_1_Pin, led_on);
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	b2db      	uxtb	r3, r3
 80001f8:	461a      	mov	r2, r3
 80001fa:	2102      	movs	r1, #2
 80001fc:	4883      	ldr	r0, [pc, #524]	@ (800040c <display7SEG1+0x2c0>)
 80001fe:	f001 f893 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED1_2_GPIO_Port, LED1_2_Pin, led_on);
 8000202:	68fb      	ldr	r3, [r7, #12]
 8000204:	b2db      	uxtb	r3, r3
 8000206:	461a      	mov	r2, r3
 8000208:	2104      	movs	r1, #4
 800020a:	4880      	ldr	r0, [pc, #512]	@ (800040c <display7SEG1+0x2c0>)
 800020c:	f001 f88c 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED1_3_GPIO_Port, LED1_3_Pin, led_on);
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	b2db      	uxtb	r3, r3
 8000214:	461a      	mov	r2, r3
 8000216:	2108      	movs	r1, #8
 8000218:	487c      	ldr	r0, [pc, #496]	@ (800040c <display7SEG1+0x2c0>)
 800021a:	f001 f885 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED1_4_GPIO_Port, LED1_4_Pin, led_on);
 800021e:	68fb      	ldr	r3, [r7, #12]
 8000220:	b2db      	uxtb	r3, r3
 8000222:	461a      	mov	r2, r3
 8000224:	2110      	movs	r1, #16
 8000226:	4879      	ldr	r0, [pc, #484]	@ (800040c <display7SEG1+0x2c0>)
 8000228:	f001 f87e 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED1_5_GPIO_Port, LED1_5_Pin, led_on);
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	b2db      	uxtb	r3, r3
 8000230:	461a      	mov	r2, r3
 8000232:	2120      	movs	r1, #32
 8000234:	4875      	ldr	r0, [pc, #468]	@ (800040c <display7SEG1+0x2c0>)
 8000236:	f001 f877 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED1_6_GPIO_Port, LED1_6_Pin, led_on);
 800023a:	68fb      	ldr	r3, [r7, #12]
 800023c:	b2db      	uxtb	r3, r3
 800023e:	461a      	mov	r2, r3
 8000240:	2140      	movs	r1, #64	@ 0x40
 8000242:	4872      	ldr	r0, [pc, #456]	@ (800040c <display7SEG1+0x2c0>)
 8000244:	f001 f870 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED1_7_GPIO_Port, LED1_7_Pin, led_off);
 8000248:	68bb      	ldr	r3, [r7, #8]
 800024a:	b2db      	uxtb	r3, r3
 800024c:	461a      	mov	r2, r3
 800024e:	2180      	movs	r1, #128	@ 0x80
 8000250:	486e      	ldr	r0, [pc, #440]	@ (800040c <display7SEG1+0x2c0>)
 8000252:	f001 f869 	bl	8001328 <HAL_GPIO_WritePin>
            break;
 8000256:	e139      	b.n	80004cc <display7SEG1+0x380>
        case 1:
            HAL_GPIO_WritePin(LED1_2_GPIO_Port, LED1_2_Pin, led_on);
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	b2db      	uxtb	r3, r3
 800025c:	461a      	mov	r2, r3
 800025e:	2104      	movs	r1, #4
 8000260:	486a      	ldr	r0, [pc, #424]	@ (800040c <display7SEG1+0x2c0>)
 8000262:	f001 f861 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED1_3_GPIO_Port, LED1_3_Pin, led_on);
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	b2db      	uxtb	r3, r3
 800026a:	461a      	mov	r2, r3
 800026c:	2108      	movs	r1, #8
 800026e:	4867      	ldr	r0, [pc, #412]	@ (800040c <display7SEG1+0x2c0>)
 8000270:	f001 f85a 	bl	8001328 <HAL_GPIO_WritePin>
            break;
 8000274:	e12a      	b.n	80004cc <display7SEG1+0x380>
        case 2:
            HAL_GPIO_WritePin(LED1_1_GPIO_Port, LED1_1_Pin, led_on);
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	b2db      	uxtb	r3, r3
 800027a:	461a      	mov	r2, r3
 800027c:	2102      	movs	r1, #2
 800027e:	4863      	ldr	r0, [pc, #396]	@ (800040c <display7SEG1+0x2c0>)
 8000280:	f001 f852 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED1_2_GPIO_Port, LED1_2_Pin, led_on);
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	b2db      	uxtb	r3, r3
 8000288:	461a      	mov	r2, r3
 800028a:	2104      	movs	r1, #4
 800028c:	485f      	ldr	r0, [pc, #380]	@ (800040c <display7SEG1+0x2c0>)
 800028e:	f001 f84b 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED1_4_GPIO_Port, LED1_4_Pin, led_on);
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	b2db      	uxtb	r3, r3
 8000296:	461a      	mov	r2, r3
 8000298:	2110      	movs	r1, #16
 800029a:	485c      	ldr	r0, [pc, #368]	@ (800040c <display7SEG1+0x2c0>)
 800029c:	f001 f844 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED1_5_GPIO_Port, LED1_5_Pin, led_on);
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	b2db      	uxtb	r3, r3
 80002a4:	461a      	mov	r2, r3
 80002a6:	2120      	movs	r1, #32
 80002a8:	4858      	ldr	r0, [pc, #352]	@ (800040c <display7SEG1+0x2c0>)
 80002aa:	f001 f83d 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED1_7_GPIO_Port, LED1_7_Pin, led_on);
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	b2db      	uxtb	r3, r3
 80002b2:	461a      	mov	r2, r3
 80002b4:	2180      	movs	r1, #128	@ 0x80
 80002b6:	4855      	ldr	r0, [pc, #340]	@ (800040c <display7SEG1+0x2c0>)
 80002b8:	f001 f836 	bl	8001328 <HAL_GPIO_WritePin>
            break;
 80002bc:	e106      	b.n	80004cc <display7SEG1+0x380>
        case 3:
            HAL_GPIO_WritePin(LED1_1_GPIO_Port, LED1_1_Pin, led_on);
 80002be:	68fb      	ldr	r3, [r7, #12]
 80002c0:	b2db      	uxtb	r3, r3
 80002c2:	461a      	mov	r2, r3
 80002c4:	2102      	movs	r1, #2
 80002c6:	4851      	ldr	r0, [pc, #324]	@ (800040c <display7SEG1+0x2c0>)
 80002c8:	f001 f82e 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED1_2_GPIO_Port, LED1_2_Pin, led_on);
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	b2db      	uxtb	r3, r3
 80002d0:	461a      	mov	r2, r3
 80002d2:	2104      	movs	r1, #4
 80002d4:	484d      	ldr	r0, [pc, #308]	@ (800040c <display7SEG1+0x2c0>)
 80002d6:	f001 f827 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED1_3_GPIO_Port, LED1_3_Pin, led_on);
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	b2db      	uxtb	r3, r3
 80002de:	461a      	mov	r2, r3
 80002e0:	2108      	movs	r1, #8
 80002e2:	484a      	ldr	r0, [pc, #296]	@ (800040c <display7SEG1+0x2c0>)
 80002e4:	f001 f820 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED1_4_GPIO_Port, LED1_4_Pin, led_on);
 80002e8:	68fb      	ldr	r3, [r7, #12]
 80002ea:	b2db      	uxtb	r3, r3
 80002ec:	461a      	mov	r2, r3
 80002ee:	2110      	movs	r1, #16
 80002f0:	4846      	ldr	r0, [pc, #280]	@ (800040c <display7SEG1+0x2c0>)
 80002f2:	f001 f819 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED1_7_GPIO_Port, LED1_7_Pin, led_on);
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	b2db      	uxtb	r3, r3
 80002fa:	461a      	mov	r2, r3
 80002fc:	2180      	movs	r1, #128	@ 0x80
 80002fe:	4843      	ldr	r0, [pc, #268]	@ (800040c <display7SEG1+0x2c0>)
 8000300:	f001 f812 	bl	8001328 <HAL_GPIO_WritePin>
            break;
 8000304:	e0e2      	b.n	80004cc <display7SEG1+0x380>
        case 4:
            HAL_GPIO_WritePin(LED1_2_GPIO_Port, LED1_2_Pin, led_on);
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	b2db      	uxtb	r3, r3
 800030a:	461a      	mov	r2, r3
 800030c:	2104      	movs	r1, #4
 800030e:	483f      	ldr	r0, [pc, #252]	@ (800040c <display7SEG1+0x2c0>)
 8000310:	f001 f80a 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED1_3_GPIO_Port, LED1_3_Pin, led_on);
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	b2db      	uxtb	r3, r3
 8000318:	461a      	mov	r2, r3
 800031a:	2108      	movs	r1, #8
 800031c:	483b      	ldr	r0, [pc, #236]	@ (800040c <display7SEG1+0x2c0>)
 800031e:	f001 f803 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED1_6_GPIO_Port, LED1_6_Pin, led_on);
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	b2db      	uxtb	r3, r3
 8000326:	461a      	mov	r2, r3
 8000328:	2140      	movs	r1, #64	@ 0x40
 800032a:	4838      	ldr	r0, [pc, #224]	@ (800040c <display7SEG1+0x2c0>)
 800032c:	f000 fffc 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED1_7_GPIO_Port, LED1_7_Pin, led_on);
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	b2db      	uxtb	r3, r3
 8000334:	461a      	mov	r2, r3
 8000336:	2180      	movs	r1, #128	@ 0x80
 8000338:	4834      	ldr	r0, [pc, #208]	@ (800040c <display7SEG1+0x2c0>)
 800033a:	f000 fff5 	bl	8001328 <HAL_GPIO_WritePin>
            break;
 800033e:	e0c5      	b.n	80004cc <display7SEG1+0x380>
        case 5:
            HAL_GPIO_WritePin(LED1_1_GPIO_Port, LED1_1_Pin, led_on);
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	b2db      	uxtb	r3, r3
 8000344:	461a      	mov	r2, r3
 8000346:	2102      	movs	r1, #2
 8000348:	4830      	ldr	r0, [pc, #192]	@ (800040c <display7SEG1+0x2c0>)
 800034a:	f000 ffed 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED1_3_GPIO_Port, LED1_3_Pin, led_on);
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	b2db      	uxtb	r3, r3
 8000352:	461a      	mov	r2, r3
 8000354:	2108      	movs	r1, #8
 8000356:	482d      	ldr	r0, [pc, #180]	@ (800040c <display7SEG1+0x2c0>)
 8000358:	f000 ffe6 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED1_4_GPIO_Port, LED1_4_Pin, led_on);
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	b2db      	uxtb	r3, r3
 8000360:	461a      	mov	r2, r3
 8000362:	2110      	movs	r1, #16
 8000364:	4829      	ldr	r0, [pc, #164]	@ (800040c <display7SEG1+0x2c0>)
 8000366:	f000 ffdf 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED1_6_GPIO_Port, LED1_6_Pin, led_on);
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	b2db      	uxtb	r3, r3
 800036e:	461a      	mov	r2, r3
 8000370:	2140      	movs	r1, #64	@ 0x40
 8000372:	4826      	ldr	r0, [pc, #152]	@ (800040c <display7SEG1+0x2c0>)
 8000374:	f000 ffd8 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED1_7_GPIO_Port, LED1_7_Pin, led_on);
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	b2db      	uxtb	r3, r3
 800037c:	461a      	mov	r2, r3
 800037e:	2180      	movs	r1, #128	@ 0x80
 8000380:	4822      	ldr	r0, [pc, #136]	@ (800040c <display7SEG1+0x2c0>)
 8000382:	f000 ffd1 	bl	8001328 <HAL_GPIO_WritePin>
            break;
 8000386:	e0a1      	b.n	80004cc <display7SEG1+0x380>
        case 6:
            HAL_GPIO_WritePin(LED1_1_GPIO_Port, LED1_1_Pin, led_on);
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	b2db      	uxtb	r3, r3
 800038c:	461a      	mov	r2, r3
 800038e:	2102      	movs	r1, #2
 8000390:	481e      	ldr	r0, [pc, #120]	@ (800040c <display7SEG1+0x2c0>)
 8000392:	f000 ffc9 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED1_3_GPIO_Port, LED1_3_Pin, led_on);
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	b2db      	uxtb	r3, r3
 800039a:	461a      	mov	r2, r3
 800039c:	2108      	movs	r1, #8
 800039e:	481b      	ldr	r0, [pc, #108]	@ (800040c <display7SEG1+0x2c0>)
 80003a0:	f000 ffc2 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED1_4_GPIO_Port, LED1_4_Pin, led_on);
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	b2db      	uxtb	r3, r3
 80003a8:	461a      	mov	r2, r3
 80003aa:	2110      	movs	r1, #16
 80003ac:	4817      	ldr	r0, [pc, #92]	@ (800040c <display7SEG1+0x2c0>)
 80003ae:	f000 ffbb 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED1_5_GPIO_Port, LED1_5_Pin, led_on);
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	b2db      	uxtb	r3, r3
 80003b6:	461a      	mov	r2, r3
 80003b8:	2120      	movs	r1, #32
 80003ba:	4814      	ldr	r0, [pc, #80]	@ (800040c <display7SEG1+0x2c0>)
 80003bc:	f000 ffb4 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED1_6_GPIO_Port, LED1_6_Pin, led_on);
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	b2db      	uxtb	r3, r3
 80003c4:	461a      	mov	r2, r3
 80003c6:	2140      	movs	r1, #64	@ 0x40
 80003c8:	4810      	ldr	r0, [pc, #64]	@ (800040c <display7SEG1+0x2c0>)
 80003ca:	f000 ffad 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED1_7_GPIO_Port, LED1_7_Pin, led_on);
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	b2db      	uxtb	r3, r3
 80003d2:	461a      	mov	r2, r3
 80003d4:	2180      	movs	r1, #128	@ 0x80
 80003d6:	480d      	ldr	r0, [pc, #52]	@ (800040c <display7SEG1+0x2c0>)
 80003d8:	f000 ffa6 	bl	8001328 <HAL_GPIO_WritePin>
            break;
 80003dc:	e076      	b.n	80004cc <display7SEG1+0x380>
        case 7:
            HAL_GPIO_WritePin(LED1_1_GPIO_Port, LED1_1_Pin, led_on);
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	b2db      	uxtb	r3, r3
 80003e2:	461a      	mov	r2, r3
 80003e4:	2102      	movs	r1, #2
 80003e6:	4809      	ldr	r0, [pc, #36]	@ (800040c <display7SEG1+0x2c0>)
 80003e8:	f000 ff9e 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED1_2_GPIO_Port, LED1_2_Pin, led_on);
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	b2db      	uxtb	r3, r3
 80003f0:	461a      	mov	r2, r3
 80003f2:	2104      	movs	r1, #4
 80003f4:	4805      	ldr	r0, [pc, #20]	@ (800040c <display7SEG1+0x2c0>)
 80003f6:	f000 ff97 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED1_3_GPIO_Port, LED1_3_Pin, led_on);
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	b2db      	uxtb	r3, r3
 80003fe:	461a      	mov	r2, r3
 8000400:	2108      	movs	r1, #8
 8000402:	4802      	ldr	r0, [pc, #8]	@ (800040c <display7SEG1+0x2c0>)
 8000404:	f000 ff90 	bl	8001328 <HAL_GPIO_WritePin>
            break;
 8000408:	e060      	b.n	80004cc <display7SEG1+0x380>
 800040a:	bf00      	nop
 800040c:	40010c00 	.word	0x40010c00
        case 8:
            HAL_GPIO_WritePin(LED1_1_GPIO_Port, LED1_1_Pin, led_on);
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	b2db      	uxtb	r3, r3
 8000414:	461a      	mov	r2, r3
 8000416:	2102      	movs	r1, #2
 8000418:	482e      	ldr	r0, [pc, #184]	@ (80004d4 <display7SEG1+0x388>)
 800041a:	f000 ff85 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED1_2_GPIO_Port, LED1_2_Pin, led_on);
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	b2db      	uxtb	r3, r3
 8000422:	461a      	mov	r2, r3
 8000424:	2104      	movs	r1, #4
 8000426:	482b      	ldr	r0, [pc, #172]	@ (80004d4 <display7SEG1+0x388>)
 8000428:	f000 ff7e 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED1_3_GPIO_Port, LED1_3_Pin, led_on);
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	b2db      	uxtb	r3, r3
 8000430:	461a      	mov	r2, r3
 8000432:	2108      	movs	r1, #8
 8000434:	4827      	ldr	r0, [pc, #156]	@ (80004d4 <display7SEG1+0x388>)
 8000436:	f000 ff77 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED1_4_GPIO_Port, LED1_4_Pin, led_on);
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	b2db      	uxtb	r3, r3
 800043e:	461a      	mov	r2, r3
 8000440:	2110      	movs	r1, #16
 8000442:	4824      	ldr	r0, [pc, #144]	@ (80004d4 <display7SEG1+0x388>)
 8000444:	f000 ff70 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED1_5_GPIO_Port, LED1_5_Pin, led_on);
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	b2db      	uxtb	r3, r3
 800044c:	461a      	mov	r2, r3
 800044e:	2120      	movs	r1, #32
 8000450:	4820      	ldr	r0, [pc, #128]	@ (80004d4 <display7SEG1+0x388>)
 8000452:	f000 ff69 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED1_6_GPIO_Port, LED1_6_Pin, led_on);
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	b2db      	uxtb	r3, r3
 800045a:	461a      	mov	r2, r3
 800045c:	2140      	movs	r1, #64	@ 0x40
 800045e:	481d      	ldr	r0, [pc, #116]	@ (80004d4 <display7SEG1+0x388>)
 8000460:	f000 ff62 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED1_7_GPIO_Port, LED1_7_Pin, led_on);
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	b2db      	uxtb	r3, r3
 8000468:	461a      	mov	r2, r3
 800046a:	2180      	movs	r1, #128	@ 0x80
 800046c:	4819      	ldr	r0, [pc, #100]	@ (80004d4 <display7SEG1+0x388>)
 800046e:	f000 ff5b 	bl	8001328 <HAL_GPIO_WritePin>
            break;
 8000472:	e02b      	b.n	80004cc <display7SEG1+0x380>
        case 9:
            HAL_GPIO_WritePin(LED1_1_GPIO_Port, LED1_1_Pin, led_on);
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	b2db      	uxtb	r3, r3
 8000478:	461a      	mov	r2, r3
 800047a:	2102      	movs	r1, #2
 800047c:	4815      	ldr	r0, [pc, #84]	@ (80004d4 <display7SEG1+0x388>)
 800047e:	f000 ff53 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED1_2_GPIO_Port, LED1_2_Pin, led_on);
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	b2db      	uxtb	r3, r3
 8000486:	461a      	mov	r2, r3
 8000488:	2104      	movs	r1, #4
 800048a:	4812      	ldr	r0, [pc, #72]	@ (80004d4 <display7SEG1+0x388>)
 800048c:	f000 ff4c 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED1_3_GPIO_Port, LED1_3_Pin, led_on);
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	b2db      	uxtb	r3, r3
 8000494:	461a      	mov	r2, r3
 8000496:	2108      	movs	r1, #8
 8000498:	480e      	ldr	r0, [pc, #56]	@ (80004d4 <display7SEG1+0x388>)
 800049a:	f000 ff45 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED1_4_GPIO_Port, LED1_4_Pin, led_on);
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	b2db      	uxtb	r3, r3
 80004a2:	461a      	mov	r2, r3
 80004a4:	2110      	movs	r1, #16
 80004a6:	480b      	ldr	r0, [pc, #44]	@ (80004d4 <display7SEG1+0x388>)
 80004a8:	f000 ff3e 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED1_6_GPIO_Port, LED1_6_Pin, led_on);
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	b2db      	uxtb	r3, r3
 80004b0:	461a      	mov	r2, r3
 80004b2:	2140      	movs	r1, #64	@ 0x40
 80004b4:	4807      	ldr	r0, [pc, #28]	@ (80004d4 <display7SEG1+0x388>)
 80004b6:	f000 ff37 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED1_7_GPIO_Port, LED1_7_Pin, led_on);
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	b2db      	uxtb	r3, r3
 80004be:	461a      	mov	r2, r3
 80004c0:	2180      	movs	r1, #128	@ 0x80
 80004c2:	4804      	ldr	r0, [pc, #16]	@ (80004d4 <display7SEG1+0x388>)
 80004c4:	f000 ff30 	bl	8001328 <HAL_GPIO_WritePin>
            break;
 80004c8:	e000      	b.n	80004cc <display7SEG1+0x380>
        default:
            break;
 80004ca:	bf00      	nop
    }
}
 80004cc:	bf00      	nop
 80004ce:	3710      	adds	r7, #16
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	40010c00 	.word	0x40010c00

080004d8 <display7SEG2>:
void display7SEG2(int counter) {
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
    const int led_on = 0;
 80004e0:	2300      	movs	r3, #0
 80004e2:	60fb      	str	r3, [r7, #12]
    const int led_off = 1;
 80004e4:	2301      	movs	r3, #1
 80004e6:	60bb      	str	r3, [r7, #8]
    // Tắt tất cả các LED trước khi hiển thị
    HAL_GPIO_WritePin(LED2_1_GPIO_Port, LED2_1_Pin, led_off);
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	461a      	mov	r2, r3
 80004ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004f2:	48b3      	ldr	r0, [pc, #716]	@ (80007c0 <display7SEG2+0x2e8>)
 80004f4:	f000 ff18 	bl	8001328 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED2_2_GPIO_Port, LED2_2_Pin, led_off);
 80004f8:	68bb      	ldr	r3, [r7, #8]
 80004fa:	b2db      	uxtb	r3, r3
 80004fc:	461a      	mov	r2, r3
 80004fe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000502:	48af      	ldr	r0, [pc, #700]	@ (80007c0 <display7SEG2+0x2e8>)
 8000504:	f000 ff10 	bl	8001328 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED2_3_GPIO_Port, LED2_3_Pin, led_off);
 8000508:	68bb      	ldr	r3, [r7, #8]
 800050a:	b2db      	uxtb	r3, r3
 800050c:	461a      	mov	r2, r3
 800050e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000512:	48ab      	ldr	r0, [pc, #684]	@ (80007c0 <display7SEG2+0x2e8>)
 8000514:	f000 ff08 	bl	8001328 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED2_4_GPIO_Port, LED2_4_Pin, led_off);
 8000518:	68bb      	ldr	r3, [r7, #8]
 800051a:	b2db      	uxtb	r3, r3
 800051c:	461a      	mov	r2, r3
 800051e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000522:	48a7      	ldr	r0, [pc, #668]	@ (80007c0 <display7SEG2+0x2e8>)
 8000524:	f000 ff00 	bl	8001328 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED2_5_GPIO_Port, LED2_5_Pin, led_off);
 8000528:	68bb      	ldr	r3, [r7, #8]
 800052a:	b2db      	uxtb	r3, r3
 800052c:	461a      	mov	r2, r3
 800052e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000532:	48a3      	ldr	r0, [pc, #652]	@ (80007c0 <display7SEG2+0x2e8>)
 8000534:	f000 fef8 	bl	8001328 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED2_6_GPIO_Port, LED2_6_Pin, led_off);
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	b2db      	uxtb	r3, r3
 800053c:	461a      	mov	r2, r3
 800053e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000542:	489f      	ldr	r0, [pc, #636]	@ (80007c0 <display7SEG2+0x2e8>)
 8000544:	f000 fef0 	bl	8001328 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED2_7_GPIO_Port, LED2_7_Pin, led_off);
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	b2db      	uxtb	r3, r3
 800054c:	461a      	mov	r2, r3
 800054e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000552:	489b      	ldr	r0, [pc, #620]	@ (80007c0 <display7SEG2+0x2e8>)
 8000554:	f000 fee8 	bl	8001328 <HAL_GPIO_WritePin>

    // Bật các LED theo giá trị của counter
    switch (counter) {
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	2b09      	cmp	r3, #9
 800055c:	f200 81b5 	bhi.w	80008ca <display7SEG2+0x3f2>
 8000560:	a201      	add	r2, pc, #4	@ (adr r2, 8000568 <display7SEG2+0x90>)
 8000562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000566:	bf00      	nop
 8000568:	08000591 	.word	0x08000591
 800056c:	08000603 	.word	0x08000603
 8000570:	08000625 	.word	0x08000625
 8000574:	08000677 	.word	0x08000677
 8000578:	080006c9 	.word	0x080006c9
 800057c:	0800070b 	.word	0x0800070b
 8000580:	0800075d 	.word	0x0800075d
 8000584:	080007c5 	.word	0x080007c5
 8000588:	080007f7 	.word	0x080007f7
 800058c:	08000869 	.word	0x08000869
        case 0:
            HAL_GPIO_WritePin(LED2_1_GPIO_Port, LED2_1_Pin, led_on);
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	b2db      	uxtb	r3, r3
 8000594:	461a      	mov	r2, r3
 8000596:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800059a:	4889      	ldr	r0, [pc, #548]	@ (80007c0 <display7SEG2+0x2e8>)
 800059c:	f000 fec4 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED2_2_GPIO_Port, LED2_2_Pin, led_on);
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	461a      	mov	r2, r3
 80005a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005aa:	4885      	ldr	r0, [pc, #532]	@ (80007c0 <display7SEG2+0x2e8>)
 80005ac:	f000 febc 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED2_3_GPIO_Port, LED2_3_Pin, led_on);
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	461a      	mov	r2, r3
 80005b6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005ba:	4881      	ldr	r0, [pc, #516]	@ (80007c0 <display7SEG2+0x2e8>)
 80005bc:	f000 feb4 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED2_4_GPIO_Port, LED2_4_Pin, led_on);
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	461a      	mov	r2, r3
 80005c6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80005ca:	487d      	ldr	r0, [pc, #500]	@ (80007c0 <display7SEG2+0x2e8>)
 80005cc:	f000 feac 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED2_5_GPIO_Port, LED2_5_Pin, led_on);
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	461a      	mov	r2, r3
 80005d6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005da:	4879      	ldr	r0, [pc, #484]	@ (80007c0 <display7SEG2+0x2e8>)
 80005dc:	f000 fea4 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED2_6_GPIO_Port, LED2_6_Pin, led_on);
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	461a      	mov	r2, r3
 80005e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005ea:	4875      	ldr	r0, [pc, #468]	@ (80007c0 <display7SEG2+0x2e8>)
 80005ec:	f000 fe9c 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED2_7_GPIO_Port, LED2_7_Pin, led_off);
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	461a      	mov	r2, r3
 80005f6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005fa:	4871      	ldr	r0, [pc, #452]	@ (80007c0 <display7SEG2+0x2e8>)
 80005fc:	f000 fe94 	bl	8001328 <HAL_GPIO_WritePin>
            break;
 8000600:	e164      	b.n	80008cc <display7SEG2+0x3f4>
        case 1:
            HAL_GPIO_WritePin(LED2_2_GPIO_Port, LED2_2_Pin, led_on);
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	b2db      	uxtb	r3, r3
 8000606:	461a      	mov	r2, r3
 8000608:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800060c:	486c      	ldr	r0, [pc, #432]	@ (80007c0 <display7SEG2+0x2e8>)
 800060e:	f000 fe8b 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED2_3_GPIO_Port, LED2_3_Pin, led_on);
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	b2db      	uxtb	r3, r3
 8000616:	461a      	mov	r2, r3
 8000618:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800061c:	4868      	ldr	r0, [pc, #416]	@ (80007c0 <display7SEG2+0x2e8>)
 800061e:	f000 fe83 	bl	8001328 <HAL_GPIO_WritePin>
            break;
 8000622:	e153      	b.n	80008cc <display7SEG2+0x3f4>
        case 2:
            HAL_GPIO_WritePin(LED2_1_GPIO_Port, LED2_1_Pin, led_on);
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	b2db      	uxtb	r3, r3
 8000628:	461a      	mov	r2, r3
 800062a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800062e:	4864      	ldr	r0, [pc, #400]	@ (80007c0 <display7SEG2+0x2e8>)
 8000630:	f000 fe7a 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED2_2_GPIO_Port, LED2_2_Pin, led_on);
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	b2db      	uxtb	r3, r3
 8000638:	461a      	mov	r2, r3
 800063a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800063e:	4860      	ldr	r0, [pc, #384]	@ (80007c0 <display7SEG2+0x2e8>)
 8000640:	f000 fe72 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED2_4_GPIO_Port, LED2_4_Pin, led_on);
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	b2db      	uxtb	r3, r3
 8000648:	461a      	mov	r2, r3
 800064a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800064e:	485c      	ldr	r0, [pc, #368]	@ (80007c0 <display7SEG2+0x2e8>)
 8000650:	f000 fe6a 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED2_5_GPIO_Port, LED2_5_Pin, led_on);
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	b2db      	uxtb	r3, r3
 8000658:	461a      	mov	r2, r3
 800065a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800065e:	4858      	ldr	r0, [pc, #352]	@ (80007c0 <display7SEG2+0x2e8>)
 8000660:	f000 fe62 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED2_7_GPIO_Port, LED2_7_Pin, led_on);
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	b2db      	uxtb	r3, r3
 8000668:	461a      	mov	r2, r3
 800066a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800066e:	4854      	ldr	r0, [pc, #336]	@ (80007c0 <display7SEG2+0x2e8>)
 8000670:	f000 fe5a 	bl	8001328 <HAL_GPIO_WritePin>
            break;
 8000674:	e12a      	b.n	80008cc <display7SEG2+0x3f4>
        case 3:
            HAL_GPIO_WritePin(LED2_1_GPIO_Port, LED2_1_Pin, led_on);
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	b2db      	uxtb	r3, r3
 800067a:	461a      	mov	r2, r3
 800067c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000680:	484f      	ldr	r0, [pc, #316]	@ (80007c0 <display7SEG2+0x2e8>)
 8000682:	f000 fe51 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED2_2_GPIO_Port, LED2_2_Pin, led_on);
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	b2db      	uxtb	r3, r3
 800068a:	461a      	mov	r2, r3
 800068c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000690:	484b      	ldr	r0, [pc, #300]	@ (80007c0 <display7SEG2+0x2e8>)
 8000692:	f000 fe49 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED2_3_GPIO_Port, LED2_3_Pin, led_on);
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	b2db      	uxtb	r3, r3
 800069a:	461a      	mov	r2, r3
 800069c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006a0:	4847      	ldr	r0, [pc, #284]	@ (80007c0 <display7SEG2+0x2e8>)
 80006a2:	f000 fe41 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED2_4_GPIO_Port, LED2_4_Pin, led_on);
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	461a      	mov	r2, r3
 80006ac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006b0:	4843      	ldr	r0, [pc, #268]	@ (80007c0 <display7SEG2+0x2e8>)
 80006b2:	f000 fe39 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED2_7_GPIO_Port, LED2_7_Pin, led_on);
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	461a      	mov	r2, r3
 80006bc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006c0:	483f      	ldr	r0, [pc, #252]	@ (80007c0 <display7SEG2+0x2e8>)
 80006c2:	f000 fe31 	bl	8001328 <HAL_GPIO_WritePin>
            break;
 80006c6:	e101      	b.n	80008cc <display7SEG2+0x3f4>
        case 4:
            HAL_GPIO_WritePin(LED2_2_GPIO_Port, LED2_2_Pin, led_on);
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	461a      	mov	r2, r3
 80006ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006d2:	483b      	ldr	r0, [pc, #236]	@ (80007c0 <display7SEG2+0x2e8>)
 80006d4:	f000 fe28 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED2_3_GPIO_Port, LED2_3_Pin, led_on);
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	461a      	mov	r2, r3
 80006de:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006e2:	4837      	ldr	r0, [pc, #220]	@ (80007c0 <display7SEG2+0x2e8>)
 80006e4:	f000 fe20 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED2_6_GPIO_Port, LED2_6_Pin, led_on);
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	461a      	mov	r2, r3
 80006ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006f2:	4833      	ldr	r0, [pc, #204]	@ (80007c0 <display7SEG2+0x2e8>)
 80006f4:	f000 fe18 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED2_7_GPIO_Port, LED2_7_Pin, led_on);
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	461a      	mov	r2, r3
 80006fe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000702:	482f      	ldr	r0, [pc, #188]	@ (80007c0 <display7SEG2+0x2e8>)
 8000704:	f000 fe10 	bl	8001328 <HAL_GPIO_WritePin>
            break;
 8000708:	e0e0      	b.n	80008cc <display7SEG2+0x3f4>
        case 5:
            HAL_GPIO_WritePin(LED2_1_GPIO_Port, LED2_1_Pin, led_on);
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	b2db      	uxtb	r3, r3
 800070e:	461a      	mov	r2, r3
 8000710:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000714:	482a      	ldr	r0, [pc, #168]	@ (80007c0 <display7SEG2+0x2e8>)
 8000716:	f000 fe07 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED2_3_GPIO_Port, LED2_3_Pin, led_on);
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	b2db      	uxtb	r3, r3
 800071e:	461a      	mov	r2, r3
 8000720:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000724:	4826      	ldr	r0, [pc, #152]	@ (80007c0 <display7SEG2+0x2e8>)
 8000726:	f000 fdff 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED2_4_GPIO_Port, LED2_4_Pin, led_on);
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	b2db      	uxtb	r3, r3
 800072e:	461a      	mov	r2, r3
 8000730:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000734:	4822      	ldr	r0, [pc, #136]	@ (80007c0 <display7SEG2+0x2e8>)
 8000736:	f000 fdf7 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED2_6_GPIO_Port, LED2_6_Pin, led_on);
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	b2db      	uxtb	r3, r3
 800073e:	461a      	mov	r2, r3
 8000740:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000744:	481e      	ldr	r0, [pc, #120]	@ (80007c0 <display7SEG2+0x2e8>)
 8000746:	f000 fdef 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED2_7_GPIO_Port, LED2_7_Pin, led_on);
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	b2db      	uxtb	r3, r3
 800074e:	461a      	mov	r2, r3
 8000750:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000754:	481a      	ldr	r0, [pc, #104]	@ (80007c0 <display7SEG2+0x2e8>)
 8000756:	f000 fde7 	bl	8001328 <HAL_GPIO_WritePin>
            break;
 800075a:	e0b7      	b.n	80008cc <display7SEG2+0x3f4>
        case 6:
            HAL_GPIO_WritePin(LED2_1_GPIO_Port, LED2_1_Pin, led_on);
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	b2db      	uxtb	r3, r3
 8000760:	461a      	mov	r2, r3
 8000762:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000766:	4816      	ldr	r0, [pc, #88]	@ (80007c0 <display7SEG2+0x2e8>)
 8000768:	f000 fdde 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED2_3_GPIO_Port, LED2_3_Pin, led_on);
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	b2db      	uxtb	r3, r3
 8000770:	461a      	mov	r2, r3
 8000772:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000776:	4812      	ldr	r0, [pc, #72]	@ (80007c0 <display7SEG2+0x2e8>)
 8000778:	f000 fdd6 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED2_4_GPIO_Port, LED2_4_Pin, led_on);
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	b2db      	uxtb	r3, r3
 8000780:	461a      	mov	r2, r3
 8000782:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000786:	480e      	ldr	r0, [pc, #56]	@ (80007c0 <display7SEG2+0x2e8>)
 8000788:	f000 fdce 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED2_5_GPIO_Port, LED2_5_Pin, led_on);
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	b2db      	uxtb	r3, r3
 8000790:	461a      	mov	r2, r3
 8000792:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000796:	480a      	ldr	r0, [pc, #40]	@ (80007c0 <display7SEG2+0x2e8>)
 8000798:	f000 fdc6 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED2_6_GPIO_Port, LED2_6_Pin, led_on);
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	461a      	mov	r2, r3
 80007a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007a6:	4806      	ldr	r0, [pc, #24]	@ (80007c0 <display7SEG2+0x2e8>)
 80007a8:	f000 fdbe 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED2_7_GPIO_Port, LED2_7_Pin, led_on);
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	461a      	mov	r2, r3
 80007b2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007b6:	4802      	ldr	r0, [pc, #8]	@ (80007c0 <display7SEG2+0x2e8>)
 80007b8:	f000 fdb6 	bl	8001328 <HAL_GPIO_WritePin>
            break;
 80007bc:	e086      	b.n	80008cc <display7SEG2+0x3f4>
 80007be:	bf00      	nop
 80007c0:	40010c00 	.word	0x40010c00
        case 7:
            HAL_GPIO_WritePin(LED2_1_GPIO_Port, LED2_1_Pin, led_on);
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	461a      	mov	r2, r3
 80007ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007ce:	4841      	ldr	r0, [pc, #260]	@ (80008d4 <display7SEG2+0x3fc>)
 80007d0:	f000 fdaa 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED2_2_GPIO_Port, LED2_2_Pin, led_on);
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	461a      	mov	r2, r3
 80007da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007de:	483d      	ldr	r0, [pc, #244]	@ (80008d4 <display7SEG2+0x3fc>)
 80007e0:	f000 fda2 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED2_3_GPIO_Port, LED2_3_Pin, led_on);
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	461a      	mov	r2, r3
 80007ea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007ee:	4839      	ldr	r0, [pc, #228]	@ (80008d4 <display7SEG2+0x3fc>)
 80007f0:	f000 fd9a 	bl	8001328 <HAL_GPIO_WritePin>
            break;
 80007f4:	e06a      	b.n	80008cc <display7SEG2+0x3f4>
        case 8:
            HAL_GPIO_WritePin(LED2_1_GPIO_Port, LED2_1_Pin, led_on);
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	461a      	mov	r2, r3
 80007fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000800:	4834      	ldr	r0, [pc, #208]	@ (80008d4 <display7SEG2+0x3fc>)
 8000802:	f000 fd91 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED2_2_GPIO_Port, LED2_2_Pin, led_on);
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	b2db      	uxtb	r3, r3
 800080a:	461a      	mov	r2, r3
 800080c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000810:	4830      	ldr	r0, [pc, #192]	@ (80008d4 <display7SEG2+0x3fc>)
 8000812:	f000 fd89 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED2_3_GPIO_Port, LED2_3_Pin, led_on);
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	b2db      	uxtb	r3, r3
 800081a:	461a      	mov	r2, r3
 800081c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000820:	482c      	ldr	r0, [pc, #176]	@ (80008d4 <display7SEG2+0x3fc>)
 8000822:	f000 fd81 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED2_4_GPIO_Port, LED2_4_Pin, led_on);
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	b2db      	uxtb	r3, r3
 800082a:	461a      	mov	r2, r3
 800082c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000830:	4828      	ldr	r0, [pc, #160]	@ (80008d4 <display7SEG2+0x3fc>)
 8000832:	f000 fd79 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED2_5_GPIO_Port, LED2_5_Pin, led_on);
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	b2db      	uxtb	r3, r3
 800083a:	461a      	mov	r2, r3
 800083c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000840:	4824      	ldr	r0, [pc, #144]	@ (80008d4 <display7SEG2+0x3fc>)
 8000842:	f000 fd71 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED2_6_GPIO_Port, LED2_6_Pin, led_on);
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	b2db      	uxtb	r3, r3
 800084a:	461a      	mov	r2, r3
 800084c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000850:	4820      	ldr	r0, [pc, #128]	@ (80008d4 <display7SEG2+0x3fc>)
 8000852:	f000 fd69 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED2_7_GPIO_Port, LED2_7_Pin, led_on);
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	b2db      	uxtb	r3, r3
 800085a:	461a      	mov	r2, r3
 800085c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000860:	481c      	ldr	r0, [pc, #112]	@ (80008d4 <display7SEG2+0x3fc>)
 8000862:	f000 fd61 	bl	8001328 <HAL_GPIO_WritePin>
            break;
 8000866:	e031      	b.n	80008cc <display7SEG2+0x3f4>
        case 9:
            HAL_GPIO_WritePin(LED2_1_GPIO_Port, LED2_1_Pin, led_on);
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	b2db      	uxtb	r3, r3
 800086c:	461a      	mov	r2, r3
 800086e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000872:	4818      	ldr	r0, [pc, #96]	@ (80008d4 <display7SEG2+0x3fc>)
 8000874:	f000 fd58 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED2_2_GPIO_Port, LED2_2_Pin, led_on);
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	b2db      	uxtb	r3, r3
 800087c:	461a      	mov	r2, r3
 800087e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000882:	4814      	ldr	r0, [pc, #80]	@ (80008d4 <display7SEG2+0x3fc>)
 8000884:	f000 fd50 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED2_3_GPIO_Port, LED2_3_Pin, led_on);
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	b2db      	uxtb	r3, r3
 800088c:	461a      	mov	r2, r3
 800088e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000892:	4810      	ldr	r0, [pc, #64]	@ (80008d4 <display7SEG2+0x3fc>)
 8000894:	f000 fd48 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED2_4_GPIO_Port, LED2_4_Pin, led_on);
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	b2db      	uxtb	r3, r3
 800089c:	461a      	mov	r2, r3
 800089e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80008a2:	480c      	ldr	r0, [pc, #48]	@ (80008d4 <display7SEG2+0x3fc>)
 80008a4:	f000 fd40 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED2_6_GPIO_Port, LED2_6_Pin, led_on);
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	461a      	mov	r2, r3
 80008ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008b2:	4808      	ldr	r0, [pc, #32]	@ (80008d4 <display7SEG2+0x3fc>)
 80008b4:	f000 fd38 	bl	8001328 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED2_7_GPIO_Port, LED2_7_Pin, led_on);
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	461a      	mov	r2, r3
 80008be:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008c2:	4804      	ldr	r0, [pc, #16]	@ (80008d4 <display7SEG2+0x3fc>)
 80008c4:	f000 fd30 	bl	8001328 <HAL_GPIO_WritePin>
            break;
 80008c8:	e000      	b.n	80008cc <display7SEG2+0x3f4>
        default:
            break;
 80008ca:	bf00      	nop
    }
}
 80008cc:	bf00      	nop
 80008ce:	3710      	adds	r7, #16
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40010c00 	.word	0x40010c00

080008d8 <exercise5>:

void exercise5() {
 80008d8:	b580      	push	{r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af00      	add	r7, sp, #0
	int led_on = 0;
 80008de:	2300      	movs	r3, #0
 80008e0:	60bb      	str	r3, [r7, #8]
	int led_off = 1;
 80008e2:	2301      	movs	r3, #1
 80008e4:	607b      	str	r3, [r7, #4]
	int count1 = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	617b      	str	r3, [r7, #20]
	int count2 = 7;
 80008ea:	2307      	movs	r3, #7
 80008ec:	613b      	str	r3, [r7, #16]
	int count3 = 5;
 80008ee:	2305      	movs	r3, #5
 80008f0:	60fb      	str	r3, [r7, #12]
	while (1){
		if (count1 < 5){
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	2b04      	cmp	r3, #4
 80008f6:	dc39      	bgt.n	800096c <exercise5+0x94>
			display7SEG1(count2);
 80008f8:	6938      	ldr	r0, [r7, #16]
 80008fa:	f7ff fc27 	bl	800014c <display7SEG1>
			count2--;
 80008fe:	693b      	ldr	r3, [r7, #16]
 8000900:	3b01      	subs	r3, #1
 8000902:	613b      	str	r3, [r7, #16]
			count1++;
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	3301      	adds	r3, #1
 8000908:	617b      	str	r3, [r7, #20]
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, led_on);
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	b2db      	uxtb	r3, r3
 800090e:	461a      	mov	r2, r3
 8000910:	2102      	movs	r1, #2
 8000912:	4883      	ldr	r0, [pc, #524]	@ (8000b20 <exercise5+0x248>)
 8000914:	f000 fd08 	bl	8001328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, led_off);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	b2db      	uxtb	r3, r3
 800091c:	461a      	mov	r2, r3
 800091e:	2104      	movs	r1, #4
 8000920:	487f      	ldr	r0, [pc, #508]	@ (8000b20 <exercise5+0x248>)
 8000922:	f000 fd01 	bl	8001328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, led_off);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	b2db      	uxtb	r3, r3
 800092a:	461a      	mov	r2, r3
 800092c:	2108      	movs	r1, #8
 800092e:	487c      	ldr	r0, [pc, #496]	@ (8000b20 <exercise5+0x248>)
 8000930:	f000 fcfa 	bl	8001328 <HAL_GPIO_WritePin>

			display7SEG2(count3);
 8000934:	68f8      	ldr	r0, [r7, #12]
 8000936:	f7ff fdcf 	bl	80004d8 <display7SEG2>
			count3--;
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	3b01      	subs	r3, #1
 800093e:	60fb      	str	r3, [r7, #12]
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, led_off);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	b2db      	uxtb	r3, r3
 8000944:	461a      	mov	r2, r3
 8000946:	2110      	movs	r1, #16
 8000948:	4875      	ldr	r0, [pc, #468]	@ (8000b20 <exercise5+0x248>)
 800094a:	f000 fced 	bl	8001328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, led_off);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	b2db      	uxtb	r3, r3
 8000952:	461a      	mov	r2, r3
 8000954:	2120      	movs	r1, #32
 8000956:	4872      	ldr	r0, [pc, #456]	@ (8000b20 <exercise5+0x248>)
 8000958:	f000 fce6 	bl	8001328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, led_on);
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	b2db      	uxtb	r3, r3
 8000960:	461a      	mov	r2, r3
 8000962:	2140      	movs	r1, #64	@ 0x40
 8000964:	486e      	ldr	r0, [pc, #440]	@ (8000b20 <exercise5+0x248>)
 8000966:	f000 fcdf 	bl	8001328 <HAL_GPIO_WritePin>
 800096a:	e0d3      	b.n	8000b14 <exercise5+0x23c>
		}
		else if (count1 >= 5 && count1 < 7){
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	2b04      	cmp	r3, #4
 8000970:	dd2c      	ble.n	80009cc <exercise5+0xf4>
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	2b06      	cmp	r3, #6
 8000976:	dc29      	bgt.n	80009cc <exercise5+0xf4>
			if (count1 == 5){
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	2b05      	cmp	r3, #5
 800097c:	d101      	bne.n	8000982 <exercise5+0xaa>
				count3 = 2;
 800097e:	2302      	movs	r3, #2
 8000980:	60fb      	str	r3, [r7, #12]
			}
			display7SEG1(count2);
 8000982:	6938      	ldr	r0, [r7, #16]
 8000984:	f7ff fbe2 	bl	800014c <display7SEG1>
			count2--;
 8000988:	693b      	ldr	r3, [r7, #16]
 800098a:	3b01      	subs	r3, #1
 800098c:	613b      	str	r3, [r7, #16]
			count1++;
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	3301      	adds	r3, #1
 8000992:	617b      	str	r3, [r7, #20]
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, led_on);
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	b2db      	uxtb	r3, r3
 8000998:	461a      	mov	r2, r3
 800099a:	2102      	movs	r1, #2
 800099c:	4860      	ldr	r0, [pc, #384]	@ (8000b20 <exercise5+0x248>)
 800099e:	f000 fcc3 	bl	8001328 <HAL_GPIO_WritePin>

			display7SEG2(count3);
 80009a2:	68f8      	ldr	r0, [r7, #12]
 80009a4:	f7ff fd98 	bl	80004d8 <display7SEG2>
			count3--;
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	3b01      	subs	r3, #1
 80009ac:	60fb      	str	r3, [r7, #12]
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, led_off);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	461a      	mov	r2, r3
 80009b4:	2140      	movs	r1, #64	@ 0x40
 80009b6:	485a      	ldr	r0, [pc, #360]	@ (8000b20 <exercise5+0x248>)
 80009b8:	f000 fcb6 	bl	8001328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, led_on);
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	461a      	mov	r2, r3
 80009c2:	2120      	movs	r1, #32
 80009c4:	4856      	ldr	r0, [pc, #344]	@ (8000b20 <exercise5+0x248>)
 80009c6:	f000 fcaf 	bl	8001328 <HAL_GPIO_WritePin>
 80009ca:	e0a3      	b.n	8000b14 <exercise5+0x23c>
		}
		else if (count1 >= 7 && count1 < 12){
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	2b06      	cmp	r3, #6
 80009d0:	dd35      	ble.n	8000a3e <exercise5+0x166>
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	2b0b      	cmp	r3, #11
 80009d6:	dc32      	bgt.n	8000a3e <exercise5+0x166>
			if (count1 == 7){
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	2b07      	cmp	r3, #7
 80009dc:	d103      	bne.n	80009e6 <exercise5+0x10e>
				count2 = 5;
 80009de:	2305      	movs	r3, #5
 80009e0:	613b      	str	r3, [r7, #16]
				count3 = 7;
 80009e2:	2307      	movs	r3, #7
 80009e4:	60fb      	str	r3, [r7, #12]
			}
			display7SEG1(count2);
 80009e6:	6938      	ldr	r0, [r7, #16]
 80009e8:	f7ff fbb0 	bl	800014c <display7SEG1>
			count2--;
 80009ec:	693b      	ldr	r3, [r7, #16]
 80009ee:	3b01      	subs	r3, #1
 80009f0:	613b      	str	r3, [r7, #16]
			count1++;
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	3301      	adds	r3, #1
 80009f6:	617b      	str	r3, [r7, #20]
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, led_off);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	461a      	mov	r2, r3
 80009fe:	2102      	movs	r1, #2
 8000a00:	4847      	ldr	r0, [pc, #284]	@ (8000b20 <exercise5+0x248>)
 8000a02:	f000 fc91 	bl	8001328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, led_on);
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	2108      	movs	r1, #8
 8000a0e:	4844      	ldr	r0, [pc, #272]	@ (8000b20 <exercise5+0x248>)
 8000a10:	f000 fc8a 	bl	8001328 <HAL_GPIO_WritePin>

			display7SEG2(count3);
 8000a14:	68f8      	ldr	r0, [r7, #12]
 8000a16:	f7ff fd5f 	bl	80004d8 <display7SEG2>
			count3--;
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	3b01      	subs	r3, #1
 8000a1e:	60fb      	str	r3, [r7, #12]
			HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, led_off);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	461a      	mov	r2, r3
 8000a26:	2120      	movs	r1, #32
 8000a28:	483d      	ldr	r0, [pc, #244]	@ (8000b20 <exercise5+0x248>)
 8000a2a:	f000 fc7d 	bl	8001328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, led_on);
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	461a      	mov	r2, r3
 8000a34:	2110      	movs	r1, #16
 8000a36:	483a      	ldr	r0, [pc, #232]	@ (8000b20 <exercise5+0x248>)
 8000a38:	f000 fc76 	bl	8001328 <HAL_GPIO_WritePin>
 8000a3c:	e06a      	b.n	8000b14 <exercise5+0x23c>
		}
		else if (count1 >= 12 && count1 < 14){
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	2b0b      	cmp	r3, #11
 8000a42:	dd33      	ble.n	8000aac <exercise5+0x1d4>
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	2b0d      	cmp	r3, #13
 8000a48:	dc30      	bgt.n	8000aac <exercise5+0x1d4>
			if (count1 == 12){
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	2b0c      	cmp	r3, #12
 8000a4e:	d101      	bne.n	8000a54 <exercise5+0x17c>
				count2 = 2;
 8000a50:	2302      	movs	r3, #2
 8000a52:	613b      	str	r3, [r7, #16]
			}
			display7SEG1(count2);
 8000a54:	6938      	ldr	r0, [r7, #16]
 8000a56:	f7ff fb79 	bl	800014c <display7SEG1>
			count2--;
 8000a5a:	693b      	ldr	r3, [r7, #16]
 8000a5c:	3b01      	subs	r3, #1
 8000a5e:	613b      	str	r3, [r7, #16]
			count1++;
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	3301      	adds	r3, #1
 8000a64:	617b      	str	r3, [r7, #20]
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, led_off);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	2108      	movs	r1, #8
 8000a6e:	482c      	ldr	r0, [pc, #176]	@ (8000b20 <exercise5+0x248>)
 8000a70:	f000 fc5a 	bl	8001328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, led_on);
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	461a      	mov	r2, r3
 8000a7a:	2104      	movs	r1, #4
 8000a7c:	4828      	ldr	r0, [pc, #160]	@ (8000b20 <exercise5+0x248>)
 8000a7e:	f000 fc53 	bl	8001328 <HAL_GPIO_WritePin>

			display7SEG2(count3);
 8000a82:	68f8      	ldr	r0, [r7, #12]
 8000a84:	f7ff fd28 	bl	80004d8 <display7SEG2>
			count3--;
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	60fb      	str	r3, [r7, #12]
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, led_off);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	461a      	mov	r2, r3
 8000a94:	2140      	movs	r1, #64	@ 0x40
 8000a96:	4822      	ldr	r0, [pc, #136]	@ (8000b20 <exercise5+0x248>)
 8000a98:	f000 fc46 	bl	8001328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, led_on);
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	2110      	movs	r1, #16
 8000aa4:	481e      	ldr	r0, [pc, #120]	@ (8000b20 <exercise5+0x248>)
 8000aa6:	f000 fc3f 	bl	8001328 <HAL_GPIO_WritePin>
 8000aaa:	e033      	b.n	8000b14 <exercise5+0x23c>
		}

		else if (count1 >= 14) {
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	2b0d      	cmp	r3, #13
 8000ab0:	dd30      	ble.n	8000b14 <exercise5+0x23c>
			if (count1 == 14){
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	2b0e      	cmp	r3, #14
 8000ab6:	d103      	bne.n	8000ac0 <exercise5+0x1e8>
				count2 = 7;
 8000ab8:	2307      	movs	r3, #7
 8000aba:	613b      	str	r3, [r7, #16]
				count3 = 5;
 8000abc:	2305      	movs	r3, #5
 8000abe:	60fb      	str	r3, [r7, #12]
			}
			display7SEG1(count2);
 8000ac0:	6938      	ldr	r0, [r7, #16]
 8000ac2:	f7ff fb43 	bl	800014c <display7SEG1>
			count2--;
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	3b01      	subs	r3, #1
 8000aca:	613b      	str	r3, [r7, #16]
			count1 = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	617b      	str	r3, [r7, #20]
			HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, led_off);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	2104      	movs	r1, #4
 8000ad8:	4811      	ldr	r0, [pc, #68]	@ (8000b20 <exercise5+0x248>)
 8000ada:	f000 fc25 	bl	8001328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, led_on);
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	2102      	movs	r1, #2
 8000ae6:	480e      	ldr	r0, [pc, #56]	@ (8000b20 <exercise5+0x248>)
 8000ae8:	f000 fc1e 	bl	8001328 <HAL_GPIO_WritePin>

			display7SEG2(count3);
 8000aec:	68f8      	ldr	r0, [r7, #12]
 8000aee:	f7ff fcf3 	bl	80004d8 <display7SEG2>
			count3--;
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	3b01      	subs	r3, #1
 8000af6:	60fb      	str	r3, [r7, #12]
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, led_off);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	461a      	mov	r2, r3
 8000afe:	2110      	movs	r1, #16
 8000b00:	4807      	ldr	r0, [pc, #28]	@ (8000b20 <exercise5+0x248>)
 8000b02:	f000 fc11 	bl	8001328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, led_on);
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	2140      	movs	r1, #64	@ 0x40
 8000b0e:	4804      	ldr	r0, [pc, #16]	@ (8000b20 <exercise5+0x248>)
 8000b10:	f000 fc0a 	bl	8001328 <HAL_GPIO_WritePin>
		}
		HAL_Delay(1000);
 8000b14:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b18:	f000 f982 	bl	8000e20 <HAL_Delay>
		if (count1 < 5){
 8000b1c:	e6e9      	b.n	80008f2 <exercise5+0x1a>
 8000b1e:	bf00      	nop
 8000b20:	40010800 	.word	0x40010800

08000b24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b28:	f000 f918 	bl	8000d5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b2c:	f000 f807 	bl	8000b3e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b30:	f000 f840 	bl	8000bb4 <MX_GPIO_Init>

//  exercise1();
//  exercise2();
//  exercise3();
//  exercise4();
  exercise5();
 8000b34:	f7ff fed0 	bl	80008d8 <exercise5>
 8000b38:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//  }
  /* USER CODE END 3 */
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b090      	sub	sp, #64	@ 0x40
 8000b42:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b44:	f107 0318 	add.w	r3, r7, #24
 8000b48:	2228      	movs	r2, #40	@ 0x28
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f000 ffe1 	bl	8001b14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b60:	2302      	movs	r3, #2
 8000b62:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b64:	2301      	movs	r3, #1
 8000b66:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b68:	2310      	movs	r3, #16
 8000b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b70:	f107 0318 	add.w	r3, r7, #24
 8000b74:	4618      	mov	r0, r3
 8000b76:	f000 fbef 	bl	8001358 <HAL_RCC_OscConfig>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000b80:	f000 f86c 	bl	8000c5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b84:	230f      	movs	r3, #15
 8000b86:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b90:	2300      	movs	r3, #0
 8000b92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b98:	1d3b      	adds	r3, r7, #4
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f000 fe5d 	bl	800185c <HAL_RCC_ClockConfig>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000ba8:	f000 f858 	bl	8000c5c <Error_Handler>
  }
}
 8000bac:	bf00      	nop
 8000bae:	3740      	adds	r7, #64	@ 0x40
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bba:	f107 0308 	add.w	r3, r7, #8
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc8:	4b21      	ldr	r3, [pc, #132]	@ (8000c50 <MX_GPIO_Init+0x9c>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	4a20      	ldr	r2, [pc, #128]	@ (8000c50 <MX_GPIO_Init+0x9c>)
 8000bce:	f043 0304 	orr.w	r3, r3, #4
 8000bd2:	6193      	str	r3, [r2, #24]
 8000bd4:	4b1e      	ldr	r3, [pc, #120]	@ (8000c50 <MX_GPIO_Init+0x9c>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	f003 0304 	and.w	r3, r3, #4
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c50 <MX_GPIO_Init+0x9c>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	4a1a      	ldr	r2, [pc, #104]	@ (8000c50 <MX_GPIO_Init+0x9c>)
 8000be6:	f043 0308 	orr.w	r3, r3, #8
 8000bea:	6193      	str	r3, [r2, #24]
 8000bec:	4b18      	ldr	r3, [pc, #96]	@ (8000c50 <MX_GPIO_Init+0x9c>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	f003 0308 	and.w	r3, r3, #8
 8000bf4:	603b      	str	r3, [r7, #0]
 8000bf6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin|LED_YELLOW_1_Pin|LED_GREEN_1_Pin|LED_RED_2_Pin
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	217e      	movs	r1, #126	@ 0x7e
 8000bfc:	4815      	ldr	r0, [pc, #84]	@ (8000c54 <MX_GPIO_Init+0xa0>)
 8000bfe:	f000 fb93 	bl	8001328 <HAL_GPIO_WritePin>
                          |LED_YELLOW_2_Pin|LED_GREEN_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_1_Pin|LED1_2_Pin|LED2_3_Pin|LED2_4_Pin
 8000c02:	2200      	movs	r2, #0
 8000c04:	f647 71fe 	movw	r1, #32766	@ 0x7ffe
 8000c08:	4813      	ldr	r0, [pc, #76]	@ (8000c58 <MX_GPIO_Init+0xa4>)
 8000c0a:	f000 fb8d 	bl	8001328 <HAL_GPIO_WritePin>
                          |LED1_4_Pin|LED1_5_Pin|LED1_6_Pin|LED1_7_Pin
                          |LED2_1_Pin|LED2_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_RED_1_Pin LED_YELLOW_1_Pin LED_GREEN_1_Pin LED_RED_2_Pin
                           LED_YELLOW_2_Pin LED_GREEN_2_Pin */
  GPIO_InitStruct.Pin = LED_RED_1_Pin|LED_YELLOW_1_Pin|LED_GREEN_1_Pin|LED_RED_2_Pin
 8000c0e:	237e      	movs	r3, #126	@ 0x7e
 8000c10:	60bb      	str	r3, [r7, #8]
                          |LED_YELLOW_2_Pin|LED_GREEN_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c12:	2301      	movs	r3, #1
 8000c14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1e:	f107 0308 	add.w	r3, r7, #8
 8000c22:	4619      	mov	r1, r3
 8000c24:	480b      	ldr	r0, [pc, #44]	@ (8000c54 <MX_GPIO_Init+0xa0>)
 8000c26:	f000 fa03 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_1_Pin LED1_2_Pin LED2_3_Pin LED2_4_Pin
                           LED2_5_Pin LED2_6_Pin LED2_7_Pin LED1_3_Pin
                           LED1_4_Pin LED1_5_Pin LED1_6_Pin LED1_7_Pin
                           LED2_1_Pin LED2_2_Pin */
  GPIO_InitStruct.Pin = LED1_1_Pin|LED1_2_Pin|LED2_3_Pin|LED2_4_Pin
 8000c2a:	f647 73fe 	movw	r3, #32766	@ 0x7ffe
 8000c2e:	60bb      	str	r3, [r7, #8]
                          |LED2_5_Pin|LED2_6_Pin|LED2_7_Pin|LED1_3_Pin
                          |LED1_4_Pin|LED1_5_Pin|LED1_6_Pin|LED1_7_Pin
                          |LED2_1_Pin|LED2_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c30:	2301      	movs	r3, #1
 8000c32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3c:	f107 0308 	add.w	r3, r7, #8
 8000c40:	4619      	mov	r1, r3
 8000c42:	4805      	ldr	r0, [pc, #20]	@ (8000c58 <MX_GPIO_Init+0xa4>)
 8000c44:	f000 f9f4 	bl	8001030 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c48:	bf00      	nop
 8000c4a:	3718      	adds	r7, #24
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40021000 	.word	0x40021000
 8000c54:	40010800 	.word	0x40010800
 8000c58:	40010c00 	.word	0x40010c00

08000c5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c60:	b672      	cpsid	i
}
 8000c62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <Error_Handler+0x8>

08000c68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca8 <HAL_MspInit+0x40>)
 8000c70:	699b      	ldr	r3, [r3, #24]
 8000c72:	4a0d      	ldr	r2, [pc, #52]	@ (8000ca8 <HAL_MspInit+0x40>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	6193      	str	r3, [r2, #24]
 8000c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca8 <HAL_MspInit+0x40>)
 8000c7c:	699b      	ldr	r3, [r3, #24]
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c86:	4b08      	ldr	r3, [pc, #32]	@ (8000ca8 <HAL_MspInit+0x40>)
 8000c88:	69db      	ldr	r3, [r3, #28]
 8000c8a:	4a07      	ldr	r2, [pc, #28]	@ (8000ca8 <HAL_MspInit+0x40>)
 8000c8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c90:	61d3      	str	r3, [r2, #28]
 8000c92:	4b05      	ldr	r3, [pc, #20]	@ (8000ca8 <HAL_MspInit+0x40>)
 8000c94:	69db      	ldr	r3, [r3, #28]
 8000c96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c9a:	603b      	str	r3, [r7, #0]
 8000c9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr
 8000ca8:	40021000 	.word	0x40021000

08000cac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cb0:	bf00      	nop
 8000cb2:	e7fd      	b.n	8000cb0 <NMI_Handler+0x4>

08000cb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb8:	bf00      	nop
 8000cba:	e7fd      	b.n	8000cb8 <HardFault_Handler+0x4>

08000cbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc0:	bf00      	nop
 8000cc2:	e7fd      	b.n	8000cc0 <MemManage_Handler+0x4>

08000cc4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cc8:	bf00      	nop
 8000cca:	e7fd      	b.n	8000cc8 <BusFault_Handler+0x4>

08000ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <UsageFault_Handler+0x4>

08000cd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr

08000ce0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bc80      	pop	{r7}
 8000cea:	4770      	bx	lr

08000cec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr

08000cf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cfc:	f000 f874 	bl	8000de8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr

08000d10 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d10:	f7ff fff8 	bl	8000d04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d14:	480b      	ldr	r0, [pc, #44]	@ (8000d44 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d16:	490c      	ldr	r1, [pc, #48]	@ (8000d48 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d18:	4a0c      	ldr	r2, [pc, #48]	@ (8000d4c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d1c:	e002      	b.n	8000d24 <LoopCopyDataInit>

08000d1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d22:	3304      	adds	r3, #4

08000d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d28:	d3f9      	bcc.n	8000d1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d2a:	4a09      	ldr	r2, [pc, #36]	@ (8000d50 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d2c:	4c09      	ldr	r4, [pc, #36]	@ (8000d54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d30:	e001      	b.n	8000d36 <LoopFillZerobss>

08000d32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d34:	3204      	adds	r2, #4

08000d36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d38:	d3fb      	bcc.n	8000d32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d3a:	f000 fef3 	bl	8001b24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d3e:	f7ff fef1 	bl	8000b24 <main>
  bx lr
 8000d42:	4770      	bx	lr
  ldr r0, =_sdata
 8000d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d48:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d4c:	08001bb0 	.word	0x08001bb0
  ldr r2, =_sbss
 8000d50:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d54:	2000002c 	.word	0x2000002c

08000d58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d58:	e7fe      	b.n	8000d58 <ADC1_2_IRQHandler>
	...

08000d5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d60:	4b08      	ldr	r3, [pc, #32]	@ (8000d84 <HAL_Init+0x28>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a07      	ldr	r2, [pc, #28]	@ (8000d84 <HAL_Init+0x28>)
 8000d66:	f043 0310 	orr.w	r3, r3, #16
 8000d6a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d6c:	2003      	movs	r0, #3
 8000d6e:	f000 f92b 	bl	8000fc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d72:	200f      	movs	r0, #15
 8000d74:	f000 f808 	bl	8000d88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d78:	f7ff ff76 	bl	8000c68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40022000 	.word	0x40022000

08000d88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d90:	4b12      	ldr	r3, [pc, #72]	@ (8000ddc <HAL_InitTick+0x54>)
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	4b12      	ldr	r3, [pc, #72]	@ (8000de0 <HAL_InitTick+0x58>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	4619      	mov	r1, r3
 8000d9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000da6:	4618      	mov	r0, r3
 8000da8:	f000 f935 	bl	8001016 <HAL_SYSTICK_Config>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	e00e      	b.n	8000dd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2b0f      	cmp	r3, #15
 8000dba:	d80a      	bhi.n	8000dd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	6879      	ldr	r1, [r7, #4]
 8000dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc4:	f000 f90b 	bl	8000fde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dc8:	4a06      	ldr	r2, [pc, #24]	@ (8000de4 <HAL_InitTick+0x5c>)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e000      	b.n	8000dd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20000000 	.word	0x20000000
 8000de0:	20000008 	.word	0x20000008
 8000de4:	20000004 	.word	0x20000004

08000de8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dec:	4b05      	ldr	r3, [pc, #20]	@ (8000e04 <HAL_IncTick+0x1c>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	461a      	mov	r2, r3
 8000df2:	4b05      	ldr	r3, [pc, #20]	@ (8000e08 <HAL_IncTick+0x20>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4413      	add	r3, r2
 8000df8:	4a03      	ldr	r2, [pc, #12]	@ (8000e08 <HAL_IncTick+0x20>)
 8000dfa:	6013      	str	r3, [r2, #0]
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bc80      	pop	{r7}
 8000e02:	4770      	bx	lr
 8000e04:	20000008 	.word	0x20000008
 8000e08:	20000028 	.word	0x20000028

08000e0c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e10:	4b02      	ldr	r3, [pc, #8]	@ (8000e1c <HAL_GetTick+0x10>)
 8000e12:	681b      	ldr	r3, [r3, #0]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr
 8000e1c:	20000028 	.word	0x20000028

08000e20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e28:	f7ff fff0 	bl	8000e0c <HAL_GetTick>
 8000e2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e38:	d005      	beq.n	8000e46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e64 <HAL_Delay+0x44>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	461a      	mov	r2, r3
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	4413      	add	r3, r2
 8000e44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e46:	bf00      	nop
 8000e48:	f7ff ffe0 	bl	8000e0c <HAL_GetTick>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	68fa      	ldr	r2, [r7, #12]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d8f7      	bhi.n	8000e48 <HAL_Delay+0x28>
  {
  }
}
 8000e58:	bf00      	nop
 8000e5a:	bf00      	nop
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000008 	.word	0x20000008

08000e68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e78:	4b0c      	ldr	r3, [pc, #48]	@ (8000eac <__NVIC_SetPriorityGrouping+0x44>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e7e:	68ba      	ldr	r2, [r7, #8]
 8000e80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e84:	4013      	ands	r3, r2
 8000e86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e9a:	4a04      	ldr	r2, [pc, #16]	@ (8000eac <__NVIC_SetPriorityGrouping+0x44>)
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	60d3      	str	r3, [r2, #12]
}
 8000ea0:	bf00      	nop
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb4:	4b04      	ldr	r3, [pc, #16]	@ (8000ec8 <__NVIC_GetPriorityGrouping+0x18>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	0a1b      	lsrs	r3, r3, #8
 8000eba:	f003 0307 	and.w	r3, r3, #7
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc80      	pop	{r7}
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	6039      	str	r1, [r7, #0]
 8000ed6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	db0a      	blt.n	8000ef6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	b2da      	uxtb	r2, r3
 8000ee4:	490c      	ldr	r1, [pc, #48]	@ (8000f18 <__NVIC_SetPriority+0x4c>)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	0112      	lsls	r2, r2, #4
 8000eec:	b2d2      	uxtb	r2, r2
 8000eee:	440b      	add	r3, r1
 8000ef0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef4:	e00a      	b.n	8000f0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	4908      	ldr	r1, [pc, #32]	@ (8000f1c <__NVIC_SetPriority+0x50>)
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	f003 030f 	and.w	r3, r3, #15
 8000f02:	3b04      	subs	r3, #4
 8000f04:	0112      	lsls	r2, r2, #4
 8000f06:	b2d2      	uxtb	r2, r2
 8000f08:	440b      	add	r3, r1
 8000f0a:	761a      	strb	r2, [r3, #24]
}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bc80      	pop	{r7}
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000e100 	.word	0xe000e100
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b089      	sub	sp, #36	@ 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	f1c3 0307 	rsb	r3, r3, #7
 8000f3a:	2b04      	cmp	r3, #4
 8000f3c:	bf28      	it	cs
 8000f3e:	2304      	movcs	r3, #4
 8000f40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	3304      	adds	r3, #4
 8000f46:	2b06      	cmp	r3, #6
 8000f48:	d902      	bls.n	8000f50 <NVIC_EncodePriority+0x30>
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	3b03      	subs	r3, #3
 8000f4e:	e000      	b.n	8000f52 <NVIC_EncodePriority+0x32>
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f54:	f04f 32ff 	mov.w	r2, #4294967295
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43da      	mvns	r2, r3
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	401a      	ands	r2, r3
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f68:	f04f 31ff 	mov.w	r1, #4294967295
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f72:	43d9      	mvns	r1, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f78:	4313      	orrs	r3, r2
         );
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3724      	adds	r7, #36	@ 0x24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr

08000f84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f94:	d301      	bcc.n	8000f9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f96:	2301      	movs	r3, #1
 8000f98:	e00f      	b.n	8000fba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc4 <SysTick_Config+0x40>)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fa2:	210f      	movs	r1, #15
 8000fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa8:	f7ff ff90 	bl	8000ecc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fac:	4b05      	ldr	r3, [pc, #20]	@ (8000fc4 <SysTick_Config+0x40>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fb2:	4b04      	ldr	r3, [pc, #16]	@ (8000fc4 <SysTick_Config+0x40>)
 8000fb4:	2207      	movs	r2, #7
 8000fb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	e000e010 	.word	0xe000e010

08000fc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f7ff ff49 	bl	8000e68 <__NVIC_SetPriorityGrouping>
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b086      	sub	sp, #24
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	60b9      	str	r1, [r7, #8]
 8000fe8:	607a      	str	r2, [r7, #4]
 8000fea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ff0:	f7ff ff5e 	bl	8000eb0 <__NVIC_GetPriorityGrouping>
 8000ff4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	68b9      	ldr	r1, [r7, #8]
 8000ffa:	6978      	ldr	r0, [r7, #20]
 8000ffc:	f7ff ff90 	bl	8000f20 <NVIC_EncodePriority>
 8001000:	4602      	mov	r2, r0
 8001002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001006:	4611      	mov	r1, r2
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ff5f 	bl	8000ecc <__NVIC_SetPriority>
}
 800100e:	bf00      	nop
 8001010:	3718      	adds	r7, #24
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f7ff ffb0 	bl	8000f84 <SysTick_Config>
 8001024:	4603      	mov	r3, r0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001030:	b480      	push	{r7}
 8001032:	b08b      	sub	sp, #44	@ 0x2c
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800103a:	2300      	movs	r3, #0
 800103c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800103e:	2300      	movs	r3, #0
 8001040:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001042:	e161      	b.n	8001308 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001044:	2201      	movs	r2, #1
 8001046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	69fa      	ldr	r2, [r7, #28]
 8001054:	4013      	ands	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	429a      	cmp	r2, r3
 800105e:	f040 8150 	bne.w	8001302 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	4a97      	ldr	r2, [pc, #604]	@ (80012c4 <HAL_GPIO_Init+0x294>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d05e      	beq.n	800112a <HAL_GPIO_Init+0xfa>
 800106c:	4a95      	ldr	r2, [pc, #596]	@ (80012c4 <HAL_GPIO_Init+0x294>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d875      	bhi.n	800115e <HAL_GPIO_Init+0x12e>
 8001072:	4a95      	ldr	r2, [pc, #596]	@ (80012c8 <HAL_GPIO_Init+0x298>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d058      	beq.n	800112a <HAL_GPIO_Init+0xfa>
 8001078:	4a93      	ldr	r2, [pc, #588]	@ (80012c8 <HAL_GPIO_Init+0x298>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d86f      	bhi.n	800115e <HAL_GPIO_Init+0x12e>
 800107e:	4a93      	ldr	r2, [pc, #588]	@ (80012cc <HAL_GPIO_Init+0x29c>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d052      	beq.n	800112a <HAL_GPIO_Init+0xfa>
 8001084:	4a91      	ldr	r2, [pc, #580]	@ (80012cc <HAL_GPIO_Init+0x29c>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d869      	bhi.n	800115e <HAL_GPIO_Init+0x12e>
 800108a:	4a91      	ldr	r2, [pc, #580]	@ (80012d0 <HAL_GPIO_Init+0x2a0>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d04c      	beq.n	800112a <HAL_GPIO_Init+0xfa>
 8001090:	4a8f      	ldr	r2, [pc, #572]	@ (80012d0 <HAL_GPIO_Init+0x2a0>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d863      	bhi.n	800115e <HAL_GPIO_Init+0x12e>
 8001096:	4a8f      	ldr	r2, [pc, #572]	@ (80012d4 <HAL_GPIO_Init+0x2a4>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d046      	beq.n	800112a <HAL_GPIO_Init+0xfa>
 800109c:	4a8d      	ldr	r2, [pc, #564]	@ (80012d4 <HAL_GPIO_Init+0x2a4>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d85d      	bhi.n	800115e <HAL_GPIO_Init+0x12e>
 80010a2:	2b12      	cmp	r3, #18
 80010a4:	d82a      	bhi.n	80010fc <HAL_GPIO_Init+0xcc>
 80010a6:	2b12      	cmp	r3, #18
 80010a8:	d859      	bhi.n	800115e <HAL_GPIO_Init+0x12e>
 80010aa:	a201      	add	r2, pc, #4	@ (adr r2, 80010b0 <HAL_GPIO_Init+0x80>)
 80010ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b0:	0800112b 	.word	0x0800112b
 80010b4:	08001105 	.word	0x08001105
 80010b8:	08001117 	.word	0x08001117
 80010bc:	08001159 	.word	0x08001159
 80010c0:	0800115f 	.word	0x0800115f
 80010c4:	0800115f 	.word	0x0800115f
 80010c8:	0800115f 	.word	0x0800115f
 80010cc:	0800115f 	.word	0x0800115f
 80010d0:	0800115f 	.word	0x0800115f
 80010d4:	0800115f 	.word	0x0800115f
 80010d8:	0800115f 	.word	0x0800115f
 80010dc:	0800115f 	.word	0x0800115f
 80010e0:	0800115f 	.word	0x0800115f
 80010e4:	0800115f 	.word	0x0800115f
 80010e8:	0800115f 	.word	0x0800115f
 80010ec:	0800115f 	.word	0x0800115f
 80010f0:	0800115f 	.word	0x0800115f
 80010f4:	0800110d 	.word	0x0800110d
 80010f8:	08001121 	.word	0x08001121
 80010fc:	4a76      	ldr	r2, [pc, #472]	@ (80012d8 <HAL_GPIO_Init+0x2a8>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d013      	beq.n	800112a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001102:	e02c      	b.n	800115e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	623b      	str	r3, [r7, #32]
          break;
 800110a:	e029      	b.n	8001160 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	3304      	adds	r3, #4
 8001112:	623b      	str	r3, [r7, #32]
          break;
 8001114:	e024      	b.n	8001160 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	3308      	adds	r3, #8
 800111c:	623b      	str	r3, [r7, #32]
          break;
 800111e:	e01f      	b.n	8001160 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	330c      	adds	r3, #12
 8001126:	623b      	str	r3, [r7, #32]
          break;
 8001128:	e01a      	b.n	8001160 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d102      	bne.n	8001138 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001132:	2304      	movs	r3, #4
 8001134:	623b      	str	r3, [r7, #32]
          break;
 8001136:	e013      	b.n	8001160 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d105      	bne.n	800114c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001140:	2308      	movs	r3, #8
 8001142:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	69fa      	ldr	r2, [r7, #28]
 8001148:	611a      	str	r2, [r3, #16]
          break;
 800114a:	e009      	b.n	8001160 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800114c:	2308      	movs	r3, #8
 800114e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	69fa      	ldr	r2, [r7, #28]
 8001154:	615a      	str	r2, [r3, #20]
          break;
 8001156:	e003      	b.n	8001160 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001158:	2300      	movs	r3, #0
 800115a:	623b      	str	r3, [r7, #32]
          break;
 800115c:	e000      	b.n	8001160 <HAL_GPIO_Init+0x130>
          break;
 800115e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	2bff      	cmp	r3, #255	@ 0xff
 8001164:	d801      	bhi.n	800116a <HAL_GPIO_Init+0x13a>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	e001      	b.n	800116e <HAL_GPIO_Init+0x13e>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	3304      	adds	r3, #4
 800116e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	2bff      	cmp	r3, #255	@ 0xff
 8001174:	d802      	bhi.n	800117c <HAL_GPIO_Init+0x14c>
 8001176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	e002      	b.n	8001182 <HAL_GPIO_Init+0x152>
 800117c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800117e:	3b08      	subs	r3, #8
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	210f      	movs	r1, #15
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	fa01 f303 	lsl.w	r3, r1, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	401a      	ands	r2, r3
 8001194:	6a39      	ldr	r1, [r7, #32]
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	fa01 f303 	lsl.w	r3, r1, r3
 800119c:	431a      	orrs	r2, r3
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f000 80a9 	beq.w	8001302 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011b0:	4b4a      	ldr	r3, [pc, #296]	@ (80012dc <HAL_GPIO_Init+0x2ac>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	4a49      	ldr	r2, [pc, #292]	@ (80012dc <HAL_GPIO_Init+0x2ac>)
 80011b6:	f043 0301 	orr.w	r3, r3, #1
 80011ba:	6193      	str	r3, [r2, #24]
 80011bc:	4b47      	ldr	r3, [pc, #284]	@ (80012dc <HAL_GPIO_Init+0x2ac>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011c8:	4a45      	ldr	r2, [pc, #276]	@ (80012e0 <HAL_GPIO_Init+0x2b0>)
 80011ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011cc:	089b      	lsrs	r3, r3, #2
 80011ce:	3302      	adds	r3, #2
 80011d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d8:	f003 0303 	and.w	r3, r3, #3
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	220f      	movs	r2, #15
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	43db      	mvns	r3, r3
 80011e6:	68fa      	ldr	r2, [r7, #12]
 80011e8:	4013      	ands	r3, r2
 80011ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4a3d      	ldr	r2, [pc, #244]	@ (80012e4 <HAL_GPIO_Init+0x2b4>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d00d      	beq.n	8001210 <HAL_GPIO_Init+0x1e0>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a3c      	ldr	r2, [pc, #240]	@ (80012e8 <HAL_GPIO_Init+0x2b8>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d007      	beq.n	800120c <HAL_GPIO_Init+0x1dc>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4a3b      	ldr	r2, [pc, #236]	@ (80012ec <HAL_GPIO_Init+0x2bc>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d101      	bne.n	8001208 <HAL_GPIO_Init+0x1d8>
 8001204:	2302      	movs	r3, #2
 8001206:	e004      	b.n	8001212 <HAL_GPIO_Init+0x1e2>
 8001208:	2303      	movs	r3, #3
 800120a:	e002      	b.n	8001212 <HAL_GPIO_Init+0x1e2>
 800120c:	2301      	movs	r3, #1
 800120e:	e000      	b.n	8001212 <HAL_GPIO_Init+0x1e2>
 8001210:	2300      	movs	r3, #0
 8001212:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001214:	f002 0203 	and.w	r2, r2, #3
 8001218:	0092      	lsls	r2, r2, #2
 800121a:	4093      	lsls	r3, r2
 800121c:	68fa      	ldr	r2, [r7, #12]
 800121e:	4313      	orrs	r3, r2
 8001220:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001222:	492f      	ldr	r1, [pc, #188]	@ (80012e0 <HAL_GPIO_Init+0x2b0>)
 8001224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001226:	089b      	lsrs	r3, r3, #2
 8001228:	3302      	adds	r3, #2
 800122a:	68fa      	ldr	r2, [r7, #12]
 800122c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d006      	beq.n	800124a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800123c:	4b2c      	ldr	r3, [pc, #176]	@ (80012f0 <HAL_GPIO_Init+0x2c0>)
 800123e:	689a      	ldr	r2, [r3, #8]
 8001240:	492b      	ldr	r1, [pc, #172]	@ (80012f0 <HAL_GPIO_Init+0x2c0>)
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	4313      	orrs	r3, r2
 8001246:	608b      	str	r3, [r1, #8]
 8001248:	e006      	b.n	8001258 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800124a:	4b29      	ldr	r3, [pc, #164]	@ (80012f0 <HAL_GPIO_Init+0x2c0>)
 800124c:	689a      	ldr	r2, [r3, #8]
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	43db      	mvns	r3, r3
 8001252:	4927      	ldr	r1, [pc, #156]	@ (80012f0 <HAL_GPIO_Init+0x2c0>)
 8001254:	4013      	ands	r3, r2
 8001256:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d006      	beq.n	8001272 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001264:	4b22      	ldr	r3, [pc, #136]	@ (80012f0 <HAL_GPIO_Init+0x2c0>)
 8001266:	68da      	ldr	r2, [r3, #12]
 8001268:	4921      	ldr	r1, [pc, #132]	@ (80012f0 <HAL_GPIO_Init+0x2c0>)
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	4313      	orrs	r3, r2
 800126e:	60cb      	str	r3, [r1, #12]
 8001270:	e006      	b.n	8001280 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001272:	4b1f      	ldr	r3, [pc, #124]	@ (80012f0 <HAL_GPIO_Init+0x2c0>)
 8001274:	68da      	ldr	r2, [r3, #12]
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	43db      	mvns	r3, r3
 800127a:	491d      	ldr	r1, [pc, #116]	@ (80012f0 <HAL_GPIO_Init+0x2c0>)
 800127c:	4013      	ands	r3, r2
 800127e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d006      	beq.n	800129a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800128c:	4b18      	ldr	r3, [pc, #96]	@ (80012f0 <HAL_GPIO_Init+0x2c0>)
 800128e:	685a      	ldr	r2, [r3, #4]
 8001290:	4917      	ldr	r1, [pc, #92]	@ (80012f0 <HAL_GPIO_Init+0x2c0>)
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	4313      	orrs	r3, r2
 8001296:	604b      	str	r3, [r1, #4]
 8001298:	e006      	b.n	80012a8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800129a:	4b15      	ldr	r3, [pc, #84]	@ (80012f0 <HAL_GPIO_Init+0x2c0>)
 800129c:	685a      	ldr	r2, [r3, #4]
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	43db      	mvns	r3, r3
 80012a2:	4913      	ldr	r1, [pc, #76]	@ (80012f0 <HAL_GPIO_Init+0x2c0>)
 80012a4:	4013      	ands	r3, r2
 80012a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d01f      	beq.n	80012f4 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012b4:	4b0e      	ldr	r3, [pc, #56]	@ (80012f0 <HAL_GPIO_Init+0x2c0>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	490d      	ldr	r1, [pc, #52]	@ (80012f0 <HAL_GPIO_Init+0x2c0>)
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	4313      	orrs	r3, r2
 80012be:	600b      	str	r3, [r1, #0]
 80012c0:	e01f      	b.n	8001302 <HAL_GPIO_Init+0x2d2>
 80012c2:	bf00      	nop
 80012c4:	10320000 	.word	0x10320000
 80012c8:	10310000 	.word	0x10310000
 80012cc:	10220000 	.word	0x10220000
 80012d0:	10210000 	.word	0x10210000
 80012d4:	10120000 	.word	0x10120000
 80012d8:	10110000 	.word	0x10110000
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40010000 	.word	0x40010000
 80012e4:	40010800 	.word	0x40010800
 80012e8:	40010c00 	.word	0x40010c00
 80012ec:	40011000 	.word	0x40011000
 80012f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001324 <HAL_GPIO_Init+0x2f4>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	43db      	mvns	r3, r3
 80012fc:	4909      	ldr	r1, [pc, #36]	@ (8001324 <HAL_GPIO_Init+0x2f4>)
 80012fe:	4013      	ands	r3, r2
 8001300:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001304:	3301      	adds	r3, #1
 8001306:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800130e:	fa22 f303 	lsr.w	r3, r2, r3
 8001312:	2b00      	cmp	r3, #0
 8001314:	f47f ae96 	bne.w	8001044 <HAL_GPIO_Init+0x14>
  }
}
 8001318:	bf00      	nop
 800131a:	bf00      	nop
 800131c:	372c      	adds	r7, #44	@ 0x2c
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr
 8001324:	40010400 	.word	0x40010400

08001328 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	460b      	mov	r3, r1
 8001332:	807b      	strh	r3, [r7, #2]
 8001334:	4613      	mov	r3, r2
 8001336:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001338:	787b      	ldrb	r3, [r7, #1]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800133e:	887a      	ldrh	r2, [r7, #2]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001344:	e003      	b.n	800134e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001346:	887b      	ldrh	r3, [r7, #2]
 8001348:	041a      	lsls	r2, r3, #16
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	611a      	str	r2, [r3, #16]
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	bc80      	pop	{r7}
 8001356:	4770      	bx	lr

08001358 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d101      	bne.n	800136a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e272      	b.n	8001850 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	2b00      	cmp	r3, #0
 8001374:	f000 8087 	beq.w	8001486 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001378:	4b92      	ldr	r3, [pc, #584]	@ (80015c4 <HAL_RCC_OscConfig+0x26c>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f003 030c 	and.w	r3, r3, #12
 8001380:	2b04      	cmp	r3, #4
 8001382:	d00c      	beq.n	800139e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001384:	4b8f      	ldr	r3, [pc, #572]	@ (80015c4 <HAL_RCC_OscConfig+0x26c>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f003 030c 	and.w	r3, r3, #12
 800138c:	2b08      	cmp	r3, #8
 800138e:	d112      	bne.n	80013b6 <HAL_RCC_OscConfig+0x5e>
 8001390:	4b8c      	ldr	r3, [pc, #560]	@ (80015c4 <HAL_RCC_OscConfig+0x26c>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001398:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800139c:	d10b      	bne.n	80013b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800139e:	4b89      	ldr	r3, [pc, #548]	@ (80015c4 <HAL_RCC_OscConfig+0x26c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d06c      	beq.n	8001484 <HAL_RCC_OscConfig+0x12c>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d168      	bne.n	8001484 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e24c      	b.n	8001850 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013be:	d106      	bne.n	80013ce <HAL_RCC_OscConfig+0x76>
 80013c0:	4b80      	ldr	r3, [pc, #512]	@ (80015c4 <HAL_RCC_OscConfig+0x26c>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a7f      	ldr	r2, [pc, #508]	@ (80015c4 <HAL_RCC_OscConfig+0x26c>)
 80013c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013ca:	6013      	str	r3, [r2, #0]
 80013cc:	e02e      	b.n	800142c <HAL_RCC_OscConfig+0xd4>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d10c      	bne.n	80013f0 <HAL_RCC_OscConfig+0x98>
 80013d6:	4b7b      	ldr	r3, [pc, #492]	@ (80015c4 <HAL_RCC_OscConfig+0x26c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a7a      	ldr	r2, [pc, #488]	@ (80015c4 <HAL_RCC_OscConfig+0x26c>)
 80013dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013e0:	6013      	str	r3, [r2, #0]
 80013e2:	4b78      	ldr	r3, [pc, #480]	@ (80015c4 <HAL_RCC_OscConfig+0x26c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a77      	ldr	r2, [pc, #476]	@ (80015c4 <HAL_RCC_OscConfig+0x26c>)
 80013e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	e01d      	b.n	800142c <HAL_RCC_OscConfig+0xd4>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013f8:	d10c      	bne.n	8001414 <HAL_RCC_OscConfig+0xbc>
 80013fa:	4b72      	ldr	r3, [pc, #456]	@ (80015c4 <HAL_RCC_OscConfig+0x26c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a71      	ldr	r2, [pc, #452]	@ (80015c4 <HAL_RCC_OscConfig+0x26c>)
 8001400:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001404:	6013      	str	r3, [r2, #0]
 8001406:	4b6f      	ldr	r3, [pc, #444]	@ (80015c4 <HAL_RCC_OscConfig+0x26c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a6e      	ldr	r2, [pc, #440]	@ (80015c4 <HAL_RCC_OscConfig+0x26c>)
 800140c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001410:	6013      	str	r3, [r2, #0]
 8001412:	e00b      	b.n	800142c <HAL_RCC_OscConfig+0xd4>
 8001414:	4b6b      	ldr	r3, [pc, #428]	@ (80015c4 <HAL_RCC_OscConfig+0x26c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a6a      	ldr	r2, [pc, #424]	@ (80015c4 <HAL_RCC_OscConfig+0x26c>)
 800141a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800141e:	6013      	str	r3, [r2, #0]
 8001420:	4b68      	ldr	r3, [pc, #416]	@ (80015c4 <HAL_RCC_OscConfig+0x26c>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a67      	ldr	r2, [pc, #412]	@ (80015c4 <HAL_RCC_OscConfig+0x26c>)
 8001426:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800142a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d013      	beq.n	800145c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001434:	f7ff fcea 	bl	8000e0c <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800143c:	f7ff fce6 	bl	8000e0c <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b64      	cmp	r3, #100	@ 0x64
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e200      	b.n	8001850 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800144e:	4b5d      	ldr	r3, [pc, #372]	@ (80015c4 <HAL_RCC_OscConfig+0x26c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d0f0      	beq.n	800143c <HAL_RCC_OscConfig+0xe4>
 800145a:	e014      	b.n	8001486 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145c:	f7ff fcd6 	bl	8000e0c <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001464:	f7ff fcd2 	bl	8000e0c <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b64      	cmp	r3, #100	@ 0x64
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e1ec      	b.n	8001850 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001476:	4b53      	ldr	r3, [pc, #332]	@ (80015c4 <HAL_RCC_OscConfig+0x26c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f0      	bne.n	8001464 <HAL_RCC_OscConfig+0x10c>
 8001482:	e000      	b.n	8001486 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001484:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d063      	beq.n	800155a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001492:	4b4c      	ldr	r3, [pc, #304]	@ (80015c4 <HAL_RCC_OscConfig+0x26c>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f003 030c 	and.w	r3, r3, #12
 800149a:	2b00      	cmp	r3, #0
 800149c:	d00b      	beq.n	80014b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800149e:	4b49      	ldr	r3, [pc, #292]	@ (80015c4 <HAL_RCC_OscConfig+0x26c>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f003 030c 	and.w	r3, r3, #12
 80014a6:	2b08      	cmp	r3, #8
 80014a8:	d11c      	bne.n	80014e4 <HAL_RCC_OscConfig+0x18c>
 80014aa:	4b46      	ldr	r3, [pc, #280]	@ (80015c4 <HAL_RCC_OscConfig+0x26c>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d116      	bne.n	80014e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014b6:	4b43      	ldr	r3, [pc, #268]	@ (80015c4 <HAL_RCC_OscConfig+0x26c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d005      	beq.n	80014ce <HAL_RCC_OscConfig+0x176>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	691b      	ldr	r3, [r3, #16]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d001      	beq.n	80014ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e1c0      	b.n	8001850 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ce:	4b3d      	ldr	r3, [pc, #244]	@ (80015c4 <HAL_RCC_OscConfig+0x26c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	695b      	ldr	r3, [r3, #20]
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	4939      	ldr	r1, [pc, #228]	@ (80015c4 <HAL_RCC_OscConfig+0x26c>)
 80014de:	4313      	orrs	r3, r2
 80014e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014e2:	e03a      	b.n	800155a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d020      	beq.n	800152e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014ec:	4b36      	ldr	r3, [pc, #216]	@ (80015c8 <HAL_RCC_OscConfig+0x270>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f2:	f7ff fc8b 	bl	8000e0c <HAL_GetTick>
 80014f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f8:	e008      	b.n	800150c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014fa:	f7ff fc87 	bl	8000e0c <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e1a1      	b.n	8001850 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800150c:	4b2d      	ldr	r3, [pc, #180]	@ (80015c4 <HAL_RCC_OscConfig+0x26c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d0f0      	beq.n	80014fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001518:	4b2a      	ldr	r3, [pc, #168]	@ (80015c4 <HAL_RCC_OscConfig+0x26c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	695b      	ldr	r3, [r3, #20]
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	4927      	ldr	r1, [pc, #156]	@ (80015c4 <HAL_RCC_OscConfig+0x26c>)
 8001528:	4313      	orrs	r3, r2
 800152a:	600b      	str	r3, [r1, #0]
 800152c:	e015      	b.n	800155a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800152e:	4b26      	ldr	r3, [pc, #152]	@ (80015c8 <HAL_RCC_OscConfig+0x270>)
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001534:	f7ff fc6a 	bl	8000e0c <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800153c:	f7ff fc66 	bl	8000e0c <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e180      	b.n	8001850 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800154e:	4b1d      	ldr	r3, [pc, #116]	@ (80015c4 <HAL_RCC_OscConfig+0x26c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1f0      	bne.n	800153c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0308 	and.w	r3, r3, #8
 8001562:	2b00      	cmp	r3, #0
 8001564:	d03a      	beq.n	80015dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d019      	beq.n	80015a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800156e:	4b17      	ldr	r3, [pc, #92]	@ (80015cc <HAL_RCC_OscConfig+0x274>)
 8001570:	2201      	movs	r2, #1
 8001572:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001574:	f7ff fc4a 	bl	8000e0c <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800157c:	f7ff fc46 	bl	8000e0c <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e160      	b.n	8001850 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800158e:	4b0d      	ldr	r3, [pc, #52]	@ (80015c4 <HAL_RCC_OscConfig+0x26c>)
 8001590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d0f0      	beq.n	800157c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800159a:	2001      	movs	r0, #1
 800159c:	f000 fa9c 	bl	8001ad8 <RCC_Delay>
 80015a0:	e01c      	b.n	80015dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015a2:	4b0a      	ldr	r3, [pc, #40]	@ (80015cc <HAL_RCC_OscConfig+0x274>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a8:	f7ff fc30 	bl	8000e0c <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ae:	e00f      	b.n	80015d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015b0:	f7ff fc2c 	bl	8000e0c <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d908      	bls.n	80015d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e146      	b.n	8001850 <HAL_RCC_OscConfig+0x4f8>
 80015c2:	bf00      	nop
 80015c4:	40021000 	.word	0x40021000
 80015c8:	42420000 	.word	0x42420000
 80015cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d0:	4b92      	ldr	r3, [pc, #584]	@ (800181c <HAL_RCC_OscConfig+0x4c4>)
 80015d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d1e9      	bne.n	80015b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0304 	and.w	r3, r3, #4
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	f000 80a6 	beq.w	8001736 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015ea:	2300      	movs	r3, #0
 80015ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ee:	4b8b      	ldr	r3, [pc, #556]	@ (800181c <HAL_RCC_OscConfig+0x4c4>)
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d10d      	bne.n	8001616 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015fa:	4b88      	ldr	r3, [pc, #544]	@ (800181c <HAL_RCC_OscConfig+0x4c4>)
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	4a87      	ldr	r2, [pc, #540]	@ (800181c <HAL_RCC_OscConfig+0x4c4>)
 8001600:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001604:	61d3      	str	r3, [r2, #28]
 8001606:	4b85      	ldr	r3, [pc, #532]	@ (800181c <HAL_RCC_OscConfig+0x4c4>)
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001612:	2301      	movs	r3, #1
 8001614:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001616:	4b82      	ldr	r3, [pc, #520]	@ (8001820 <HAL_RCC_OscConfig+0x4c8>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800161e:	2b00      	cmp	r3, #0
 8001620:	d118      	bne.n	8001654 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001622:	4b7f      	ldr	r3, [pc, #508]	@ (8001820 <HAL_RCC_OscConfig+0x4c8>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a7e      	ldr	r2, [pc, #504]	@ (8001820 <HAL_RCC_OscConfig+0x4c8>)
 8001628:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800162c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800162e:	f7ff fbed 	bl	8000e0c <HAL_GetTick>
 8001632:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001634:	e008      	b.n	8001648 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001636:	f7ff fbe9 	bl	8000e0c <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	2b64      	cmp	r3, #100	@ 0x64
 8001642:	d901      	bls.n	8001648 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e103      	b.n	8001850 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001648:	4b75      	ldr	r3, [pc, #468]	@ (8001820 <HAL_RCC_OscConfig+0x4c8>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001650:	2b00      	cmp	r3, #0
 8001652:	d0f0      	beq.n	8001636 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d106      	bne.n	800166a <HAL_RCC_OscConfig+0x312>
 800165c:	4b6f      	ldr	r3, [pc, #444]	@ (800181c <HAL_RCC_OscConfig+0x4c4>)
 800165e:	6a1b      	ldr	r3, [r3, #32]
 8001660:	4a6e      	ldr	r2, [pc, #440]	@ (800181c <HAL_RCC_OscConfig+0x4c4>)
 8001662:	f043 0301 	orr.w	r3, r3, #1
 8001666:	6213      	str	r3, [r2, #32]
 8001668:	e02d      	b.n	80016c6 <HAL_RCC_OscConfig+0x36e>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d10c      	bne.n	800168c <HAL_RCC_OscConfig+0x334>
 8001672:	4b6a      	ldr	r3, [pc, #424]	@ (800181c <HAL_RCC_OscConfig+0x4c4>)
 8001674:	6a1b      	ldr	r3, [r3, #32]
 8001676:	4a69      	ldr	r2, [pc, #420]	@ (800181c <HAL_RCC_OscConfig+0x4c4>)
 8001678:	f023 0301 	bic.w	r3, r3, #1
 800167c:	6213      	str	r3, [r2, #32]
 800167e:	4b67      	ldr	r3, [pc, #412]	@ (800181c <HAL_RCC_OscConfig+0x4c4>)
 8001680:	6a1b      	ldr	r3, [r3, #32]
 8001682:	4a66      	ldr	r2, [pc, #408]	@ (800181c <HAL_RCC_OscConfig+0x4c4>)
 8001684:	f023 0304 	bic.w	r3, r3, #4
 8001688:	6213      	str	r3, [r2, #32]
 800168a:	e01c      	b.n	80016c6 <HAL_RCC_OscConfig+0x36e>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	2b05      	cmp	r3, #5
 8001692:	d10c      	bne.n	80016ae <HAL_RCC_OscConfig+0x356>
 8001694:	4b61      	ldr	r3, [pc, #388]	@ (800181c <HAL_RCC_OscConfig+0x4c4>)
 8001696:	6a1b      	ldr	r3, [r3, #32]
 8001698:	4a60      	ldr	r2, [pc, #384]	@ (800181c <HAL_RCC_OscConfig+0x4c4>)
 800169a:	f043 0304 	orr.w	r3, r3, #4
 800169e:	6213      	str	r3, [r2, #32]
 80016a0:	4b5e      	ldr	r3, [pc, #376]	@ (800181c <HAL_RCC_OscConfig+0x4c4>)
 80016a2:	6a1b      	ldr	r3, [r3, #32]
 80016a4:	4a5d      	ldr	r2, [pc, #372]	@ (800181c <HAL_RCC_OscConfig+0x4c4>)
 80016a6:	f043 0301 	orr.w	r3, r3, #1
 80016aa:	6213      	str	r3, [r2, #32]
 80016ac:	e00b      	b.n	80016c6 <HAL_RCC_OscConfig+0x36e>
 80016ae:	4b5b      	ldr	r3, [pc, #364]	@ (800181c <HAL_RCC_OscConfig+0x4c4>)
 80016b0:	6a1b      	ldr	r3, [r3, #32]
 80016b2:	4a5a      	ldr	r2, [pc, #360]	@ (800181c <HAL_RCC_OscConfig+0x4c4>)
 80016b4:	f023 0301 	bic.w	r3, r3, #1
 80016b8:	6213      	str	r3, [r2, #32]
 80016ba:	4b58      	ldr	r3, [pc, #352]	@ (800181c <HAL_RCC_OscConfig+0x4c4>)
 80016bc:	6a1b      	ldr	r3, [r3, #32]
 80016be:	4a57      	ldr	r2, [pc, #348]	@ (800181c <HAL_RCC_OscConfig+0x4c4>)
 80016c0:	f023 0304 	bic.w	r3, r3, #4
 80016c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d015      	beq.n	80016fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ce:	f7ff fb9d 	bl	8000e0c <HAL_GetTick>
 80016d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d4:	e00a      	b.n	80016ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016d6:	f7ff fb99 	bl	8000e0c <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e0b1      	b.n	8001850 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ec:	4b4b      	ldr	r3, [pc, #300]	@ (800181c <HAL_RCC_OscConfig+0x4c4>)
 80016ee:	6a1b      	ldr	r3, [r3, #32]
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0ee      	beq.n	80016d6 <HAL_RCC_OscConfig+0x37e>
 80016f8:	e014      	b.n	8001724 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016fa:	f7ff fb87 	bl	8000e0c <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001700:	e00a      	b.n	8001718 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001702:	f7ff fb83 	bl	8000e0c <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001710:	4293      	cmp	r3, r2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e09b      	b.n	8001850 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001718:	4b40      	ldr	r3, [pc, #256]	@ (800181c <HAL_RCC_OscConfig+0x4c4>)
 800171a:	6a1b      	ldr	r3, [r3, #32]
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d1ee      	bne.n	8001702 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001724:	7dfb      	ldrb	r3, [r7, #23]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d105      	bne.n	8001736 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800172a:	4b3c      	ldr	r3, [pc, #240]	@ (800181c <HAL_RCC_OscConfig+0x4c4>)
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	4a3b      	ldr	r2, [pc, #236]	@ (800181c <HAL_RCC_OscConfig+0x4c4>)
 8001730:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001734:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	2b00      	cmp	r3, #0
 800173c:	f000 8087 	beq.w	800184e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001740:	4b36      	ldr	r3, [pc, #216]	@ (800181c <HAL_RCC_OscConfig+0x4c4>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f003 030c 	and.w	r3, r3, #12
 8001748:	2b08      	cmp	r3, #8
 800174a:	d061      	beq.n	8001810 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	69db      	ldr	r3, [r3, #28]
 8001750:	2b02      	cmp	r3, #2
 8001752:	d146      	bne.n	80017e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001754:	4b33      	ldr	r3, [pc, #204]	@ (8001824 <HAL_RCC_OscConfig+0x4cc>)
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175a:	f7ff fb57 	bl	8000e0c <HAL_GetTick>
 800175e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001760:	e008      	b.n	8001774 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001762:	f7ff fb53 	bl	8000e0c <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e06d      	b.n	8001850 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001774:	4b29      	ldr	r3, [pc, #164]	@ (800181c <HAL_RCC_OscConfig+0x4c4>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d1f0      	bne.n	8001762 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a1b      	ldr	r3, [r3, #32]
 8001784:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001788:	d108      	bne.n	800179c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800178a:	4b24      	ldr	r3, [pc, #144]	@ (800181c <HAL_RCC_OscConfig+0x4c4>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	4921      	ldr	r1, [pc, #132]	@ (800181c <HAL_RCC_OscConfig+0x4c4>)
 8001798:	4313      	orrs	r3, r2
 800179a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800179c:	4b1f      	ldr	r3, [pc, #124]	@ (800181c <HAL_RCC_OscConfig+0x4c4>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a19      	ldr	r1, [r3, #32]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ac:	430b      	orrs	r3, r1
 80017ae:	491b      	ldr	r1, [pc, #108]	@ (800181c <HAL_RCC_OscConfig+0x4c4>)
 80017b0:	4313      	orrs	r3, r2
 80017b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001824 <HAL_RCC_OscConfig+0x4cc>)
 80017b6:	2201      	movs	r2, #1
 80017b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ba:	f7ff fb27 	bl	8000e0c <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017c0:	e008      	b.n	80017d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017c2:	f7ff fb23 	bl	8000e0c <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e03d      	b.n	8001850 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017d4:	4b11      	ldr	r3, [pc, #68]	@ (800181c <HAL_RCC_OscConfig+0x4c4>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d0f0      	beq.n	80017c2 <HAL_RCC_OscConfig+0x46a>
 80017e0:	e035      	b.n	800184e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e2:	4b10      	ldr	r3, [pc, #64]	@ (8001824 <HAL_RCC_OscConfig+0x4cc>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e8:	f7ff fb10 	bl	8000e0c <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f0:	f7ff fb0c 	bl	8000e0c <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e026      	b.n	8001850 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001802:	4b06      	ldr	r3, [pc, #24]	@ (800181c <HAL_RCC_OscConfig+0x4c4>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1f0      	bne.n	80017f0 <HAL_RCC_OscConfig+0x498>
 800180e:	e01e      	b.n	800184e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	69db      	ldr	r3, [r3, #28]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d107      	bne.n	8001828 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e019      	b.n	8001850 <HAL_RCC_OscConfig+0x4f8>
 800181c:	40021000 	.word	0x40021000
 8001820:	40007000 	.word	0x40007000
 8001824:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001828:	4b0b      	ldr	r3, [pc, #44]	@ (8001858 <HAL_RCC_OscConfig+0x500>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a1b      	ldr	r3, [r3, #32]
 8001838:	429a      	cmp	r2, r3
 800183a:	d106      	bne.n	800184a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001846:	429a      	cmp	r2, r3
 8001848:	d001      	beq.n	800184e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e000      	b.n	8001850 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	3718      	adds	r7, #24
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40021000 	.word	0x40021000

0800185c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d101      	bne.n	8001870 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e0d0      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001870:	4b6a      	ldr	r3, [pc, #424]	@ (8001a1c <HAL_RCC_ClockConfig+0x1c0>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0307 	and.w	r3, r3, #7
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	429a      	cmp	r2, r3
 800187c:	d910      	bls.n	80018a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800187e:	4b67      	ldr	r3, [pc, #412]	@ (8001a1c <HAL_RCC_ClockConfig+0x1c0>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f023 0207 	bic.w	r2, r3, #7
 8001886:	4965      	ldr	r1, [pc, #404]	@ (8001a1c <HAL_RCC_ClockConfig+0x1c0>)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	4313      	orrs	r3, r2
 800188c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800188e:	4b63      	ldr	r3, [pc, #396]	@ (8001a1c <HAL_RCC_ClockConfig+0x1c0>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	683a      	ldr	r2, [r7, #0]
 8001898:	429a      	cmp	r2, r3
 800189a:	d001      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e0b8      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d020      	beq.n	80018ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0304 	and.w	r3, r3, #4
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d005      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018b8:	4b59      	ldr	r3, [pc, #356]	@ (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	4a58      	ldr	r2, [pc, #352]	@ (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 80018be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80018c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0308 	and.w	r3, r3, #8
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d005      	beq.n	80018dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018d0:	4b53      	ldr	r3, [pc, #332]	@ (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	4a52      	ldr	r2, [pc, #328]	@ (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 80018d6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80018da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018dc:	4b50      	ldr	r3, [pc, #320]	@ (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	494d      	ldr	r1, [pc, #308]	@ (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d040      	beq.n	800197c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d107      	bne.n	8001912 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001902:	4b47      	ldr	r3, [pc, #284]	@ (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d115      	bne.n	800193a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e07f      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2b02      	cmp	r3, #2
 8001918:	d107      	bne.n	800192a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800191a:	4b41      	ldr	r3, [pc, #260]	@ (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d109      	bne.n	800193a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e073      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800192a:	4b3d      	ldr	r3, [pc, #244]	@ (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e06b      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800193a:	4b39      	ldr	r3, [pc, #228]	@ (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f023 0203 	bic.w	r2, r3, #3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	4936      	ldr	r1, [pc, #216]	@ (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 8001948:	4313      	orrs	r3, r2
 800194a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800194c:	f7ff fa5e 	bl	8000e0c <HAL_GetTick>
 8001950:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001952:	e00a      	b.n	800196a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001954:	f7ff fa5a 	bl	8000e0c <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001962:	4293      	cmp	r3, r2
 8001964:	d901      	bls.n	800196a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e053      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800196a:	4b2d      	ldr	r3, [pc, #180]	@ (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f003 020c 	and.w	r2, r3, #12
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	429a      	cmp	r2, r3
 800197a:	d1eb      	bne.n	8001954 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800197c:	4b27      	ldr	r3, [pc, #156]	@ (8001a1c <HAL_RCC_ClockConfig+0x1c0>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	429a      	cmp	r2, r3
 8001988:	d210      	bcs.n	80019ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800198a:	4b24      	ldr	r3, [pc, #144]	@ (8001a1c <HAL_RCC_ClockConfig+0x1c0>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f023 0207 	bic.w	r2, r3, #7
 8001992:	4922      	ldr	r1, [pc, #136]	@ (8001a1c <HAL_RCC_ClockConfig+0x1c0>)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	4313      	orrs	r3, r2
 8001998:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800199a:	4b20      	ldr	r3, [pc, #128]	@ (8001a1c <HAL_RCC_ClockConfig+0x1c0>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d001      	beq.n	80019ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e032      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0304 	and.w	r3, r3, #4
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d008      	beq.n	80019ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019b8:	4b19      	ldr	r3, [pc, #100]	@ (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	4916      	ldr	r1, [pc, #88]	@ (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0308 	and.w	r3, r3, #8
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d009      	beq.n	80019ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019d6:	4b12      	ldr	r3, [pc, #72]	@ (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	490e      	ldr	r1, [pc, #56]	@ (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019ea:	f000 f821 	bl	8001a30 <HAL_RCC_GetSysClockFreq>
 80019ee:	4602      	mov	r2, r0
 80019f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	091b      	lsrs	r3, r3, #4
 80019f6:	f003 030f 	and.w	r3, r3, #15
 80019fa:	490a      	ldr	r1, [pc, #40]	@ (8001a24 <HAL_RCC_ClockConfig+0x1c8>)
 80019fc:	5ccb      	ldrb	r3, [r1, r3]
 80019fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001a02:	4a09      	ldr	r2, [pc, #36]	@ (8001a28 <HAL_RCC_ClockConfig+0x1cc>)
 8001a04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a06:	4b09      	ldr	r3, [pc, #36]	@ (8001a2c <HAL_RCC_ClockConfig+0x1d0>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff f9bc 	bl	8000d88 <HAL_InitTick>

  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40022000 	.word	0x40022000
 8001a20:	40021000 	.word	0x40021000
 8001a24:	08001b84 	.word	0x08001b84
 8001a28:	20000000 	.word	0x20000000
 8001a2c:	20000004 	.word	0x20000004

08001a30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b087      	sub	sp, #28
 8001a34:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
 8001a42:	2300      	movs	r3, #0
 8001a44:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a46:	2300      	movs	r3, #0
 8001a48:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a4a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ac4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f003 030c 	and.w	r3, r3, #12
 8001a56:	2b04      	cmp	r3, #4
 8001a58:	d002      	beq.n	8001a60 <HAL_RCC_GetSysClockFreq+0x30>
 8001a5a:	2b08      	cmp	r3, #8
 8001a5c:	d003      	beq.n	8001a66 <HAL_RCC_GetSysClockFreq+0x36>
 8001a5e:	e027      	b.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a60:	4b19      	ldr	r3, [pc, #100]	@ (8001ac8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a62:	613b      	str	r3, [r7, #16]
      break;
 8001a64:	e027      	b.n	8001ab6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	0c9b      	lsrs	r3, r3, #18
 8001a6a:	f003 030f 	and.w	r3, r3, #15
 8001a6e:	4a17      	ldr	r2, [pc, #92]	@ (8001acc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a70:	5cd3      	ldrb	r3, [r2, r3]
 8001a72:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d010      	beq.n	8001aa0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a7e:	4b11      	ldr	r3, [pc, #68]	@ (8001ac4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	0c5b      	lsrs	r3, r3, #17
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	4a11      	ldr	r2, [pc, #68]	@ (8001ad0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a8a:	5cd3      	ldrb	r3, [r2, r3]
 8001a8c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a0d      	ldr	r2, [pc, #52]	@ (8001ac8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a92:	fb03 f202 	mul.w	r2, r3, r2
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a9c:	617b      	str	r3, [r7, #20]
 8001a9e:	e004      	b.n	8001aaa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	4a0c      	ldr	r2, [pc, #48]	@ (8001ad4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001aa4:	fb02 f303 	mul.w	r3, r2, r3
 8001aa8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	613b      	str	r3, [r7, #16]
      break;
 8001aae:	e002      	b.n	8001ab6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ab0:	4b05      	ldr	r3, [pc, #20]	@ (8001ac8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ab2:	613b      	str	r3, [r7, #16]
      break;
 8001ab4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ab6:	693b      	ldr	r3, [r7, #16]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	371c      	adds	r7, #28
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bc80      	pop	{r7}
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	007a1200 	.word	0x007a1200
 8001acc:	08001b94 	.word	0x08001b94
 8001ad0:	08001ba4 	.word	0x08001ba4
 8001ad4:	003d0900 	.word	0x003d0900

08001ad8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8001b0c <RCC_Delay+0x34>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a0a      	ldr	r2, [pc, #40]	@ (8001b10 <RCC_Delay+0x38>)
 8001ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aea:	0a5b      	lsrs	r3, r3, #9
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	fb02 f303 	mul.w	r3, r2, r3
 8001af2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001af4:	bf00      	nop
  }
  while (Delay --);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	1e5a      	subs	r2, r3, #1
 8001afa:	60fa      	str	r2, [r7, #12]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d1f9      	bne.n	8001af4 <RCC_Delay+0x1c>
}
 8001b00:	bf00      	nop
 8001b02:	bf00      	nop
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr
 8001b0c:	20000000 	.word	0x20000000
 8001b10:	10624dd3 	.word	0x10624dd3

08001b14 <memset>:
 8001b14:	4603      	mov	r3, r0
 8001b16:	4402      	add	r2, r0
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d100      	bne.n	8001b1e <memset+0xa>
 8001b1c:	4770      	bx	lr
 8001b1e:	f803 1b01 	strb.w	r1, [r3], #1
 8001b22:	e7f9      	b.n	8001b18 <memset+0x4>

08001b24 <__libc_init_array>:
 8001b24:	b570      	push	{r4, r5, r6, lr}
 8001b26:	2600      	movs	r6, #0
 8001b28:	4d0c      	ldr	r5, [pc, #48]	@ (8001b5c <__libc_init_array+0x38>)
 8001b2a:	4c0d      	ldr	r4, [pc, #52]	@ (8001b60 <__libc_init_array+0x3c>)
 8001b2c:	1b64      	subs	r4, r4, r5
 8001b2e:	10a4      	asrs	r4, r4, #2
 8001b30:	42a6      	cmp	r6, r4
 8001b32:	d109      	bne.n	8001b48 <__libc_init_array+0x24>
 8001b34:	f000 f81a 	bl	8001b6c <_init>
 8001b38:	2600      	movs	r6, #0
 8001b3a:	4d0a      	ldr	r5, [pc, #40]	@ (8001b64 <__libc_init_array+0x40>)
 8001b3c:	4c0a      	ldr	r4, [pc, #40]	@ (8001b68 <__libc_init_array+0x44>)
 8001b3e:	1b64      	subs	r4, r4, r5
 8001b40:	10a4      	asrs	r4, r4, #2
 8001b42:	42a6      	cmp	r6, r4
 8001b44:	d105      	bne.n	8001b52 <__libc_init_array+0x2e>
 8001b46:	bd70      	pop	{r4, r5, r6, pc}
 8001b48:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b4c:	4798      	blx	r3
 8001b4e:	3601      	adds	r6, #1
 8001b50:	e7ee      	b.n	8001b30 <__libc_init_array+0xc>
 8001b52:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b56:	4798      	blx	r3
 8001b58:	3601      	adds	r6, #1
 8001b5a:	e7f2      	b.n	8001b42 <__libc_init_array+0x1e>
 8001b5c:	08001ba8 	.word	0x08001ba8
 8001b60:	08001ba8 	.word	0x08001ba8
 8001b64:	08001ba8 	.word	0x08001ba8
 8001b68:	08001bac 	.word	0x08001bac

08001b6c <_init>:
 8001b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b6e:	bf00      	nop
 8001b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b72:	bc08      	pop	{r3}
 8001b74:	469e      	mov	lr, r3
 8001b76:	4770      	bx	lr

08001b78 <_fini>:
 8001b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b7a:	bf00      	nop
 8001b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b7e:	bc08      	pop	{r3}
 8001b80:	469e      	mov	lr, r3
 8001b82:	4770      	bx	lr
