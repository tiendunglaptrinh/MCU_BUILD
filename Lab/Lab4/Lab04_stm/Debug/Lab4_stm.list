
Lab4_stm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f2c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003038  08003038  00004038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800305c  0800305c  00005078  2**0
                  CONTENTS
  4 .ARM          00000000  0800305c  0800305c  00005078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800305c  0800305c  00005078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800305c  0800305c  0000405c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003060  08003060  00004060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08003064  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e4  20000078  080030dc  00005078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000045c  080030dc  0000545c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008ddc  00000000  00000000  000050a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e3a  00000000  00000000  0000de7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b48  00000000  00000000  0000fcb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000878  00000000  00000000  00010800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001729d  00000000  00000000  00011078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db0a  00000000  00000000  00028315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082862  00000000  00000000  00035e1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b8681  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b40  00000000  00000000  000b86c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000bb204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08003020 	.word	0x08003020

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08003020 	.word	0x08003020

0800014c <isButton1Pressed>:

int TimerForKeyPress1 = 200;
int TimerForKeyPress2 = 200;
int TimerForKeyPress3 = 200;

int isButton1Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if (button_flag1 == 1){
 8000150:	4b06      	ldr	r3, [pc, #24]	@ (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
		button_flag1 = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	@ (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	else {
		return 0;
 8000162:	2300      	movs	r3, #0
	}
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	20000094 	.word	0x20000094

08000170 <isButton2Pressed>:

int isButton2Pressed(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if (button_flag2 == 1){
 8000174:	4b06      	ldr	r3, [pc, #24]	@ (8000190 <isButton2Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton2Pressed+0x16>
		button_flag2 = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	@ (8000190 <isButton2Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton2Pressed+0x18>
	}
	else{
		return 0;
 8000186:	2300      	movs	r3, #0
	}
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	20000098 	.word	0x20000098

08000194 <isButton3Pressed>:

int isButton3Pressed(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if (button_flag3 == 1){
 8000198:	4b06      	ldr	r3, [pc, #24]	@ (80001b4 <isButton3Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton3Pressed+0x16>
		button_flag3 = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <isButton3Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton3Pressed+0x18>
	}
	else{
		return 0;
 80001aa:	2300      	movs	r3, #0
	}
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	2000009c 	.word	0x2000009c

080001b8 <subKeyProcess1>:
void subKeyProcess1(){
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
//	TODO
	button_flag1 = 1;
 80001bc:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <subKeyProcess1+0x14>)
 80001be:	2201      	movs	r2, #1
 80001c0:	601a      	str	r2, [r3, #0]
}
 80001c2:	bf00      	nop
 80001c4:	46bd      	mov	sp, r7
 80001c6:	bc80      	pop	{r7}
 80001c8:	4770      	bx	lr
 80001ca:	bf00      	nop
 80001cc:	20000094 	.word	0x20000094

080001d0 <subKeyProcess2>:

void subKeyProcess2(){
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0
	button_flag2 = 1;
 80001d4:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <subKeyProcess2+0x14>)
 80001d6:	2201      	movs	r2, #1
 80001d8:	601a      	str	r2, [r3, #0]
}
 80001da:	bf00      	nop
 80001dc:	46bd      	mov	sp, r7
 80001de:	bc80      	pop	{r7}
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop
 80001e4:	20000098 	.word	0x20000098

080001e8 <subKeyProcess3>:

void subKeyProcess3(){
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	button_flag3 = 1;
 80001ec:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <subKeyProcess3+0x14>)
 80001ee:	2201      	movs	r2, #1
 80001f0:	601a      	str	r2, [r3, #0]
}
 80001f2:	bf00      	nop
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	2000009c 	.word	0x2000009c

08000200 <getKeyInput1>:

void getKeyInput1(){
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	KeyReg0_1 = KeyReg1_1;
 8000204:	4b17      	ldr	r3, [pc, #92]	@ (8000264 <getKeyInput1+0x64>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a17      	ldr	r2, [pc, #92]	@ (8000268 <getKeyInput1+0x68>)
 800020a:	6013      	str	r3, [r2, #0]
	KeyReg1_1 = KeyReg2_1;
 800020c:	4b17      	ldr	r3, [pc, #92]	@ (800026c <getKeyInput1+0x6c>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a14      	ldr	r2, [pc, #80]	@ (8000264 <getKeyInput1+0x64>)
 8000212:	6013      	str	r3, [r2, #0]
	KeyReg2_1 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 8000214:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000218:	4815      	ldr	r0, [pc, #84]	@ (8000270 <getKeyInput1+0x70>)
 800021a:	f001 ff39 	bl	8002090 <HAL_GPIO_ReadPin>
 800021e:	4603      	mov	r3, r0
 8000220:	461a      	mov	r2, r3
 8000222:	4b12      	ldr	r3, [pc, #72]	@ (800026c <getKeyInput1+0x6c>)
 8000224:	601a      	str	r2, [r3, #0]
	if ((KeyReg0_1 == KeyReg1_1) && (KeyReg1_1 == KeyReg2_1)){
 8000226:	4b10      	ldr	r3, [pc, #64]	@ (8000268 <getKeyInput1+0x68>)
 8000228:	681a      	ldr	r2, [r3, #0]
 800022a:	4b0e      	ldr	r3, [pc, #56]	@ (8000264 <getKeyInput1+0x64>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	429a      	cmp	r2, r3
 8000230:	d115      	bne.n	800025e <getKeyInput1+0x5e>
 8000232:	4b0c      	ldr	r3, [pc, #48]	@ (8000264 <getKeyInput1+0x64>)
 8000234:	681a      	ldr	r2, [r3, #0]
 8000236:	4b0d      	ldr	r3, [pc, #52]	@ (800026c <getKeyInput1+0x6c>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	429a      	cmp	r2, r3
 800023c:	d10f      	bne.n	800025e <getKeyInput1+0x5e>
		if (KeyReg3_1 != KeyReg2_1){
 800023e:	4b0d      	ldr	r3, [pc, #52]	@ (8000274 <getKeyInput1+0x74>)
 8000240:	681a      	ldr	r2, [r3, #0]
 8000242:	4b0a      	ldr	r3, [pc, #40]	@ (800026c <getKeyInput1+0x6c>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	429a      	cmp	r2, r3
 8000248:	d009      	beq.n	800025e <getKeyInput1+0x5e>
			KeyReg3_1 = KeyReg2_1;
 800024a:	4b08      	ldr	r3, [pc, #32]	@ (800026c <getKeyInput1+0x6c>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	4a09      	ldr	r2, [pc, #36]	@ (8000274 <getKeyInput1+0x74>)
 8000250:	6013      	str	r3, [r2, #0]
			if (KeyReg2_1 == PRESSED_STATE){
 8000252:	4b06      	ldr	r3, [pc, #24]	@ (800026c <getKeyInput1+0x6c>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d101      	bne.n	800025e <getKeyInput1+0x5e>
				subKeyProcess1();
 800025a:	f7ff ffad 	bl	80001b8 <subKeyProcess1>
			}
		}
	}
}
 800025e:	bf00      	nop
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	20000004 	.word	0x20000004
 8000268:	20000000 	.word	0x20000000
 800026c:	20000008 	.word	0x20000008
 8000270:	40010c00 	.word	0x40010c00
 8000274:	20000024 	.word	0x20000024

08000278 <getKeyInput2>:

void getKeyInput2(){
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	KeyReg0_2 = KeyReg1_2;
 800027c:	4b17      	ldr	r3, [pc, #92]	@ (80002dc <getKeyInput2+0x64>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a17      	ldr	r2, [pc, #92]	@ (80002e0 <getKeyInput2+0x68>)
 8000282:	6013      	str	r3, [r2, #0]
	KeyReg1_2 = KeyReg2_2;
 8000284:	4b17      	ldr	r3, [pc, #92]	@ (80002e4 <getKeyInput2+0x6c>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a14      	ldr	r2, [pc, #80]	@ (80002dc <getKeyInput2+0x64>)
 800028a:	6013      	str	r3, [r2, #0]
	KeyReg2_2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 800028c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000290:	4815      	ldr	r0, [pc, #84]	@ (80002e8 <getKeyInput2+0x70>)
 8000292:	f001 fefd 	bl	8002090 <HAL_GPIO_ReadPin>
 8000296:	4603      	mov	r3, r0
 8000298:	461a      	mov	r2, r3
 800029a:	4b12      	ldr	r3, [pc, #72]	@ (80002e4 <getKeyInput2+0x6c>)
 800029c:	601a      	str	r2, [r3, #0]
	if ((KeyReg0_2 == KeyReg1_2) && (KeyReg1_2 == KeyReg2_2)){
 800029e:	4b10      	ldr	r3, [pc, #64]	@ (80002e0 <getKeyInput2+0x68>)
 80002a0:	681a      	ldr	r2, [r3, #0]
 80002a2:	4b0e      	ldr	r3, [pc, #56]	@ (80002dc <getKeyInput2+0x64>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	429a      	cmp	r2, r3
 80002a8:	d115      	bne.n	80002d6 <getKeyInput2+0x5e>
 80002aa:	4b0c      	ldr	r3, [pc, #48]	@ (80002dc <getKeyInput2+0x64>)
 80002ac:	681a      	ldr	r2, [r3, #0]
 80002ae:	4b0d      	ldr	r3, [pc, #52]	@ (80002e4 <getKeyInput2+0x6c>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d10f      	bne.n	80002d6 <getKeyInput2+0x5e>
		if (KeyReg3_2 != KeyReg2_2){
 80002b6:	4b0d      	ldr	r3, [pc, #52]	@ (80002ec <getKeyInput2+0x74>)
 80002b8:	681a      	ldr	r2, [r3, #0]
 80002ba:	4b0a      	ldr	r3, [pc, #40]	@ (80002e4 <getKeyInput2+0x6c>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	429a      	cmp	r2, r3
 80002c0:	d009      	beq.n	80002d6 <getKeyInput2+0x5e>
			KeyReg3_2 = KeyReg2_2;
 80002c2:	4b08      	ldr	r3, [pc, #32]	@ (80002e4 <getKeyInput2+0x6c>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	4a09      	ldr	r2, [pc, #36]	@ (80002ec <getKeyInput2+0x74>)
 80002c8:	6013      	str	r3, [r2, #0]
			if (KeyReg2_2 == PRESSED_STATE){
 80002ca:	4b06      	ldr	r3, [pc, #24]	@ (80002e4 <getKeyInput2+0x6c>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d101      	bne.n	80002d6 <getKeyInput2+0x5e>
				subKeyProcess2();
 80002d2:	f7ff ff7d 	bl	80001d0 <subKeyProcess2>
			}
		}
	}
}
 80002d6:	bf00      	nop
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	20000010 	.word	0x20000010
 80002e0:	2000000c 	.word	0x2000000c
 80002e4:	20000014 	.word	0x20000014
 80002e8:	40010c00 	.word	0x40010c00
 80002ec:	20000028 	.word	0x20000028

080002f0 <getKeyInput3>:

void getKeyInput3(){
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
	KeyReg0_3 = KeyReg1_3;
 80002f4:	4b17      	ldr	r3, [pc, #92]	@ (8000354 <getKeyInput3+0x64>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a17      	ldr	r2, [pc, #92]	@ (8000358 <getKeyInput3+0x68>)
 80002fa:	6013      	str	r3, [r2, #0]
	KeyReg1_3 = KeyReg2_3;
 80002fc:	4b17      	ldr	r3, [pc, #92]	@ (800035c <getKeyInput3+0x6c>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a14      	ldr	r2, [pc, #80]	@ (8000354 <getKeyInput3+0x64>)
 8000302:	6013      	str	r3, [r2, #0]
	KeyReg2_3 = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 8000304:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000308:	4815      	ldr	r0, [pc, #84]	@ (8000360 <getKeyInput3+0x70>)
 800030a:	f001 fec1 	bl	8002090 <HAL_GPIO_ReadPin>
 800030e:	4603      	mov	r3, r0
 8000310:	461a      	mov	r2, r3
 8000312:	4b12      	ldr	r3, [pc, #72]	@ (800035c <getKeyInput3+0x6c>)
 8000314:	601a      	str	r2, [r3, #0]
	if ((KeyReg0_3 == KeyReg1_3) && (KeyReg1_3 == KeyReg2_3)){
 8000316:	4b10      	ldr	r3, [pc, #64]	@ (8000358 <getKeyInput3+0x68>)
 8000318:	681a      	ldr	r2, [r3, #0]
 800031a:	4b0e      	ldr	r3, [pc, #56]	@ (8000354 <getKeyInput3+0x64>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	429a      	cmp	r2, r3
 8000320:	d115      	bne.n	800034e <getKeyInput3+0x5e>
 8000322:	4b0c      	ldr	r3, [pc, #48]	@ (8000354 <getKeyInput3+0x64>)
 8000324:	681a      	ldr	r2, [r3, #0]
 8000326:	4b0d      	ldr	r3, [pc, #52]	@ (800035c <getKeyInput3+0x6c>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	429a      	cmp	r2, r3
 800032c:	d10f      	bne.n	800034e <getKeyInput3+0x5e>
		if (KeyReg3_3 != KeyReg2_3){
 800032e:	4b0d      	ldr	r3, [pc, #52]	@ (8000364 <getKeyInput3+0x74>)
 8000330:	681a      	ldr	r2, [r3, #0]
 8000332:	4b0a      	ldr	r3, [pc, #40]	@ (800035c <getKeyInput3+0x6c>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	429a      	cmp	r2, r3
 8000338:	d009      	beq.n	800034e <getKeyInput3+0x5e>
			KeyReg3_3 = KeyReg2_3;
 800033a:	4b08      	ldr	r3, [pc, #32]	@ (800035c <getKeyInput3+0x6c>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	4a09      	ldr	r2, [pc, #36]	@ (8000364 <getKeyInput3+0x74>)
 8000340:	6013      	str	r3, [r2, #0]
			if (KeyReg2_3 == PRESSED_STATE){
 8000342:	4b06      	ldr	r3, [pc, #24]	@ (800035c <getKeyInput3+0x6c>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	2b00      	cmp	r3, #0
 8000348:	d101      	bne.n	800034e <getKeyInput3+0x5e>
				subKeyProcess3();
 800034a:	f7ff ff4d 	bl	80001e8 <subKeyProcess3>
			}
		}
	}
}
 800034e:	bf00      	nop
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	2000001c 	.word	0x2000001c
 8000358:	20000018 	.word	0x20000018
 800035c:	20000020 	.word	0x20000020
 8000360:	40010c00 	.word	0x40010c00
 8000364:	2000002c 	.word	0x2000002c

08000368 <SCH_Init>:
unsigned char tail;

sTask SCH_tasks_G[SCH_MAX_TASKS];
uint8_t queue[SCH_MAX_TASKS];

void SCH_Init(void) {
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
	unsigned char i;
	for (i = 0; i < SCH_MAX_TASKS; i++) {
 800036e:	2300      	movs	r3, #0
 8000370:	71fb      	strb	r3, [r7, #7]
 8000372:	e006      	b.n	8000382 <SCH_Init+0x1a>
		SCH_Delete_Task(i);
 8000374:	79fb      	ldrb	r3, [r7, #7]
 8000376:	4618      	mov	r0, r3
 8000378:	f000 f8f8 	bl	800056c <SCH_Delete_Task>
	for (i = 0; i < SCH_MAX_TASKS; i++) {
 800037c:	79fb      	ldrb	r3, [r7, #7]
 800037e:	3301      	adds	r3, #1
 8000380:	71fb      	strb	r3, [r7, #7]
 8000382:	79fb      	ldrb	r3, [r7, #7]
 8000384:	2b27      	cmp	r3, #39	@ 0x27
 8000386:	d9f5      	bls.n	8000374 <SCH_Init+0xc>
	}
	// Reset the global error variable
	// − SCH_Delete_Task() will generate an error code,
	// (because the task array is empty)
	Error_code_G = 0;
 8000388:	4b06      	ldr	r3, [pc, #24]	@ (80003a4 <SCH_Init+0x3c>)
 800038a:	2200      	movs	r2, #0
 800038c:	701a      	strb	r2, [r3, #0]
	head = tail = 0;
 800038e:	4b06      	ldr	r3, [pc, #24]	@ (80003a8 <SCH_Init+0x40>)
 8000390:	2200      	movs	r2, #0
 8000392:	701a      	strb	r2, [r3, #0]
 8000394:	4b04      	ldr	r3, [pc, #16]	@ (80003a8 <SCH_Init+0x40>)
 8000396:	781a      	ldrb	r2, [r3, #0]
 8000398:	4b04      	ldr	r3, [pc, #16]	@ (80003ac <SCH_Init+0x44>)
 800039a:	701a      	strb	r2, [r3, #0]
	//Timer_init();
	//Watchdog_init();
}
 800039c:	bf00      	nop
 800039e:	3708      	adds	r7, #8
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	200000a0 	.word	0x200000a0
 80003a8:	200000a2 	.word	0x200000a2
 80003ac:	200000a1 	.word	0x200000a1

080003b0 <SCH_Update>:

void SCH_Update(void) {
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
	unsigned char Index;
	//NOTE: calculations are in *TICKS* (not milliseconds)
	for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 80003b6:	2300      	movs	r3, #0
 80003b8:	71fb      	strb	r3, [r7, #7]
 80003ba:	e074      	b.n	80004a6 <SCH_Update+0xf6>
		// Check if there is a task at this location
		if (SCH_tasks_G[Index].pTask) {
 80003bc:	79fa      	ldrb	r2, [r7, #7]
 80003be:	493e      	ldr	r1, [pc, #248]	@ (80004b8 <SCH_Update+0x108>)
 80003c0:	4613      	mov	r3, r2
 80003c2:	009b      	lsls	r3, r3, #2
 80003c4:	4413      	add	r3, r2
 80003c6:	009b      	lsls	r3, r3, #2
 80003c8:	440b      	add	r3, r1
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d067      	beq.n	80004a0 <SCH_Update+0xf0>
			if (SCH_tasks_G[Index].Delay == 0) {
 80003d0:	79fa      	ldrb	r2, [r7, #7]
 80003d2:	4939      	ldr	r1, [pc, #228]	@ (80004b8 <SCH_Update+0x108>)
 80003d4:	4613      	mov	r3, r2
 80003d6:	009b      	lsls	r3, r3, #2
 80003d8:	4413      	add	r3, r2
 80003da:	009b      	lsls	r3, r3, #2
 80003dc:	440b      	add	r3, r1
 80003de:	3304      	adds	r3, #4
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d149      	bne.n	800047a <SCH_Update+0xca>
				// The task is due to run
				// Inc. the ’RunMe’ flag
				SCH_tasks_G[Index].RunMe += 1;
 80003e6:	79fa      	ldrb	r2, [r7, #7]
 80003e8:	4933      	ldr	r1, [pc, #204]	@ (80004b8 <SCH_Update+0x108>)
 80003ea:	4613      	mov	r3, r2
 80003ec:	009b      	lsls	r3, r3, #2
 80003ee:	4413      	add	r3, r2
 80003f0:	009b      	lsls	r3, r3, #2
 80003f2:	440b      	add	r3, r1
 80003f4:	330c      	adds	r3, #12
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	79fa      	ldrb	r2, [r7, #7]
 80003fa:	3301      	adds	r3, #1
 80003fc:	b2d8      	uxtb	r0, r3
 80003fe:	492e      	ldr	r1, [pc, #184]	@ (80004b8 <SCH_Update+0x108>)
 8000400:	4613      	mov	r3, r2
 8000402:	009b      	lsls	r3, r3, #2
 8000404:	4413      	add	r3, r2
 8000406:	009b      	lsls	r3, r3, #2
 8000408:	440b      	add	r3, r1
 800040a:	330c      	adds	r3, #12
 800040c:	4602      	mov	r2, r0
 800040e:	701a      	strb	r2, [r3, #0]
				queue[tail] = Index;
 8000410:	4b2a      	ldr	r3, [pc, #168]	@ (80004bc <SCH_Update+0x10c>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	4619      	mov	r1, r3
 8000416:	4a2a      	ldr	r2, [pc, #168]	@ (80004c0 <SCH_Update+0x110>)
 8000418:	79fb      	ldrb	r3, [r7, #7]
 800041a:	5453      	strb	r3, [r2, r1]
				tail = (tail + 1) % SCH_MAX_TASKS;
 800041c:	4b27      	ldr	r3, [pc, #156]	@ (80004bc <SCH_Update+0x10c>)
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	1c5a      	adds	r2, r3, #1
 8000422:	4b28      	ldr	r3, [pc, #160]	@ (80004c4 <SCH_Update+0x114>)
 8000424:	fb83 1302 	smull	r1, r3, r3, r2
 8000428:	1119      	asrs	r1, r3, #4
 800042a:	17d3      	asrs	r3, r2, #31
 800042c:	1ac9      	subs	r1, r1, r3
 800042e:	460b      	mov	r3, r1
 8000430:	009b      	lsls	r3, r3, #2
 8000432:	440b      	add	r3, r1
 8000434:	00db      	lsls	r3, r3, #3
 8000436:	1ad1      	subs	r1, r2, r3
 8000438:	b2ca      	uxtb	r2, r1
 800043a:	4b20      	ldr	r3, [pc, #128]	@ (80004bc <SCH_Update+0x10c>)
 800043c:	701a      	strb	r2, [r3, #0]
				if (SCH_tasks_G[Index].Period) {
 800043e:	79fa      	ldrb	r2, [r7, #7]
 8000440:	491d      	ldr	r1, [pc, #116]	@ (80004b8 <SCH_Update+0x108>)
 8000442:	4613      	mov	r3, r2
 8000444:	009b      	lsls	r3, r3, #2
 8000446:	4413      	add	r3, r2
 8000448:	009b      	lsls	r3, r3, #2
 800044a:	440b      	add	r3, r1
 800044c:	3308      	adds	r3, #8
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d025      	beq.n	80004a0 <SCH_Update+0xf0>
					// Schedule periodic tasks to run again
					SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
 8000454:	79f9      	ldrb	r1, [r7, #7]
 8000456:	79fa      	ldrb	r2, [r7, #7]
 8000458:	4817      	ldr	r0, [pc, #92]	@ (80004b8 <SCH_Update+0x108>)
 800045a:	460b      	mov	r3, r1
 800045c:	009b      	lsls	r3, r3, #2
 800045e:	440b      	add	r3, r1
 8000460:	009b      	lsls	r3, r3, #2
 8000462:	4403      	add	r3, r0
 8000464:	3308      	adds	r3, #8
 8000466:	6819      	ldr	r1, [r3, #0]
 8000468:	4813      	ldr	r0, [pc, #76]	@ (80004b8 <SCH_Update+0x108>)
 800046a:	4613      	mov	r3, r2
 800046c:	009b      	lsls	r3, r3, #2
 800046e:	4413      	add	r3, r2
 8000470:	009b      	lsls	r3, r3, #2
 8000472:	4403      	add	r3, r0
 8000474:	3304      	adds	r3, #4
 8000476:	6019      	str	r1, [r3, #0]
 8000478:	e012      	b.n	80004a0 <SCH_Update+0xf0>
				}
			} else {
				// Not yet ready to run: just decrement the delay
				SCH_tasks_G[Index].Delay -= 1;
 800047a:	79fa      	ldrb	r2, [r7, #7]
 800047c:	490e      	ldr	r1, [pc, #56]	@ (80004b8 <SCH_Update+0x108>)
 800047e:	4613      	mov	r3, r2
 8000480:	009b      	lsls	r3, r3, #2
 8000482:	4413      	add	r3, r2
 8000484:	009b      	lsls	r3, r3, #2
 8000486:	440b      	add	r3, r1
 8000488:	3304      	adds	r3, #4
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	79fa      	ldrb	r2, [r7, #7]
 800048e:	1e59      	subs	r1, r3, #1
 8000490:	4809      	ldr	r0, [pc, #36]	@ (80004b8 <SCH_Update+0x108>)
 8000492:	4613      	mov	r3, r2
 8000494:	009b      	lsls	r3, r3, #2
 8000496:	4413      	add	r3, r2
 8000498:	009b      	lsls	r3, r3, #2
 800049a:	4403      	add	r3, r0
 800049c:	3304      	adds	r3, #4
 800049e:	6019      	str	r1, [r3, #0]
	for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 80004a0:	79fb      	ldrb	r3, [r7, #7]
 80004a2:	3301      	adds	r3, #1
 80004a4:	71fb      	strb	r3, [r7, #7]
 80004a6:	79fb      	ldrb	r3, [r7, #7]
 80004a8:	2b27      	cmp	r3, #39	@ 0x27
 80004aa:	d987      	bls.n	80003bc <SCH_Update+0xc>
			}
		}
	}
}
 80004ac:	bf00      	nop
 80004ae:	bf00      	nop
 80004b0:	370c      	adds	r7, #12
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr
 80004b8:	200000a4 	.word	0x200000a4
 80004bc:	200000a2 	.word	0x200000a2
 80004c0:	200003c4 	.word	0x200003c4
 80004c4:	66666667 	.word	0x66666667

080004c8 <SCH_Add_Task>:

unsigned char SCH_Add_Task(void (*pFunction)(), unsigned int DELAY,
		unsigned int PERIOD) {
 80004c8:	b480      	push	{r7}
 80004ca:	b087      	sub	sp, #28
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	607a      	str	r2, [r7, #4]
	unsigned char Index = 0;
 80004d4:	2300      	movs	r3, #0
 80004d6:	75fb      	strb	r3, [r7, #23]
	// First find a gap in the array (if there is one)
	while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS)) {
 80004d8:	e002      	b.n	80004e0 <SCH_Add_Task+0x18>
		Index++;
 80004da:	7dfb      	ldrb	r3, [r7, #23]
 80004dc:	3301      	adds	r3, #1
 80004de:	75fb      	strb	r3, [r7, #23]
	while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS)) {
 80004e0:	7dfa      	ldrb	r2, [r7, #23]
 80004e2:	4920      	ldr	r1, [pc, #128]	@ (8000564 <SCH_Add_Task+0x9c>)
 80004e4:	4613      	mov	r3, r2
 80004e6:	009b      	lsls	r3, r3, #2
 80004e8:	4413      	add	r3, r2
 80004ea:	009b      	lsls	r3, r3, #2
 80004ec:	440b      	add	r3, r1
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d002      	beq.n	80004fa <SCH_Add_Task+0x32>
 80004f4:	7dfb      	ldrb	r3, [r7, #23]
 80004f6:	2b27      	cmp	r3, #39	@ 0x27
 80004f8:	d9ef      	bls.n	80004da <SCH_Add_Task+0x12>
	}
	// Have we reached the end of the list?
	if (Index == SCH_MAX_TASKS) {
 80004fa:	7dfb      	ldrb	r3, [r7, #23]
 80004fc:	2b28      	cmp	r3, #40	@ 0x28
 80004fe:	d104      	bne.n	800050a <SCH_Add_Task+0x42>
		// Task list is full
		// Set the global error variable
		Error_code_G = ERROR_SCH_TOO_MANY_TASKS;
 8000500:	4b19      	ldr	r3, [pc, #100]	@ (8000568 <SCH_Add_Task+0xa0>)
 8000502:	2201      	movs	r2, #1
 8000504:	701a      	strb	r2, [r3, #0]
		// Also return an error code
		return SCH_MAX_TASKS;
 8000506:	2328      	movs	r3, #40	@ 0x28
 8000508:	e027      	b.n	800055a <SCH_Add_Task+0x92>
	}
	// If we’re here, there is a space in the task array
	SCH_tasks_G[Index].pTask = pFunction;
 800050a:	7dfa      	ldrb	r2, [r7, #23]
 800050c:	4915      	ldr	r1, [pc, #84]	@ (8000564 <SCH_Add_Task+0x9c>)
 800050e:	4613      	mov	r3, r2
 8000510:	009b      	lsls	r3, r3, #2
 8000512:	4413      	add	r3, r2
 8000514:	009b      	lsls	r3, r3, #2
 8000516:	440b      	add	r3, r1
 8000518:	68fa      	ldr	r2, [r7, #12]
 800051a:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[Index].Delay = DELAY;
 800051c:	7dfa      	ldrb	r2, [r7, #23]
 800051e:	4911      	ldr	r1, [pc, #68]	@ (8000564 <SCH_Add_Task+0x9c>)
 8000520:	4613      	mov	r3, r2
 8000522:	009b      	lsls	r3, r3, #2
 8000524:	4413      	add	r3, r2
 8000526:	009b      	lsls	r3, r3, #2
 8000528:	440b      	add	r3, r1
 800052a:	3304      	adds	r3, #4
 800052c:	68ba      	ldr	r2, [r7, #8]
 800052e:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[Index].Period = PERIOD;
 8000530:	7dfa      	ldrb	r2, [r7, #23]
 8000532:	490c      	ldr	r1, [pc, #48]	@ (8000564 <SCH_Add_Task+0x9c>)
 8000534:	4613      	mov	r3, r2
 8000536:	009b      	lsls	r3, r3, #2
 8000538:	4413      	add	r3, r2
 800053a:	009b      	lsls	r3, r3, #2
 800053c:	440b      	add	r3, r1
 800053e:	3308      	adds	r3, #8
 8000540:	687a      	ldr	r2, [r7, #4]
 8000542:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[Index].RunMe = 0;
 8000544:	7dfa      	ldrb	r2, [r7, #23]
 8000546:	4907      	ldr	r1, [pc, #28]	@ (8000564 <SCH_Add_Task+0x9c>)
 8000548:	4613      	mov	r3, r2
 800054a:	009b      	lsls	r3, r3, #2
 800054c:	4413      	add	r3, r2
 800054e:	009b      	lsls	r3, r3, #2
 8000550:	440b      	add	r3, r1
 8000552:	330c      	adds	r3, #12
 8000554:	2200      	movs	r2, #0
 8000556:	701a      	strb	r2, [r3, #0]
	// return position of task (to allow later deletion)
	return Index;
 8000558:	7dfb      	ldrb	r3, [r7, #23]
}
 800055a:	4618      	mov	r0, r3
 800055c:	371c      	adds	r7, #28
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr
 8000564:	200000a4 	.word	0x200000a4
 8000568:	200000a0 	.word	0x200000a0

0800056c <SCH_Delete_Task>:
	//SCH_Report_Status();
	// The scheduler enters idle mode at this point
	SCH_Go_To_Sleep();
}

unsigned char SCH_Delete_Task(const unsigned char TASK_INDEX) {
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	71fb      	strb	r3, [r7, #7]
	unsigned char Return_code;
	if (SCH_tasks_G[TASK_INDEX].pTask == 0) {
 8000576:	79fa      	ldrb	r2, [r7, #7]
 8000578:	491e      	ldr	r1, [pc, #120]	@ (80005f4 <SCH_Delete_Task+0x88>)
 800057a:	4613      	mov	r3, r2
 800057c:	009b      	lsls	r3, r3, #2
 800057e:	4413      	add	r3, r2
 8000580:	009b      	lsls	r3, r3, #2
 8000582:	440b      	add	r3, r1
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d105      	bne.n	8000596 <SCH_Delete_Task+0x2a>
		// No task at this location ...
		//
		// Set the global error variable
		Error_code_G = ERROR_SCH_CANNOT_DELETE_TASK;
 800058a:	4b1b      	ldr	r3, [pc, #108]	@ (80005f8 <SCH_Delete_Task+0x8c>)
 800058c:	2202      	movs	r2, #2
 800058e:	701a      	strb	r2, [r3, #0]
		// ... also return an error code
		Return_code = RETURN_ERROR;
 8000590:	2303      	movs	r3, #3
 8000592:	73fb      	strb	r3, [r7, #15]
 8000594:	e001      	b.n	800059a <SCH_Delete_Task+0x2e>
	} else {
		Return_code = RETURN_NORMAL;
 8000596:	2304      	movs	r3, #4
 8000598:	73fb      	strb	r3, [r7, #15]
	}
	SCH_tasks_G[TASK_INDEX].pTask = 0x0000;
 800059a:	79fa      	ldrb	r2, [r7, #7]
 800059c:	4915      	ldr	r1, [pc, #84]	@ (80005f4 <SCH_Delete_Task+0x88>)
 800059e:	4613      	mov	r3, r2
 80005a0:	009b      	lsls	r3, r3, #2
 80005a2:	4413      	add	r3, r2
 80005a4:	009b      	lsls	r3, r3, #2
 80005a6:	440b      	add	r3, r1
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].Delay = 0;
 80005ac:	79fa      	ldrb	r2, [r7, #7]
 80005ae:	4911      	ldr	r1, [pc, #68]	@ (80005f4 <SCH_Delete_Task+0x88>)
 80005b0:	4613      	mov	r3, r2
 80005b2:	009b      	lsls	r3, r3, #2
 80005b4:	4413      	add	r3, r2
 80005b6:	009b      	lsls	r3, r3, #2
 80005b8:	440b      	add	r3, r1
 80005ba:	3304      	adds	r3, #4
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].Period = 0;
 80005c0:	79fa      	ldrb	r2, [r7, #7]
 80005c2:	490c      	ldr	r1, [pc, #48]	@ (80005f4 <SCH_Delete_Task+0x88>)
 80005c4:	4613      	mov	r3, r2
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	4413      	add	r3, r2
 80005ca:	009b      	lsls	r3, r3, #2
 80005cc:	440b      	add	r3, r1
 80005ce:	3308      	adds	r3, #8
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].RunMe = 0;
 80005d4:	79fa      	ldrb	r2, [r7, #7]
 80005d6:	4907      	ldr	r1, [pc, #28]	@ (80005f4 <SCH_Delete_Task+0x88>)
 80005d8:	4613      	mov	r3, r2
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	4413      	add	r3, r2
 80005de:	009b      	lsls	r3, r3, #2
 80005e0:	440b      	add	r3, r1
 80005e2:	330c      	adds	r3, #12
 80005e4:	2200      	movs	r2, #0
 80005e6:	701a      	strb	r2, [r3, #0]
	return Return_code; // return status
 80005e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	3714      	adds	r7, #20
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bc80      	pop	{r7}
 80005f2:	4770      	bx	lr
 80005f4:	200000a4 	.word	0x200000a4
 80005f8:	200000a0 	.word	0x200000a0

080005fc <reset7Led>:
#include "blinky_4led.h"
#include "seven_segment.h"

int clockBuffer[4] = {1, 0, 0, 3};

void reset7Led(){
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
	SEG1_status = 0;
 8000600:	4b07      	ldr	r3, [pc, #28]	@ (8000620 <reset7Led+0x24>)
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
	SEG2_status = 1;
 8000606:	4b07      	ldr	r3, [pc, #28]	@ (8000624 <reset7Led+0x28>)
 8000608:	2201      	movs	r2, #1
 800060a:	601a      	str	r2, [r3, #0]
	SEG3_status = 1;
 800060c:	4b06      	ldr	r3, [pc, #24]	@ (8000628 <reset7Led+0x2c>)
 800060e:	2201      	movs	r2, #1
 8000610:	601a      	str	r2, [r3, #0]
	SEG4_status = 1;
 8000612:	4b06      	ldr	r3, [pc, #24]	@ (800062c <reset7Led+0x30>)
 8000614:	2201      	movs	r2, #1
 8000616:	601a      	str	r2, [r3, #0]
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	bc80      	pop	{r7}
 800061e:	4770      	bx	lr
 8000620:	200003f4 	.word	0x200003f4
 8000624:	20000060 	.word	0x20000060
 8000628:	20000064 	.word	0x20000064
 800062c:	20000068 	.word	0x20000068

08000630 <blinky4led>:

void blinky4led() {
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
    if (timer2_flag == 1) {
 8000634:	4b34      	ldr	r3, [pc, #208]	@ (8000708 <blinky4led+0xd8>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2b01      	cmp	r3, #1
 800063a:	d163      	bne.n	8000704 <blinky4led+0xd4>
    	setTimer2(duration_blinky);
 800063c:	4b33      	ldr	r3, [pc, #204]	@ (800070c <blinky4led+0xdc>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4618      	mov	r0, r3
 8000642:	f001 f917 	bl	8001874 <setTimer2>

        HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SEG1_status);
 8000646:	4b32      	ldr	r3, [pc, #200]	@ (8000710 <blinky4led+0xe0>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	b2db      	uxtb	r3, r3
 800064c:	461a      	mov	r2, r3
 800064e:	2102      	movs	r1, #2
 8000650:	4830      	ldr	r0, [pc, #192]	@ (8000714 <blinky4led+0xe4>)
 8000652:	f001 fd34 	bl	80020be <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SEG2_status);
 8000656:	4b30      	ldr	r3, [pc, #192]	@ (8000718 <blinky4led+0xe8>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	b2db      	uxtb	r3, r3
 800065c:	461a      	mov	r2, r3
 800065e:	2104      	movs	r1, #4
 8000660:	482c      	ldr	r0, [pc, #176]	@ (8000714 <blinky4led+0xe4>)
 8000662:	f001 fd2c 	bl	80020be <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SEG3_status);
 8000666:	4b2d      	ldr	r3, [pc, #180]	@ (800071c <blinky4led+0xec>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	b2db      	uxtb	r3, r3
 800066c:	461a      	mov	r2, r3
 800066e:	2108      	movs	r1, #8
 8000670:	4828      	ldr	r0, [pc, #160]	@ (8000714 <blinky4led+0xe4>)
 8000672:	f001 fd24 	bl	80020be <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SEG4_status);
 8000676:	4b2a      	ldr	r3, [pc, #168]	@ (8000720 <blinky4led+0xf0>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	b2db      	uxtb	r3, r3
 800067c:	461a      	mov	r2, r3
 800067e:	2110      	movs	r1, #16
 8000680:	4824      	ldr	r0, [pc, #144]	@ (8000714 <blinky4led+0xe4>)
 8000682:	f001 fd1c 	bl	80020be <HAL_GPIO_WritePin>

        if (SEG1_status == 0) {
 8000686:	4b22      	ldr	r3, [pc, #136]	@ (8000710 <blinky4led+0xe0>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d10b      	bne.n	80006a6 <blinky4led+0x76>
            display7SEG(clockBuffer[0]);
 800068e:	4b25      	ldr	r3, [pc, #148]	@ (8000724 <blinky4led+0xf4>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4618      	mov	r0, r3
 8000694:	f000 ff14 	bl	80014c0 <display7SEG>
            SEG1_status = 1;
 8000698:	4b1d      	ldr	r3, [pc, #116]	@ (8000710 <blinky4led+0xe0>)
 800069a:	2201      	movs	r2, #1
 800069c:	601a      	str	r2, [r3, #0]
            SEG2_status = 0;
 800069e:	4b1e      	ldr	r3, [pc, #120]	@ (8000718 <blinky4led+0xe8>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
            display7SEG(clockBuffer[3]);
            SEG4_status = 1;
            SEG1_status = 0;
        }
    }
}
 80006a4:	e02e      	b.n	8000704 <blinky4led+0xd4>
        } else if (SEG2_status == 0) {
 80006a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000718 <blinky4led+0xe8>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d10b      	bne.n	80006c6 <blinky4led+0x96>
            display7SEG(clockBuffer[1]);
 80006ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000724 <blinky4led+0xf4>)
 80006b0:	685b      	ldr	r3, [r3, #4]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 ff04 	bl	80014c0 <display7SEG>
            SEG2_status = 1;
 80006b8:	4b17      	ldr	r3, [pc, #92]	@ (8000718 <blinky4led+0xe8>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	601a      	str	r2, [r3, #0]
            SEG3_status = 0;
 80006be:	4b17      	ldr	r3, [pc, #92]	@ (800071c <blinky4led+0xec>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
}
 80006c4:	e01e      	b.n	8000704 <blinky4led+0xd4>
        } else if (SEG3_status == 0) {
 80006c6:	4b15      	ldr	r3, [pc, #84]	@ (800071c <blinky4led+0xec>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d10b      	bne.n	80006e6 <blinky4led+0xb6>
            display7SEG(clockBuffer[2]);
 80006ce:	4b15      	ldr	r3, [pc, #84]	@ (8000724 <blinky4led+0xf4>)
 80006d0:	689b      	ldr	r3, [r3, #8]
 80006d2:	4618      	mov	r0, r3
 80006d4:	f000 fef4 	bl	80014c0 <display7SEG>
            SEG3_status = 1;
 80006d8:	4b10      	ldr	r3, [pc, #64]	@ (800071c <blinky4led+0xec>)
 80006da:	2201      	movs	r2, #1
 80006dc:	601a      	str	r2, [r3, #0]
            SEG4_status = 0;
 80006de:	4b10      	ldr	r3, [pc, #64]	@ (8000720 <blinky4led+0xf0>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
}
 80006e4:	e00e      	b.n	8000704 <blinky4led+0xd4>
        } else if (SEG4_status == 0) {
 80006e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000720 <blinky4led+0xf0>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d10a      	bne.n	8000704 <blinky4led+0xd4>
            display7SEG(clockBuffer[3]);
 80006ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000724 <blinky4led+0xf4>)
 80006f0:	68db      	ldr	r3, [r3, #12]
 80006f2:	4618      	mov	r0, r3
 80006f4:	f000 fee4 	bl	80014c0 <display7SEG>
            SEG4_status = 1;
 80006f8:	4b09      	ldr	r3, [pc, #36]	@ (8000720 <blinky4led+0xf0>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	601a      	str	r2, [r3, #0]
            SEG1_status = 0;
 80006fe:	4b04      	ldr	r3, [pc, #16]	@ (8000710 <blinky4led+0xe0>)
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	2000044c 	.word	0x2000044c
 800070c:	2000005c 	.word	0x2000005c
 8000710:	200003f4 	.word	0x200003f4
 8000714:	40010800 	.word	0x40010800
 8000718:	20000060 	.word	0x20000060
 800071c:	20000064 	.word	0x20000064
 8000720:	20000068 	.word	0x20000068
 8000724:	20000030 	.word	0x20000030

08000728 <updateDisplayClock>:

void updateDisplayClock(int duration1, int duration2){
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	6039      	str	r1, [r7, #0]
	clockBuffer[0] = (duration1 / 100) / 10;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	4a1e      	ldr	r2, [pc, #120]	@ (80007b0 <updateDisplayClock+0x88>)
 8000736:	fb82 1203 	smull	r1, r2, r2, r3
 800073a:	1192      	asrs	r2, r2, #6
 800073c:	17db      	asrs	r3, r3, #31
 800073e:	1ad3      	subs	r3, r2, r3
 8000740:	4a1c      	ldr	r2, [pc, #112]	@ (80007b4 <updateDisplayClock+0x8c>)
 8000742:	6013      	str	r3, [r2, #0]
	clockBuffer[1] = (duration1 / 100) % 10;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	4a1c      	ldr	r2, [pc, #112]	@ (80007b8 <updateDisplayClock+0x90>)
 8000748:	fb82 1203 	smull	r1, r2, r2, r3
 800074c:	1152      	asrs	r2, r2, #5
 800074e:	17db      	asrs	r3, r3, #31
 8000750:	1ad1      	subs	r1, r2, r3
 8000752:	4b1a      	ldr	r3, [pc, #104]	@ (80007bc <updateDisplayClock+0x94>)
 8000754:	fb83 2301 	smull	r2, r3, r3, r1
 8000758:	109a      	asrs	r2, r3, #2
 800075a:	17cb      	asrs	r3, r1, #31
 800075c:	1ad2      	subs	r2, r2, r3
 800075e:	4613      	mov	r3, r2
 8000760:	009b      	lsls	r3, r3, #2
 8000762:	4413      	add	r3, r2
 8000764:	005b      	lsls	r3, r3, #1
 8000766:	1aca      	subs	r2, r1, r3
 8000768:	4b12      	ldr	r3, [pc, #72]	@ (80007b4 <updateDisplayClock+0x8c>)
 800076a:	605a      	str	r2, [r3, #4]
	clockBuffer[2] = (duration2 / 100) / 10;
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	4a10      	ldr	r2, [pc, #64]	@ (80007b0 <updateDisplayClock+0x88>)
 8000770:	fb82 1203 	smull	r1, r2, r2, r3
 8000774:	1192      	asrs	r2, r2, #6
 8000776:	17db      	asrs	r3, r3, #31
 8000778:	1ad3      	subs	r3, r2, r3
 800077a:	4a0e      	ldr	r2, [pc, #56]	@ (80007b4 <updateDisplayClock+0x8c>)
 800077c:	6093      	str	r3, [r2, #8]
	clockBuffer[3] = (duration2 / 100) % 10;
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	4a0d      	ldr	r2, [pc, #52]	@ (80007b8 <updateDisplayClock+0x90>)
 8000782:	fb82 1203 	smull	r1, r2, r2, r3
 8000786:	1152      	asrs	r2, r2, #5
 8000788:	17db      	asrs	r3, r3, #31
 800078a:	1ad1      	subs	r1, r2, r3
 800078c:	4b0b      	ldr	r3, [pc, #44]	@ (80007bc <updateDisplayClock+0x94>)
 800078e:	fb83 2301 	smull	r2, r3, r3, r1
 8000792:	109a      	asrs	r2, r3, #2
 8000794:	17cb      	asrs	r3, r1, #31
 8000796:	1ad2      	subs	r2, r2, r3
 8000798:	4613      	mov	r3, r2
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	4413      	add	r3, r2
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	1aca      	subs	r2, r1, r3
 80007a2:	4b04      	ldr	r3, [pc, #16]	@ (80007b4 <updateDisplayClock+0x8c>)
 80007a4:	60da      	str	r2, [r3, #12]
}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bc80      	pop	{r7}
 80007ae:	4770      	bx	lr
 80007b0:	10624dd3 	.word	0x10624dd3
 80007b4:	20000030 	.word	0x20000030
 80007b8:	51eb851f 	.word	0x51eb851f
 80007bc:	66666667 	.word	0x66666667

080007c0 <updateManualClock>:

void updateManualClock(int duration){
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	clockBuffer[0] = 0;
 80007c8:	4b13      	ldr	r3, [pc, #76]	@ (8000818 <updateManualClock+0x58>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
	clockBuffer[1] = 0;
 80007ce:	4b12      	ldr	r3, [pc, #72]	@ (8000818 <updateManualClock+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	605a      	str	r2, [r3, #4]
	clockBuffer[2] = (duration / 100) / 10;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	4a11      	ldr	r2, [pc, #68]	@ (800081c <updateManualClock+0x5c>)
 80007d8:	fb82 1203 	smull	r1, r2, r2, r3
 80007dc:	1192      	asrs	r2, r2, #6
 80007de:	17db      	asrs	r3, r3, #31
 80007e0:	1ad3      	subs	r3, r2, r3
 80007e2:	4a0d      	ldr	r2, [pc, #52]	@ (8000818 <updateManualClock+0x58>)
 80007e4:	6093      	str	r3, [r2, #8]
	clockBuffer[3] = (duration / 100) % 10;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000820 <updateManualClock+0x60>)
 80007ea:	fb82 1203 	smull	r1, r2, r2, r3
 80007ee:	1152      	asrs	r2, r2, #5
 80007f0:	17db      	asrs	r3, r3, #31
 80007f2:	1ad1      	subs	r1, r2, r3
 80007f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000824 <updateManualClock+0x64>)
 80007f6:	fb83 2301 	smull	r2, r3, r3, r1
 80007fa:	109a      	asrs	r2, r3, #2
 80007fc:	17cb      	asrs	r3, r1, #31
 80007fe:	1ad2      	subs	r2, r2, r3
 8000800:	4613      	mov	r3, r2
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	4413      	add	r3, r2
 8000806:	005b      	lsls	r3, r3, #1
 8000808:	1aca      	subs	r2, r1, r3
 800080a:	4b03      	ldr	r3, [pc, #12]	@ (8000818 <updateManualClock+0x58>)
 800080c:	60da      	str	r2, [r3, #12]
}
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr
 8000818:	20000030 	.word	0x20000030
 800081c:	10624dd3 	.word	0x10624dd3
 8000820:	51eb851f 	.word	0x51eb851f
 8000824:	66666667 	.word	0x66666667

08000828 <realTimeClock>:

void realTimeClock(){
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
	if (clock_status == CLOCK_DISPLAY){
 800082c:	4b16      	ldr	r3, [pc, #88]	@ (8000888 <realTimeClock+0x60>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b15      	cmp	r3, #21
 8000832:	d126      	bne.n	8000882 <realTimeClock+0x5a>
		if (timer3_flag == 1){
 8000834:	4b15      	ldr	r3, [pc, #84]	@ (800088c <realTimeClock+0x64>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2b01      	cmp	r3, #1
 800083a:	d114      	bne.n	8000866 <realTimeClock+0x3e>
			setTimer3(100);
 800083c:	2064      	movs	r0, #100	@ 0x64
 800083e:	f001 f82d 	bl	800189c <setTimer3>
			duration_road1 -= 100;
 8000842:	4b13      	ldr	r3, [pc, #76]	@ (8000890 <realTimeClock+0x68>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	3b64      	subs	r3, #100	@ 0x64
 8000848:	4a11      	ldr	r2, [pc, #68]	@ (8000890 <realTimeClock+0x68>)
 800084a:	6013      	str	r3, [r2, #0]
			duration_road2 -= 100;
 800084c:	4b11      	ldr	r3, [pc, #68]	@ (8000894 <realTimeClock+0x6c>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	3b64      	subs	r3, #100	@ 0x64
 8000852:	4a10      	ldr	r2, [pc, #64]	@ (8000894 <realTimeClock+0x6c>)
 8000854:	6013      	str	r3, [r2, #0]
			updateDisplayClock(duration_road1, duration_road2);
 8000856:	4b0e      	ldr	r3, [pc, #56]	@ (8000890 <realTimeClock+0x68>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a0e      	ldr	r2, [pc, #56]	@ (8000894 <realTimeClock+0x6c>)
 800085c:	6812      	ldr	r2, [r2, #0]
 800085e:	4611      	mov	r1, r2
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff ff61 	bl	8000728 <updateDisplayClock>
		}
		if (duration_road1 < 0) duration_road1 = 0;
 8000866:	4b0a      	ldr	r3, [pc, #40]	@ (8000890 <realTimeClock+0x68>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	2b00      	cmp	r3, #0
 800086c:	da02      	bge.n	8000874 <realTimeClock+0x4c>
 800086e:	4b08      	ldr	r3, [pc, #32]	@ (8000890 <realTimeClock+0x68>)
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
		if (duration_road2 < 0) duration_road2 = 0;
 8000874:	4b07      	ldr	r3, [pc, #28]	@ (8000894 <realTimeClock+0x6c>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	da02      	bge.n	8000882 <realTimeClock+0x5a>
 800087c:	4b05      	ldr	r3, [pc, #20]	@ (8000894 <realTimeClock+0x6c>)
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
	}
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000040 	.word	0x20000040
 800088c:	20000454 	.word	0x20000454
 8000890:	20000044 	.word	0x20000044
 8000894:	20000048 	.word	0x20000048

08000898 <displayClock>:

void displayClock(){
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
	switch (clock_status) {
 800089c:	4b11      	ldr	r3, [pc, #68]	@ (80008e4 <displayClock+0x4c>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2b16      	cmp	r3, #22
 80008a2:	d013      	beq.n	80008cc <displayClock+0x34>
 80008a4:	2b16      	cmp	r3, #22
 80008a6:	dc17      	bgt.n	80008d8 <displayClock+0x40>
 80008a8:	2b14      	cmp	r3, #20
 80008aa:	d002      	beq.n	80008b2 <displayClock+0x1a>
 80008ac:	2b15      	cmp	r3, #21
 80008ae:	d004      	beq.n	80008ba <displayClock+0x22>
		case CLOCK_MAN:
			// TODO
			updateManualClock(duration_current);
			break;
		default:
			break;
 80008b0:	e012      	b.n	80008d8 <displayClock+0x40>
			clock_status = CLOCK_DISPLAY;
 80008b2:	4b0c      	ldr	r3, [pc, #48]	@ (80008e4 <displayClock+0x4c>)
 80008b4:	2215      	movs	r2, #21
 80008b6:	601a      	str	r2, [r3, #0]
			break;
 80008b8:	e00f      	b.n	80008da <displayClock+0x42>
			updateDisplayClock(duration_road1, duration_road2);
 80008ba:	4b0b      	ldr	r3, [pc, #44]	@ (80008e8 <displayClock+0x50>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a0b      	ldr	r2, [pc, #44]	@ (80008ec <displayClock+0x54>)
 80008c0:	6812      	ldr	r2, [r2, #0]
 80008c2:	4611      	mov	r1, r2
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff ff2f 	bl	8000728 <updateDisplayClock>
			break;
 80008ca:	e006      	b.n	80008da <displayClock+0x42>
			updateManualClock(duration_current);
 80008cc:	4b08      	ldr	r3, [pc, #32]	@ (80008f0 <displayClock+0x58>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff ff75 	bl	80007c0 <updateManualClock>
			break;
 80008d6:	e000      	b.n	80008da <displayClock+0x42>
			break;
 80008d8:	bf00      	nop
	}
	blinky4led();
 80008da:	f7ff fea9 	bl	8000630 <blinky4led>
}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000040 	.word	0x20000040
 80008e8:	20000044 	.word	0x20000044
 80008ec:	20000048 	.word	0x20000048
 80008f0:	2000004c 	.word	0x2000004c

080008f4 <fsm_automatic_run>:
#include "fsm_automatic.h"
#include "led.h"
#include "global.h"
#include "blinky_4led.h"

void fsm_automatic_run() {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
	switch (status) {
 80008f8:	4b99      	ldr	r3, [pc, #612]	@ (8000b60 <fsm_automatic_run+0x26c>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	3b01      	subs	r3, #1
 80008fe:	2b04      	cmp	r3, #4
 8000900:	f200 8122 	bhi.w	8000b48 <fsm_automatic_run+0x254>
 8000904:	a201      	add	r2, pc, #4	@ (adr r2, 800090c <fsm_automatic_run+0x18>)
 8000906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800090a:	bf00      	nop
 800090c:	08000921 	.word	0x08000921
 8000910:	08000951 	.word	0x08000951
 8000914:	080009d7 	.word	0x080009d7
 8000918:	08000a5b 	.word	0x08000a5b
 800091c:	08000ad9 	.word	0x08000ad9
	case INIT:
		red1_off();
 8000920:	f000 fc10 	bl	8001144 <red1_off>
		yellow1_off();
 8000924:	f000 fc3e 	bl	80011a4 <yellow1_off>
		green1_off();
 8000928:	f000 fc6c 	bl	8001204 <green1_off>
		red2_off();
 800092c:	f000 fc22 	bl	8001174 <red2_off>
		yellow2_off();
 8000930:	f000 fc50 	bl	80011d4 <yellow2_off>
		green2_off();
 8000934:	f000 fc7e 	bl	8001234 <green2_off>

		status = AUTO_RED_GREEN;
 8000938:	4b89      	ldr	r3, [pc, #548]	@ (8000b60 <fsm_automatic_run+0x26c>)
 800093a:	2202      	movs	r2, #2
 800093c:	601a      	str	r2, [r3, #0]
		clock_status = CLOCK_DISPLAY;
 800093e:	4b89      	ldr	r3, [pc, #548]	@ (8000b64 <fsm_automatic_run+0x270>)
 8000940:	2215      	movs	r2, #21
 8000942:	601a      	str	r2, [r3, #0]
		setTimer1(duration_green);
 8000944:	4b88      	ldr	r3, [pc, #544]	@ (8000b68 <fsm_automatic_run+0x274>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4618      	mov	r0, r3
 800094a:	f000 ff7f 	bl	800184c <setTimer1>
		break;
 800094e:	e104      	b.n	8000b5a <fsm_automatic_run+0x266>
	case AUTO_RED_GREEN:
		red1_on();
 8000950:	f000 fbec 	bl	800112c <red1_on>
		yellow1_off();
 8000954:	f000 fc26 	bl	80011a4 <yellow1_off>
		green1_off();
 8000958:	f000 fc54 	bl	8001204 <green1_off>

		red2_off();
 800095c:	f000 fc0a 	bl	8001174 <red2_off>
		yellow2_off();
 8000960:	f000 fc38 	bl	80011d4 <yellow2_off>
		green2_on();
 8000964:	f000 fc5a 	bl	800121c <green2_on>

		if (isButton1Pressed() == 1) {
 8000968:	f7ff fbf0 	bl	800014c <isButton1Pressed>
 800096c:	4603      	mov	r3, r0
 800096e:	2b01      	cmp	r3, #1
 8000970:	d11a      	bne.n	80009a8 <fsm_automatic_run+0xb4>
			duration_add = 0;
 8000972:	4b7e      	ldr	r3, [pc, #504]	@ (8000b6c <fsm_automatic_run+0x278>)
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
			status = MAN_RED;
 8000978:	4b79      	ldr	r3, [pc, #484]	@ (8000b60 <fsm_automatic_run+0x26c>)
 800097a:	220c      	movs	r2, #12
 800097c:	601a      	str	r2, [r3, #0]
			timer1_flag = 1;
 800097e:	4b7c      	ldr	r3, [pc, #496]	@ (8000b70 <fsm_automatic_run+0x27c>)
 8000980:	2201      	movs	r2, #1
 8000982:	601a      	str	r2, [r3, #0]
			duration_current = duration_red;
 8000984:	4b7b      	ldr	r3, [pc, #492]	@ (8000b74 <fsm_automatic_run+0x280>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a7b      	ldr	r2, [pc, #492]	@ (8000b78 <fsm_automatic_run+0x284>)
 800098a:	6013      	str	r3, [r2, #0]
			updateManualClock(duration_current);
 800098c:	4b7a      	ldr	r3, [pc, #488]	@ (8000b78 <fsm_automatic_run+0x284>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff ff15 	bl	80007c0 <updateManualClock>
			reset7Led();
 8000996:	f7ff fe31 	bl	80005fc <reset7Led>
			clock_status = CLOCK_MAN;
 800099a:	4b72      	ldr	r3, [pc, #456]	@ (8000b64 <fsm_automatic_run+0x270>)
 800099c:	2216      	movs	r2, #22
 800099e:	601a      	str	r2, [r3, #0]
			setTimer1(TIME_MAN_MODE);
 80009a0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009a4:	f000 ff52 	bl	800184c <setTimer1>
		}

		if (timer1_flag == 1) {
 80009a8:	4b71      	ldr	r3, [pc, #452]	@ (8000b70 <fsm_automatic_run+0x27c>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	f040 80cd 	bne.w	8000b4c <fsm_automatic_run+0x258>
			duration_road1 = 200;
 80009b2:	4b72      	ldr	r3, [pc, #456]	@ (8000b7c <fsm_automatic_run+0x288>)
 80009b4:	22c8      	movs	r2, #200	@ 0xc8
 80009b6:	601a      	str	r2, [r3, #0]
			duration_road2 = 200;
 80009b8:	4b71      	ldr	r3, [pc, #452]	@ (8000b80 <fsm_automatic_run+0x28c>)
 80009ba:	22c8      	movs	r2, #200	@ 0xc8
 80009bc:	601a      	str	r2, [r3, #0]
			status = AUTO_RED_YELLOW;
 80009be:	4b68      	ldr	r3, [pc, #416]	@ (8000b60 <fsm_automatic_run+0x26c>)
 80009c0:	2203      	movs	r2, #3
 80009c2:	601a      	str	r2, [r3, #0]
			clock_status = CLOCK_DISPLAY;
 80009c4:	4b67      	ldr	r3, [pc, #412]	@ (8000b64 <fsm_automatic_run+0x270>)
 80009c6:	2215      	movs	r2, #21
 80009c8:	601a      	str	r2, [r3, #0]
			setTimer1(duration_yellow);
 80009ca:	4b6e      	ldr	r3, [pc, #440]	@ (8000b84 <fsm_automatic_run+0x290>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4618      	mov	r0, r3
 80009d0:	f000 ff3c 	bl	800184c <setTimer1>
		}
		break;
 80009d4:	e0ba      	b.n	8000b4c <fsm_automatic_run+0x258>
	case AUTO_RED_YELLOW:
		red1_on();
 80009d6:	f000 fba9 	bl	800112c <red1_on>
		yellow1_off();
 80009da:	f000 fbe3 	bl	80011a4 <yellow1_off>
		green1_off();
 80009de:	f000 fc11 	bl	8001204 <green1_off>

		red2_off();
 80009e2:	f000 fbc7 	bl	8001174 <red2_off>
		yellow2_on();
 80009e6:	f000 fbe9 	bl	80011bc <yellow2_on>
		green2_off();
 80009ea:	f000 fc23 	bl	8001234 <green2_off>

		if (isButton1Pressed() == 1) {
 80009ee:	f7ff fbad 	bl	800014c <isButton1Pressed>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d117      	bne.n	8000a28 <fsm_automatic_run+0x134>
			status = MAN_RED;
 80009f8:	4b59      	ldr	r3, [pc, #356]	@ (8000b60 <fsm_automatic_run+0x26c>)
 80009fa:	220c      	movs	r2, #12
 80009fc:	601a      	str	r2, [r3, #0]
			timer1_flag = 1;
 80009fe:	4b5c      	ldr	r3, [pc, #368]	@ (8000b70 <fsm_automatic_run+0x27c>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	601a      	str	r2, [r3, #0]
			duration_current = duration_red;
 8000a04:	4b5b      	ldr	r3, [pc, #364]	@ (8000b74 <fsm_automatic_run+0x280>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a5b      	ldr	r2, [pc, #364]	@ (8000b78 <fsm_automatic_run+0x284>)
 8000a0a:	6013      	str	r3, [r2, #0]
			updateManualClock(duration_current);
 8000a0c:	4b5a      	ldr	r3, [pc, #360]	@ (8000b78 <fsm_automatic_run+0x284>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff fed5 	bl	80007c0 <updateManualClock>
			reset7Led();
 8000a16:	f7ff fdf1 	bl	80005fc <reset7Led>
			clock_status = CLOCK_MAN;
 8000a1a:	4b52      	ldr	r3, [pc, #328]	@ (8000b64 <fsm_automatic_run+0x270>)
 8000a1c:	2216      	movs	r2, #22
 8000a1e:	601a      	str	r2, [r3, #0]
			setTimer1(TIME_MAN_MODE);
 8000a20:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a24:	f000 ff12 	bl	800184c <setTimer1>
		}

		if (timer1_flag == 1) {
 8000a28:	4b51      	ldr	r3, [pc, #324]	@ (8000b70 <fsm_automatic_run+0x27c>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	f040 808f 	bne.w	8000b50 <fsm_automatic_run+0x25c>
			duration_road1 = 300;
 8000a32:	4b52      	ldr	r3, [pc, #328]	@ (8000b7c <fsm_automatic_run+0x288>)
 8000a34:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000a38:	601a      	str	r2, [r3, #0]
			duration_road2 = 500;
 8000a3a:	4b51      	ldr	r3, [pc, #324]	@ (8000b80 <fsm_automatic_run+0x28c>)
 8000a3c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000a40:	601a      	str	r2, [r3, #0]
			status = AUTO_GREEN_RED;
 8000a42:	4b47      	ldr	r3, [pc, #284]	@ (8000b60 <fsm_automatic_run+0x26c>)
 8000a44:	2204      	movs	r2, #4
 8000a46:	601a      	str	r2, [r3, #0]
			clock_status = CLOCK_DISPLAY;
 8000a48:	4b46      	ldr	r3, [pc, #280]	@ (8000b64 <fsm_automatic_run+0x270>)
 8000a4a:	2215      	movs	r2, #21
 8000a4c:	601a      	str	r2, [r3, #0]
			setTimer1(duration_green);
 8000a4e:	4b46      	ldr	r3, [pc, #280]	@ (8000b68 <fsm_automatic_run+0x274>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4618      	mov	r0, r3
 8000a54:	f000 fefa 	bl	800184c <setTimer1>
		}
		break;
 8000a58:	e07a      	b.n	8000b50 <fsm_automatic_run+0x25c>
	case AUTO_GREEN_RED:
		red1_off();
 8000a5a:	f000 fb73 	bl	8001144 <red1_off>
		yellow1_off();
 8000a5e:	f000 fba1 	bl	80011a4 <yellow1_off>
		green1_on();
 8000a62:	f000 fbc3 	bl	80011ec <green1_on>

		red2_on();
 8000a66:	f000 fb79 	bl	800115c <red2_on>
		yellow2_off();
 8000a6a:	f000 fbb3 	bl	80011d4 <yellow2_off>
		green2_off();
 8000a6e:	f000 fbe1 	bl	8001234 <green2_off>

		if (isButton1Pressed() == 1) {
 8000a72:	f7ff fb6b 	bl	800014c <isButton1Pressed>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d117      	bne.n	8000aac <fsm_automatic_run+0x1b8>
			status = MAN_RED;
 8000a7c:	4b38      	ldr	r3, [pc, #224]	@ (8000b60 <fsm_automatic_run+0x26c>)
 8000a7e:	220c      	movs	r2, #12
 8000a80:	601a      	str	r2, [r3, #0]
			timer1_flag = 1;
 8000a82:	4b3b      	ldr	r3, [pc, #236]	@ (8000b70 <fsm_automatic_run+0x27c>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	601a      	str	r2, [r3, #0]
			duration_current = duration_red;
 8000a88:	4b3a      	ldr	r3, [pc, #232]	@ (8000b74 <fsm_automatic_run+0x280>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a3a      	ldr	r2, [pc, #232]	@ (8000b78 <fsm_automatic_run+0x284>)
 8000a8e:	6013      	str	r3, [r2, #0]
			updateManualClock(duration_current);
 8000a90:	4b39      	ldr	r3, [pc, #228]	@ (8000b78 <fsm_automatic_run+0x284>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff fe93 	bl	80007c0 <updateManualClock>
			reset7Led();
 8000a9a:	f7ff fdaf 	bl	80005fc <reset7Led>
			clock_status = CLOCK_MAN;
 8000a9e:	4b31      	ldr	r3, [pc, #196]	@ (8000b64 <fsm_automatic_run+0x270>)
 8000aa0:	2216      	movs	r2, #22
 8000aa2:	601a      	str	r2, [r3, #0]
			setTimer1(TIME_MAN_MODE);
 8000aa4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000aa8:	f000 fed0 	bl	800184c <setTimer1>
		}

		if (timer1_flag == 1) {
 8000aac:	4b30      	ldr	r3, [pc, #192]	@ (8000b70 <fsm_automatic_run+0x27c>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d14f      	bne.n	8000b54 <fsm_automatic_run+0x260>
			duration_road1 = 200;
 8000ab4:	4b31      	ldr	r3, [pc, #196]	@ (8000b7c <fsm_automatic_run+0x288>)
 8000ab6:	22c8      	movs	r2, #200	@ 0xc8
 8000ab8:	601a      	str	r2, [r3, #0]
			duration_road2 = 200;
 8000aba:	4b31      	ldr	r3, [pc, #196]	@ (8000b80 <fsm_automatic_run+0x28c>)
 8000abc:	22c8      	movs	r2, #200	@ 0xc8
 8000abe:	601a      	str	r2, [r3, #0]
			status = AUTO_YELLOW_RED;
 8000ac0:	4b27      	ldr	r3, [pc, #156]	@ (8000b60 <fsm_automatic_run+0x26c>)
 8000ac2:	2205      	movs	r2, #5
 8000ac4:	601a      	str	r2, [r3, #0]
			clock_status = CLOCK_DISPLAY;
 8000ac6:	4b27      	ldr	r3, [pc, #156]	@ (8000b64 <fsm_automatic_run+0x270>)
 8000ac8:	2215      	movs	r2, #21
 8000aca:	601a      	str	r2, [r3, #0]
			setTimer1(duration_yellow);
 8000acc:	4b2d      	ldr	r3, [pc, #180]	@ (8000b84 <fsm_automatic_run+0x290>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f000 febb 	bl	800184c <setTimer1>
		}
		break;
 8000ad6:	e03d      	b.n	8000b54 <fsm_automatic_run+0x260>
	case AUTO_YELLOW_RED:
		red1_off();
 8000ad8:	f000 fb34 	bl	8001144 <red1_off>
		yellow1_on();
 8000adc:	f000 fb56 	bl	800118c <yellow1_on>
		green1_off();
 8000ae0:	f000 fb90 	bl	8001204 <green1_off>

		red2_on();
 8000ae4:	f000 fb3a 	bl	800115c <red2_on>
		yellow2_off();
 8000ae8:	f000 fb74 	bl	80011d4 <yellow2_off>
		green2_off();
 8000aec:	f000 fba2 	bl	8001234 <green2_off>

		if (isButton1Pressed() == 1) {
 8000af0:	f7ff fb2c 	bl	800014c <isButton1Pressed>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d10e      	bne.n	8000b18 <fsm_automatic_run+0x224>
			timer1_flag = 1;
 8000afa:	4b1d      	ldr	r3, [pc, #116]	@ (8000b70 <fsm_automatic_run+0x27c>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	601a      	str	r2, [r3, #0]
			status = MAN_RED;
 8000b00:	4b17      	ldr	r3, [pc, #92]	@ (8000b60 <fsm_automatic_run+0x26c>)
 8000b02:	220c      	movs	r2, #12
 8000b04:	601a      	str	r2, [r3, #0]
			clock_status = CLOCK_MAN;
 8000b06:	4b17      	ldr	r3, [pc, #92]	@ (8000b64 <fsm_automatic_run+0x270>)
 8000b08:	2216      	movs	r2, #22
 8000b0a:	601a      	str	r2, [r3, #0]
			reset7Led();
 8000b0c:	f7ff fd76 	bl	80005fc <reset7Led>
			setTimer1(TIME_MAN_MODE);
 8000b10:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b14:	f000 fe9a 	bl	800184c <setTimer1>
		}

		if (timer1_flag == 1) {
 8000b18:	4b15      	ldr	r3, [pc, #84]	@ (8000b70 <fsm_automatic_run+0x27c>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d11b      	bne.n	8000b58 <fsm_automatic_run+0x264>
			duration_road1 = 500;
 8000b20:	4b16      	ldr	r3, [pc, #88]	@ (8000b7c <fsm_automatic_run+0x288>)
 8000b22:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000b26:	601a      	str	r2, [r3, #0]
			duration_road2 = 300;
 8000b28:	4b15      	ldr	r3, [pc, #84]	@ (8000b80 <fsm_automatic_run+0x28c>)
 8000b2a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000b2e:	601a      	str	r2, [r3, #0]
			status = AUTO_RED_GREEN;
 8000b30:	4b0b      	ldr	r3, [pc, #44]	@ (8000b60 <fsm_automatic_run+0x26c>)
 8000b32:	2202      	movs	r2, #2
 8000b34:	601a      	str	r2, [r3, #0]
			clock_status = CLOCK_DISPLAY;
 8000b36:	4b0b      	ldr	r3, [pc, #44]	@ (8000b64 <fsm_automatic_run+0x270>)
 8000b38:	2215      	movs	r2, #21
 8000b3a:	601a      	str	r2, [r3, #0]
			setTimer1(duration_green);
 8000b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b68 <fsm_automatic_run+0x274>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f000 fe83 	bl	800184c <setTimer1>
		}
		break;
 8000b46:	e007      	b.n	8000b58 <fsm_automatic_run+0x264>
	default:
		break;
 8000b48:	bf00      	nop
 8000b4a:	e006      	b.n	8000b5a <fsm_automatic_run+0x266>
		break;
 8000b4c:	bf00      	nop
 8000b4e:	e004      	b.n	8000b5a <fsm_automatic_run+0x266>
		break;
 8000b50:	bf00      	nop
 8000b52:	e002      	b.n	8000b5a <fsm_automatic_run+0x266>
		break;
 8000b54:	bf00      	nop
 8000b56:	e000      	b.n	8000b5a <fsm_automatic_run+0x266>
		break;
 8000b58:	bf00      	nop
	}
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	200003ec 	.word	0x200003ec
 8000b64:	20000040 	.word	0x20000040
 8000b68:	20000058 	.word	0x20000058
 8000b6c:	200003f0 	.word	0x200003f0
 8000b70:	20000444 	.word	0x20000444
 8000b74:	20000050 	.word	0x20000050
 8000b78:	2000004c 	.word	0x2000004c
 8000b7c:	20000044 	.word	0x20000044
 8000b80:	20000048 	.word	0x20000048
 8000b84:	20000054 	.word	0x20000054

08000b88 <fsm_manual_run>:
#include "global.h"
#include "led.h"
#include "button.h"
#include "blinky_4led.h"

void fsm_manual_run() {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0

	switch (status) {
 8000b8c:	4b75      	ldr	r3, [pc, #468]	@ (8000d64 <fsm_manual_run+0x1dc>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2b0e      	cmp	r3, #14
 8000b92:	f000 81d3 	beq.w	8000f3c <fsm_manual_run+0x3b4>
 8000b96:	2b0e      	cmp	r3, #14
 8000b98:	f300 82ad 	bgt.w	80010f6 <fsm_manual_run+0x56e>
 8000b9c:	2b0c      	cmp	r3, #12
 8000b9e:	d003      	beq.n	8000ba8 <fsm_manual_run+0x20>
 8000ba0:	2b0d      	cmp	r3, #13
 8000ba2:	f000 80f7 	beq.w	8000d94 <fsm_manual_run+0x20c>
				setTimer1(duration_green);  // Thiết lập lại bộ đếm thời gian
			}
			break;

		default:
			break;
 8000ba6:	e2a6      	b.n	80010f6 <fsm_manual_run+0x56e>
			red1_on();
 8000ba8:	f000 fac0 	bl	800112c <red1_on>
			red2_on();
 8000bac:	f000 fad6 	bl	800115c <red2_on>
			yellow1_off();
 8000bb0:	f000 faf8 	bl	80011a4 <yellow1_off>
			yellow2_off();
 8000bb4:	f000 fb0e 	bl	80011d4 <yellow2_off>
			green1_off();
 8000bb8:	f000 fb24 	bl	8001204 <green1_off>
			green2_off();
 8000bbc:	f000 fb3a 	bl	8001234 <green2_off>
			if (isButton1Pressed() == 1) {
 8000bc0:	f7ff fac4 	bl	800014c <isButton1Pressed>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d118      	bne.n	8000bfc <fsm_manual_run+0x74>
				duration_add = 0;
 8000bca:	4b67      	ldr	r3, [pc, #412]	@ (8000d68 <fsm_manual_run+0x1e0>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
				timer1_flag = 1;
 8000bd0:	4b66      	ldr	r3, [pc, #408]	@ (8000d6c <fsm_manual_run+0x1e4>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	601a      	str	r2, [r3, #0]
				status = MAN_GREEN;
 8000bd6:	4b63      	ldr	r3, [pc, #396]	@ (8000d64 <fsm_manual_run+0x1dc>)
 8000bd8:	220d      	movs	r2, #13
 8000bda:	601a      	str	r2, [r3, #0]
				clock_status = CLOCK_MAN;
 8000bdc:	4b64      	ldr	r3, [pc, #400]	@ (8000d70 <fsm_manual_run+0x1e8>)
 8000bde:	2216      	movs	r2, #22
 8000be0:	601a      	str	r2, [r3, #0]
				duration_current = duration_green;
 8000be2:	4b64      	ldr	r3, [pc, #400]	@ (8000d74 <fsm_manual_run+0x1ec>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a64      	ldr	r2, [pc, #400]	@ (8000d78 <fsm_manual_run+0x1f0>)
 8000be8:	6013      	str	r3, [r2, #0]
				updateManualClock(duration_current);
 8000bea:	4b63      	ldr	r3, [pc, #396]	@ (8000d78 <fsm_manual_run+0x1f0>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fde6 	bl	80007c0 <updateManualClock>
				setTimer1(TIME_MAN_MODE);  // Thiết lập lại thời gian
 8000bf4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000bf8:	f000 fe28 	bl	800184c <setTimer1>
			if (isButton2Pressed() == 1) {
 8000bfc:	f7ff fab8 	bl	8000170 <isButton2Pressed>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d119      	bne.n	8000c3a <fsm_manual_run+0xb2>
				duration_add += 100;  // Cộng thêm 100 vào thời gian
 8000c06:	4b58      	ldr	r3, [pc, #352]	@ (8000d68 <fsm_manual_run+0x1e0>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	3364      	adds	r3, #100	@ 0x64
 8000c0c:	4a56      	ldr	r2, [pc, #344]	@ (8000d68 <fsm_manual_run+0x1e0>)
 8000c0e:	6013      	str	r3, [r2, #0]
				duration_red += 100;
 8000c10:	4b5a      	ldr	r3, [pc, #360]	@ (8000d7c <fsm_manual_run+0x1f4>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	3364      	adds	r3, #100	@ 0x64
 8000c16:	4a59      	ldr	r2, [pc, #356]	@ (8000d7c <fsm_manual_run+0x1f4>)
 8000c18:	6013      	str	r3, [r2, #0]
				duration_current = duration_red;
 8000c1a:	4b58      	ldr	r3, [pc, #352]	@ (8000d7c <fsm_manual_run+0x1f4>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a56      	ldr	r2, [pc, #344]	@ (8000d78 <fsm_manual_run+0x1f0>)
 8000c20:	6013      	str	r3, [r2, #0]
				updateManualClock(duration_current);
 8000c22:	4b55      	ldr	r3, [pc, #340]	@ (8000d78 <fsm_manual_run+0x1f0>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff fdca 	bl	80007c0 <updateManualClock>
				timer1_flag = 1;
 8000c2c:	4b4f      	ldr	r3, [pc, #316]	@ (8000d6c <fsm_manual_run+0x1e4>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	601a      	str	r2, [r3, #0]
				setTimer1(TIME_MAN_MODE);  // Thiết lập lại thời gian
 8000c32:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c36:	f000 fe09 	bl	800184c <setTimer1>
			if (isButton3Pressed() == 1) {
 8000c3a:	f7ff faab 	bl	8000194 <isButton3Pressed>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d167      	bne.n	8000d14 <fsm_manual_run+0x18c>
				duration_red = ((duration_red / 100) % 99) * 100;
 8000c44:	4b4d      	ldr	r3, [pc, #308]	@ (8000d7c <fsm_manual_run+0x1f4>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a4d      	ldr	r2, [pc, #308]	@ (8000d80 <fsm_manual_run+0x1f8>)
 8000c4a:	fb82 1203 	smull	r1, r2, r2, r3
 8000c4e:	1152      	asrs	r2, r2, #5
 8000c50:	17db      	asrs	r3, r3, #31
 8000c52:	1ad2      	subs	r2, r2, r3
 8000c54:	4b4b      	ldr	r3, [pc, #300]	@ (8000d84 <fsm_manual_run+0x1fc>)
 8000c56:	fb83 1302 	smull	r1, r3, r3, r2
 8000c5a:	4413      	add	r3, r2
 8000c5c:	1199      	asrs	r1, r3, #6
 8000c5e:	17d3      	asrs	r3, r2, #31
 8000c60:	1ac9      	subs	r1, r1, r3
 8000c62:	460b      	mov	r3, r1
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	440b      	add	r3, r1
 8000c68:	0159      	lsls	r1, r3, #5
 8000c6a:	440b      	add	r3, r1
 8000c6c:	1ad1      	subs	r1, r2, r3
 8000c6e:	2364      	movs	r3, #100	@ 0x64
 8000c70:	fb01 f303 	mul.w	r3, r1, r3
 8000c74:	4a41      	ldr	r2, [pc, #260]	@ (8000d7c <fsm_manual_run+0x1f4>)
 8000c76:	6013      	str	r3, [r2, #0]
				if (duration_red < 1000){
 8000c78:	4b40      	ldr	r3, [pc, #256]	@ (8000d7c <fsm_manual_run+0x1f4>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000c80:	da14      	bge.n	8000cac <fsm_manual_run+0x124>
					duration_yellow = (duration_red / 200) * 100;
 8000c82:	4b3e      	ldr	r3, [pc, #248]	@ (8000d7c <fsm_manual_run+0x1f4>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a3e      	ldr	r2, [pc, #248]	@ (8000d80 <fsm_manual_run+0x1f8>)
 8000c88:	fb82 1203 	smull	r1, r2, r2, r3
 8000c8c:	1192      	asrs	r2, r2, #6
 8000c8e:	17db      	asrs	r3, r3, #31
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	2264      	movs	r2, #100	@ 0x64
 8000c94:	fb02 f303 	mul.w	r3, r2, r3
 8000c98:	4a3b      	ldr	r2, [pc, #236]	@ (8000d88 <fsm_manual_run+0x200>)
 8000c9a:	6013      	str	r3, [r2, #0]
					duration_green = duration_red - duration_yellow;
 8000c9c:	4b37      	ldr	r3, [pc, #220]	@ (8000d7c <fsm_manual_run+0x1f4>)
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	4b39      	ldr	r3, [pc, #228]	@ (8000d88 <fsm_manual_run+0x200>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	4a33      	ldr	r2, [pc, #204]	@ (8000d74 <fsm_manual_run+0x1ec>)
 8000ca8:	6013      	str	r3, [r2, #0]
 8000caa:	e013      	b.n	8000cd4 <fsm_manual_run+0x14c>
					duration_yellow = (duration_red / 400) * 100;
 8000cac:	4b33      	ldr	r3, [pc, #204]	@ (8000d7c <fsm_manual_run+0x1f4>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a33      	ldr	r2, [pc, #204]	@ (8000d80 <fsm_manual_run+0x1f8>)
 8000cb2:	fb82 1203 	smull	r1, r2, r2, r3
 8000cb6:	11d2      	asrs	r2, r2, #7
 8000cb8:	17db      	asrs	r3, r3, #31
 8000cba:	1ad3      	subs	r3, r2, r3
 8000cbc:	2264      	movs	r2, #100	@ 0x64
 8000cbe:	fb02 f303 	mul.w	r3, r2, r3
 8000cc2:	4a31      	ldr	r2, [pc, #196]	@ (8000d88 <fsm_manual_run+0x200>)
 8000cc4:	6013      	str	r3, [r2, #0]
					duration_green = duration_red - duration_yellow;
 8000cc6:	4b2d      	ldr	r3, [pc, #180]	@ (8000d7c <fsm_manual_run+0x1f4>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	4b2f      	ldr	r3, [pc, #188]	@ (8000d88 <fsm_manual_run+0x200>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	1ad3      	subs	r3, r2, r3
 8000cd0:	4a28      	ldr	r2, [pc, #160]	@ (8000d74 <fsm_manual_run+0x1ec>)
 8000cd2:	6013      	str	r3, [r2, #0]
				status = AUTO_RED_GREEN;
 8000cd4:	4b23      	ldr	r3, [pc, #140]	@ (8000d64 <fsm_manual_run+0x1dc>)
 8000cd6:	2202      	movs	r2, #2
 8000cd8:	601a      	str	r2, [r3, #0]
				timer1_flag = 1;
 8000cda:	4b24      	ldr	r3, [pc, #144]	@ (8000d6c <fsm_manual_run+0x1e4>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	601a      	str	r2, [r3, #0]
				duration_road1 = duration_red;
 8000ce0:	4b26      	ldr	r3, [pc, #152]	@ (8000d7c <fsm_manual_run+0x1f4>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a29      	ldr	r2, [pc, #164]	@ (8000d8c <fsm_manual_run+0x204>)
 8000ce6:	6013      	str	r3, [r2, #0]
				duration_road2 = duration_green;
 8000ce8:	4b22      	ldr	r3, [pc, #136]	@ (8000d74 <fsm_manual_run+0x1ec>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a28      	ldr	r2, [pc, #160]	@ (8000d90 <fsm_manual_run+0x208>)
 8000cee:	6013      	str	r3, [r2, #0]
				clock_status = CLOCK_DISPLAY;
 8000cf0:	4b1f      	ldr	r3, [pc, #124]	@ (8000d70 <fsm_manual_run+0x1e8>)
 8000cf2:	2215      	movs	r2, #21
 8000cf4:	601a      	str	r2, [r3, #0]
				updateDisplayClock(duration_road1, duration_road2);
 8000cf6:	4b25      	ldr	r3, [pc, #148]	@ (8000d8c <fsm_manual_run+0x204>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a25      	ldr	r2, [pc, #148]	@ (8000d90 <fsm_manual_run+0x208>)
 8000cfc:	6812      	ldr	r2, [r2, #0]
 8000cfe:	4611      	mov	r1, r2
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff fd11 	bl	8000728 <updateDisplayClock>
				reset7Led();
 8000d06:	f7ff fc79 	bl	80005fc <reset7Led>
				setTimer1(duration_green);  // Thiết lập lại thời gian
 8000d0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000d74 <fsm_manual_run+0x1ec>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f000 fd9c 	bl	800184c <setTimer1>
			if (timer1_flag == 1) {
 8000d14:	4b15      	ldr	r3, [pc, #84]	@ (8000d6c <fsm_manual_run+0x1e4>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	f040 81ee 	bne.w	80010fa <fsm_manual_run+0x572>
				duration_red -= duration_add;
 8000d1e:	4b17      	ldr	r3, [pc, #92]	@ (8000d7c <fsm_manual_run+0x1f4>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	4b11      	ldr	r3, [pc, #68]	@ (8000d68 <fsm_manual_run+0x1e0>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	1ad3      	subs	r3, r2, r3
 8000d28:	4a14      	ldr	r2, [pc, #80]	@ (8000d7c <fsm_manual_run+0x1f4>)
 8000d2a:	6013      	str	r3, [r2, #0]
				status = AUTO_RED_GREEN;
 8000d2c:	4b0d      	ldr	r3, [pc, #52]	@ (8000d64 <fsm_manual_run+0x1dc>)
 8000d2e:	2202      	movs	r2, #2
 8000d30:	601a      	str	r2, [r3, #0]
				duration_road1 = duration_red;
 8000d32:	4b12      	ldr	r3, [pc, #72]	@ (8000d7c <fsm_manual_run+0x1f4>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a15      	ldr	r2, [pc, #84]	@ (8000d8c <fsm_manual_run+0x204>)
 8000d38:	6013      	str	r3, [r2, #0]
				duration_road2 = duration_green;
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d74 <fsm_manual_run+0x1ec>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a14      	ldr	r2, [pc, #80]	@ (8000d90 <fsm_manual_run+0x208>)
 8000d40:	6013      	str	r3, [r2, #0]
				clock_status = CLOCK_DISPLAY;
 8000d42:	4b0b      	ldr	r3, [pc, #44]	@ (8000d70 <fsm_manual_run+0x1e8>)
 8000d44:	2215      	movs	r2, #21
 8000d46:	601a      	str	r2, [r3, #0]
				updateDisplayClock(duration_road1, duration_road2);
 8000d48:	4b10      	ldr	r3, [pc, #64]	@ (8000d8c <fsm_manual_run+0x204>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a10      	ldr	r2, [pc, #64]	@ (8000d90 <fsm_manual_run+0x208>)
 8000d4e:	6812      	ldr	r2, [r2, #0]
 8000d50:	4611      	mov	r1, r2
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff fce8 	bl	8000728 <updateDisplayClock>
				setTimer1(duration_green);  // Thiết lập lại bộ đếm thời gian
 8000d58:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <fsm_manual_run+0x1ec>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f000 fd75 	bl	800184c <setTimer1>
			break;
 8000d62:	e1ca      	b.n	80010fa <fsm_manual_run+0x572>
 8000d64:	200003ec 	.word	0x200003ec
 8000d68:	200003f0 	.word	0x200003f0
 8000d6c:	20000444 	.word	0x20000444
 8000d70:	20000040 	.word	0x20000040
 8000d74:	20000058 	.word	0x20000058
 8000d78:	2000004c 	.word	0x2000004c
 8000d7c:	20000050 	.word	0x20000050
 8000d80:	51eb851f 	.word	0x51eb851f
 8000d84:	a57eb503 	.word	0xa57eb503
 8000d88:	20000054 	.word	0x20000054
 8000d8c:	20000044 	.word	0x20000044
 8000d90:	20000048 	.word	0x20000048
			red1_off();
 8000d94:	f000 f9d6 	bl	8001144 <red1_off>
			red2_off();
 8000d98:	f000 f9ec 	bl	8001174 <red2_off>
			yellow1_off();
 8000d9c:	f000 fa02 	bl	80011a4 <yellow1_off>
			yellow2_off();
 8000da0:	f000 fa18 	bl	80011d4 <yellow2_off>
			green1_on();
 8000da4:	f000 fa22 	bl	80011ec <green1_on>
			green2_on();
 8000da8:	f000 fa38 	bl	800121c <green2_on>
			if (isButton1Pressed() == 1) {
 8000dac:	f7ff f9ce 	bl	800014c <isButton1Pressed>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d118      	bne.n	8000de8 <fsm_manual_run+0x260>
				duration_add = 0;
 8000db6:	4ba1      	ldr	r3, [pc, #644]	@ (800103c <fsm_manual_run+0x4b4>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
				status = MAN_YELLOW;
 8000dbc:	4ba0      	ldr	r3, [pc, #640]	@ (8001040 <fsm_manual_run+0x4b8>)
 8000dbe:	220e      	movs	r2, #14
 8000dc0:	601a      	str	r2, [r3, #0]
				clock_status = CLOCK_MAN;
 8000dc2:	4ba0      	ldr	r3, [pc, #640]	@ (8001044 <fsm_manual_run+0x4bc>)
 8000dc4:	2216      	movs	r2, #22
 8000dc6:	601a      	str	r2, [r3, #0]
				timer1_flag = 1;
 8000dc8:	4b9f      	ldr	r3, [pc, #636]	@ (8001048 <fsm_manual_run+0x4c0>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	601a      	str	r2, [r3, #0]
				duration_current = duration_yellow;
 8000dce:	4b9f      	ldr	r3, [pc, #636]	@ (800104c <fsm_manual_run+0x4c4>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a9f      	ldr	r2, [pc, #636]	@ (8001050 <fsm_manual_run+0x4c8>)
 8000dd4:	6013      	str	r3, [r2, #0]
				updateManualClock(duration_current);
 8000dd6:	4b9e      	ldr	r3, [pc, #632]	@ (8001050 <fsm_manual_run+0x4c8>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff fcf0 	bl	80007c0 <updateManualClock>
				setTimer1(TIME_MAN_MODE);  // Thiết lập lại thời gian
 8000de0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000de4:	f000 fd32 	bl	800184c <setTimer1>
			if (isButton2Pressed() == 1){
 8000de8:	f7ff f9c2 	bl	8000170 <isButton2Pressed>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d119      	bne.n	8000e26 <fsm_manual_run+0x29e>
				duration_add += 100;
 8000df2:	4b92      	ldr	r3, [pc, #584]	@ (800103c <fsm_manual_run+0x4b4>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	3364      	adds	r3, #100	@ 0x64
 8000df8:	4a90      	ldr	r2, [pc, #576]	@ (800103c <fsm_manual_run+0x4b4>)
 8000dfa:	6013      	str	r3, [r2, #0]
				duration_green += 100;
 8000dfc:	4b95      	ldr	r3, [pc, #596]	@ (8001054 <fsm_manual_run+0x4cc>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	3364      	adds	r3, #100	@ 0x64
 8000e02:	4a94      	ldr	r2, [pc, #592]	@ (8001054 <fsm_manual_run+0x4cc>)
 8000e04:	6013      	str	r3, [r2, #0]
				duration_current = duration_green;
 8000e06:	4b93      	ldr	r3, [pc, #588]	@ (8001054 <fsm_manual_run+0x4cc>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a91      	ldr	r2, [pc, #580]	@ (8001050 <fsm_manual_run+0x4c8>)
 8000e0c:	6013      	str	r3, [r2, #0]
				updateManualClock(duration_current);
 8000e0e:	4b90      	ldr	r3, [pc, #576]	@ (8001050 <fsm_manual_run+0x4c8>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff fcd4 	bl	80007c0 <updateManualClock>
				timer1_flag = 1;
 8000e18:	4b8b      	ldr	r3, [pc, #556]	@ (8001048 <fsm_manual_run+0x4c0>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	601a      	str	r2, [r3, #0]
				setTimer1(TIME_MAN_MODE);
 8000e1e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e22:	f000 fd13 	bl	800184c <setTimer1>
			if (isButton3Pressed() == 1){
 8000e26:	f7ff f9b5 	bl	8000194 <isButton3Pressed>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d15a      	bne.n	8000ee6 <fsm_manual_run+0x35e>
				duration_green = ((duration_green / 100) % 75) * 100;
 8000e30:	4b88      	ldr	r3, [pc, #544]	@ (8001054 <fsm_manual_run+0x4cc>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a88      	ldr	r2, [pc, #544]	@ (8001058 <fsm_manual_run+0x4d0>)
 8000e36:	fb82 1203 	smull	r1, r2, r2, r3
 8000e3a:	1152      	asrs	r2, r2, #5
 8000e3c:	17db      	asrs	r3, r3, #31
 8000e3e:	1ad1      	subs	r1, r2, r3
 8000e40:	4b86      	ldr	r3, [pc, #536]	@ (800105c <fsm_manual_run+0x4d4>)
 8000e42:	fb83 2301 	smull	r2, r3, r3, r1
 8000e46:	10da      	asrs	r2, r3, #3
 8000e48:	17cb      	asrs	r3, r1, #31
 8000e4a:	1ad2      	subs	r2, r2, r3
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	4413      	add	r3, r2
 8000e52:	011a      	lsls	r2, r3, #4
 8000e54:	1ad2      	subs	r2, r2, r3
 8000e56:	1a8a      	subs	r2, r1, r2
 8000e58:	2364      	movs	r3, #100	@ 0x64
 8000e5a:	fb02 f303 	mul.w	r3, r2, r3
 8000e5e:	4a7d      	ldr	r2, [pc, #500]	@ (8001054 <fsm_manual_run+0x4cc>)
 8000e60:	6013      	str	r3, [r2, #0]
				if (duration_green <= 500){
 8000e62:	4b7c      	ldr	r3, [pc, #496]	@ (8001054 <fsm_manual_run+0x4cc>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000e6a:	dc0b      	bgt.n	8000e84 <fsm_manual_run+0x2fc>
					duration_yellow = duration_green;
 8000e6c:	4b79      	ldr	r3, [pc, #484]	@ (8001054 <fsm_manual_run+0x4cc>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a76      	ldr	r2, [pc, #472]	@ (800104c <fsm_manual_run+0x4c4>)
 8000e72:	6013      	str	r3, [r2, #0]
					duration_red = duration_green + duration_yellow;
 8000e74:	4b77      	ldr	r3, [pc, #476]	@ (8001054 <fsm_manual_run+0x4cc>)
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	4b74      	ldr	r3, [pc, #464]	@ (800104c <fsm_manual_run+0x4c4>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	4a78      	ldr	r2, [pc, #480]	@ (8001060 <fsm_manual_run+0x4d8>)
 8000e80:	6013      	str	r3, [r2, #0]
 8000e82:	e010      	b.n	8000ea6 <fsm_manual_run+0x31e>
					duration_red = (duration_green * 4 / 3);
 8000e84:	4b73      	ldr	r3, [pc, #460]	@ (8001054 <fsm_manual_run+0x4cc>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	4a76      	ldr	r2, [pc, #472]	@ (8001064 <fsm_manual_run+0x4dc>)
 8000e8c:	fb82 1203 	smull	r1, r2, r2, r3
 8000e90:	17db      	asrs	r3, r3, #31
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	4a72      	ldr	r2, [pc, #456]	@ (8001060 <fsm_manual_run+0x4d8>)
 8000e96:	6013      	str	r3, [r2, #0]
					duration_yellow = duration_red - duration_green;
 8000e98:	4b71      	ldr	r3, [pc, #452]	@ (8001060 <fsm_manual_run+0x4d8>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	4b6d      	ldr	r3, [pc, #436]	@ (8001054 <fsm_manual_run+0x4cc>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	4a6a      	ldr	r2, [pc, #424]	@ (800104c <fsm_manual_run+0x4c4>)
 8000ea4:	6013      	str	r3, [r2, #0]
				status = AUTO_RED_GREEN;
 8000ea6:	4b66      	ldr	r3, [pc, #408]	@ (8001040 <fsm_manual_run+0x4b8>)
 8000ea8:	2202      	movs	r2, #2
 8000eaa:	601a      	str	r2, [r3, #0]
				timer1_flag = 1;
 8000eac:	4b66      	ldr	r3, [pc, #408]	@ (8001048 <fsm_manual_run+0x4c0>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	601a      	str	r2, [r3, #0]
				duration_road1 = duration_red;
 8000eb2:	4b6b      	ldr	r3, [pc, #428]	@ (8001060 <fsm_manual_run+0x4d8>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a6c      	ldr	r2, [pc, #432]	@ (8001068 <fsm_manual_run+0x4e0>)
 8000eb8:	6013      	str	r3, [r2, #0]
				duration_road2 = duration_green;
 8000eba:	4b66      	ldr	r3, [pc, #408]	@ (8001054 <fsm_manual_run+0x4cc>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a6b      	ldr	r2, [pc, #428]	@ (800106c <fsm_manual_run+0x4e4>)
 8000ec0:	6013      	str	r3, [r2, #0]
				updateDisplayClock(duration_road1, duration_road2);
 8000ec2:	4b69      	ldr	r3, [pc, #420]	@ (8001068 <fsm_manual_run+0x4e0>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a69      	ldr	r2, [pc, #420]	@ (800106c <fsm_manual_run+0x4e4>)
 8000ec8:	6812      	ldr	r2, [r2, #0]
 8000eca:	4611      	mov	r1, r2
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff fc2b 	bl	8000728 <updateDisplayClock>
				clock_status = CLOCK_DISPLAY;
 8000ed2:	4b5c      	ldr	r3, [pc, #368]	@ (8001044 <fsm_manual_run+0x4bc>)
 8000ed4:	2215      	movs	r2, #21
 8000ed6:	601a      	str	r2, [r3, #0]
				reset7Led();
 8000ed8:	f7ff fb90 	bl	80005fc <reset7Led>
				setTimer1(duration_green);  // Thiết lập lại thời gian
 8000edc:	4b5d      	ldr	r3, [pc, #372]	@ (8001054 <fsm_manual_run+0x4cc>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f000 fcb3 	bl	800184c <setTimer1>
			if (timer1_flag == 1) {
 8000ee6:	4b58      	ldr	r3, [pc, #352]	@ (8001048 <fsm_manual_run+0x4c0>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	f040 8107 	bne.w	80010fe <fsm_manual_run+0x576>
				duration_green -= duration_add;
 8000ef0:	4b58      	ldr	r3, [pc, #352]	@ (8001054 <fsm_manual_run+0x4cc>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4b51      	ldr	r3, [pc, #324]	@ (800103c <fsm_manual_run+0x4b4>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	4a56      	ldr	r2, [pc, #344]	@ (8001054 <fsm_manual_run+0x4cc>)
 8000efc:	6013      	str	r3, [r2, #0]
				status = AUTO_RED_GREEN;
 8000efe:	4b50      	ldr	r3, [pc, #320]	@ (8001040 <fsm_manual_run+0x4b8>)
 8000f00:	2202      	movs	r2, #2
 8000f02:	601a      	str	r2, [r3, #0]
				timer1_flag = 1;
 8000f04:	4b50      	ldr	r3, [pc, #320]	@ (8001048 <fsm_manual_run+0x4c0>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	601a      	str	r2, [r3, #0]
				duration_road1 = duration_red;
 8000f0a:	4b55      	ldr	r3, [pc, #340]	@ (8001060 <fsm_manual_run+0x4d8>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a56      	ldr	r2, [pc, #344]	@ (8001068 <fsm_manual_run+0x4e0>)
 8000f10:	6013      	str	r3, [r2, #0]
				duration_road2 = duration_green;
 8000f12:	4b50      	ldr	r3, [pc, #320]	@ (8001054 <fsm_manual_run+0x4cc>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a55      	ldr	r2, [pc, #340]	@ (800106c <fsm_manual_run+0x4e4>)
 8000f18:	6013      	str	r3, [r2, #0]
				updateDisplayClock(duration_road1, duration_road2);
 8000f1a:	4b53      	ldr	r3, [pc, #332]	@ (8001068 <fsm_manual_run+0x4e0>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a53      	ldr	r2, [pc, #332]	@ (800106c <fsm_manual_run+0x4e4>)
 8000f20:	6812      	ldr	r2, [r2, #0]
 8000f22:	4611      	mov	r1, r2
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff fbff 	bl	8000728 <updateDisplayClock>
				clock_status = CLOCK_DISPLAY;
 8000f2a:	4b46      	ldr	r3, [pc, #280]	@ (8001044 <fsm_manual_run+0x4bc>)
 8000f2c:	2215      	movs	r2, #21
 8000f2e:	601a      	str	r2, [r3, #0]
				setTimer1(duration_green);  // Thiết lập lại bộ đếm thời gian cho việc không làm gì sau khi nhấn nút 1
 8000f30:	4b48      	ldr	r3, [pc, #288]	@ (8001054 <fsm_manual_run+0x4cc>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f000 fc89 	bl	800184c <setTimer1>
			break;
 8000f3a:	e0e0      	b.n	80010fe <fsm_manual_run+0x576>
			red1_off();
 8000f3c:	f000 f902 	bl	8001144 <red1_off>
			red2_off();
 8000f40:	f000 f918 	bl	8001174 <red2_off>
			yellow1_on();
 8000f44:	f000 f922 	bl	800118c <yellow1_on>
			yellow2_on();
 8000f48:	f000 f938 	bl	80011bc <yellow2_on>
			green1_off();
 8000f4c:	f000 f95a 	bl	8001204 <green1_off>
			green2_off();
 8000f50:	f000 f970 	bl	8001234 <green2_off>
			if (isButton1Pressed() == 1) {
 8000f54:	f7ff f8fa 	bl	800014c <isButton1Pressed>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d11a      	bne.n	8000f94 <fsm_manual_run+0x40c>
				status = MAN_RED;
 8000f5e:	4b38      	ldr	r3, [pc, #224]	@ (8001040 <fsm_manual_run+0x4b8>)
 8000f60:	220c      	movs	r2, #12
 8000f62:	601a      	str	r2, [r3, #0]
				duration_add = 0;
 8000f64:	4b35      	ldr	r3, [pc, #212]	@ (800103c <fsm_manual_run+0x4b4>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
				clock_status = CLOCK_MAN;
 8000f6a:	4b36      	ldr	r3, [pc, #216]	@ (8001044 <fsm_manual_run+0x4bc>)
 8000f6c:	2216      	movs	r2, #22
 8000f6e:	601a      	str	r2, [r3, #0]
				duration_current = duration_red;
 8000f70:	4b3b      	ldr	r3, [pc, #236]	@ (8001060 <fsm_manual_run+0x4d8>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a36      	ldr	r2, [pc, #216]	@ (8001050 <fsm_manual_run+0x4c8>)
 8000f76:	6013      	str	r3, [r2, #0]
				updateManualClock(duration_current);
 8000f78:	4b35      	ldr	r3, [pc, #212]	@ (8001050 <fsm_manual_run+0x4c8>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff fc1f 	bl	80007c0 <updateManualClock>
				reset7Led();
 8000f82:	f7ff fb3b 	bl	80005fc <reset7Led>
				timer1_flag = 1;
 8000f86:	4b30      	ldr	r3, [pc, #192]	@ (8001048 <fsm_manual_run+0x4c0>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	601a      	str	r2, [r3, #0]
				setTimer1(TIME_MAN_MODE);  // Thiết lập lại thời gian
 8000f8c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f90:	f000 fc5c 	bl	800184c <setTimer1>
			if (isButton2Pressed() == 1){
 8000f94:	f7ff f8ec 	bl	8000170 <isButton2Pressed>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d11c      	bne.n	8000fd8 <fsm_manual_run+0x450>
				clock_status = CLOCK_MAN;
 8000f9e:	4b29      	ldr	r3, [pc, #164]	@ (8001044 <fsm_manual_run+0x4bc>)
 8000fa0:	2216      	movs	r2, #22
 8000fa2:	601a      	str	r2, [r3, #0]
				duration_add += 100;
 8000fa4:	4b25      	ldr	r3, [pc, #148]	@ (800103c <fsm_manual_run+0x4b4>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	3364      	adds	r3, #100	@ 0x64
 8000faa:	4a24      	ldr	r2, [pc, #144]	@ (800103c <fsm_manual_run+0x4b4>)
 8000fac:	6013      	str	r3, [r2, #0]
				duration_yellow += 100;
 8000fae:	4b27      	ldr	r3, [pc, #156]	@ (800104c <fsm_manual_run+0x4c4>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	3364      	adds	r3, #100	@ 0x64
 8000fb4:	4a25      	ldr	r2, [pc, #148]	@ (800104c <fsm_manual_run+0x4c4>)
 8000fb6:	6013      	str	r3, [r2, #0]
				duration_current = duration_yellow;
 8000fb8:	4b24      	ldr	r3, [pc, #144]	@ (800104c <fsm_manual_run+0x4c4>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a24      	ldr	r2, [pc, #144]	@ (8001050 <fsm_manual_run+0x4c8>)
 8000fbe:	6013      	str	r3, [r2, #0]
				updateManualClock(duration_current);
 8000fc0:	4b23      	ldr	r3, [pc, #140]	@ (8001050 <fsm_manual_run+0x4c8>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fbfb 	bl	80007c0 <updateManualClock>
				timer1_flag = 1;
 8000fca:	4b1f      	ldr	r3, [pc, #124]	@ (8001048 <fsm_manual_run+0x4c0>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	601a      	str	r2, [r3, #0]
				setTimer1(TIME_MAN_MODE);
 8000fd0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000fd4:	f000 fc3a 	bl	800184c <setTimer1>
			if (isButton3Pressed() == 1){
 8000fd8:	f7ff f8dc 	bl	8000194 <isButton3Pressed>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d167      	bne.n	80010b2 <fsm_manual_run+0x52a>
				duration_yellow = ((duration_yellow % 100) % 24) * 100;
 8000fe2:	4b1a      	ldr	r3, [pc, #104]	@ (800104c <fsm_manual_run+0x4c4>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a1c      	ldr	r2, [pc, #112]	@ (8001058 <fsm_manual_run+0x4d0>)
 8000fe8:	fb82 1203 	smull	r1, r2, r2, r3
 8000fec:	1151      	asrs	r1, r2, #5
 8000fee:	17da      	asrs	r2, r3, #31
 8000ff0:	1a8a      	subs	r2, r1, r2
 8000ff2:	2164      	movs	r1, #100	@ 0x64
 8000ff4:	fb01 f202 	mul.w	r2, r1, r2
 8000ff8:	1a9a      	subs	r2, r3, r2
 8000ffa:	4b1d      	ldr	r3, [pc, #116]	@ (8001070 <fsm_manual_run+0x4e8>)
 8000ffc:	fb83 1302 	smull	r1, r3, r3, r2
 8001000:	1099      	asrs	r1, r3, #2
 8001002:	17d3      	asrs	r3, r2, #31
 8001004:	1ac9      	subs	r1, r1, r3
 8001006:	460b      	mov	r3, r1
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	440b      	add	r3, r1
 800100c:	00db      	lsls	r3, r3, #3
 800100e:	1ad1      	subs	r1, r2, r3
 8001010:	2364      	movs	r3, #100	@ 0x64
 8001012:	fb01 f303 	mul.w	r3, r1, r3
 8001016:	4a0d      	ldr	r2, [pc, #52]	@ (800104c <fsm_manual_run+0x4c4>)
 8001018:	6013      	str	r3, [r2, #0]
				if (duration_yellow <= 400){
 800101a:	4b0c      	ldr	r3, [pc, #48]	@ (800104c <fsm_manual_run+0x4c4>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001022:	dc27      	bgt.n	8001074 <fsm_manual_run+0x4ec>
					duration_green = duration_yellow;
 8001024:	4b09      	ldr	r3, [pc, #36]	@ (800104c <fsm_manual_run+0x4c4>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a0a      	ldr	r2, [pc, #40]	@ (8001054 <fsm_manual_run+0x4cc>)
 800102a:	6013      	str	r3, [r2, #0]
					duration_red = duration_green + duration_yellow;
 800102c:	4b09      	ldr	r3, [pc, #36]	@ (8001054 <fsm_manual_run+0x4cc>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	4b06      	ldr	r3, [pc, #24]	@ (800104c <fsm_manual_run+0x4c4>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4413      	add	r3, r2
 8001036:	4a0a      	ldr	r2, [pc, #40]	@ (8001060 <fsm_manual_run+0x4d8>)
 8001038:	6013      	str	r3, [r2, #0]
 800103a:	e027      	b.n	800108c <fsm_manual_run+0x504>
 800103c:	200003f0 	.word	0x200003f0
 8001040:	200003ec 	.word	0x200003ec
 8001044:	20000040 	.word	0x20000040
 8001048:	20000444 	.word	0x20000444
 800104c:	20000054 	.word	0x20000054
 8001050:	2000004c 	.word	0x2000004c
 8001054:	20000058 	.word	0x20000058
 8001058:	51eb851f 	.word	0x51eb851f
 800105c:	1b4e81b5 	.word	0x1b4e81b5
 8001060:	20000050 	.word	0x20000050
 8001064:	55555556 	.word	0x55555556
 8001068:	20000044 	.word	0x20000044
 800106c:	20000048 	.word	0x20000048
 8001070:	2aaaaaab 	.word	0x2aaaaaab
					duration_red = (duration_yellow * 4 / 1);
 8001074:	4b24      	ldr	r3, [pc, #144]	@ (8001108 <fsm_manual_run+0x580>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	4a24      	ldr	r2, [pc, #144]	@ (800110c <fsm_manual_run+0x584>)
 800107c:	6013      	str	r3, [r2, #0]
					duration_green = duration_red - duration_yellow;
 800107e:	4b23      	ldr	r3, [pc, #140]	@ (800110c <fsm_manual_run+0x584>)
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	4b21      	ldr	r3, [pc, #132]	@ (8001108 <fsm_manual_run+0x580>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	4a21      	ldr	r2, [pc, #132]	@ (8001110 <fsm_manual_run+0x588>)
 800108a:	6013      	str	r3, [r2, #0]
				status = AUTO_RED_GREEN;
 800108c:	4b21      	ldr	r3, [pc, #132]	@ (8001114 <fsm_manual_run+0x58c>)
 800108e:	2202      	movs	r2, #2
 8001090:	601a      	str	r2, [r3, #0]
				timer1_flag = 1;
 8001092:	4b21      	ldr	r3, [pc, #132]	@ (8001118 <fsm_manual_run+0x590>)
 8001094:	2201      	movs	r2, #1
 8001096:	601a      	str	r2, [r3, #0]
				setTimer1(duration_green);  // Thiết lập lại thời gian
 8001098:	4b1d      	ldr	r3, [pc, #116]	@ (8001110 <fsm_manual_run+0x588>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4618      	mov	r0, r3
 800109e:	f000 fbd5 	bl	800184c <setTimer1>
				duration_road1 = duration_red;
 80010a2:	4b1a      	ldr	r3, [pc, #104]	@ (800110c <fsm_manual_run+0x584>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a1d      	ldr	r2, [pc, #116]	@ (800111c <fsm_manual_run+0x594>)
 80010a8:	6013      	str	r3, [r2, #0]
				duration_road2 = duration_green;
 80010aa:	4b19      	ldr	r3, [pc, #100]	@ (8001110 <fsm_manual_run+0x588>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001120 <fsm_manual_run+0x598>)
 80010b0:	6013      	str	r3, [r2, #0]
			if (timer1_flag == 1) {
 80010b2:	4b19      	ldr	r3, [pc, #100]	@ (8001118 <fsm_manual_run+0x590>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d123      	bne.n	8001102 <fsm_manual_run+0x57a>
				duration_yellow -= duration_add;
 80010ba:	4b13      	ldr	r3, [pc, #76]	@ (8001108 <fsm_manual_run+0x580>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	4b19      	ldr	r3, [pc, #100]	@ (8001124 <fsm_manual_run+0x59c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	4a10      	ldr	r2, [pc, #64]	@ (8001108 <fsm_manual_run+0x580>)
 80010c6:	6013      	str	r3, [r2, #0]
				status = AUTO_RED_GREEN;
 80010c8:	4b12      	ldr	r3, [pc, #72]	@ (8001114 <fsm_manual_run+0x58c>)
 80010ca:	2202      	movs	r2, #2
 80010cc:	601a      	str	r2, [r3, #0]
				timer1_flag = 1;
 80010ce:	4b12      	ldr	r3, [pc, #72]	@ (8001118 <fsm_manual_run+0x590>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	601a      	str	r2, [r3, #0]
				duration_road1 = duration_red;
 80010d4:	4b0d      	ldr	r3, [pc, #52]	@ (800110c <fsm_manual_run+0x584>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a10      	ldr	r2, [pc, #64]	@ (800111c <fsm_manual_run+0x594>)
 80010da:	6013      	str	r3, [r2, #0]
				duration_road2 = duration_green;
 80010dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001110 <fsm_manual_run+0x588>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a0f      	ldr	r2, [pc, #60]	@ (8001120 <fsm_manual_run+0x598>)
 80010e2:	6013      	str	r3, [r2, #0]
				clock_status = CLOCK_DISPLAY;
 80010e4:	4b10      	ldr	r3, [pc, #64]	@ (8001128 <fsm_manual_run+0x5a0>)
 80010e6:	2215      	movs	r2, #21
 80010e8:	601a      	str	r2, [r3, #0]
				setTimer1(duration_green);  // Thiết lập lại bộ đếm thời gian
 80010ea:	4b09      	ldr	r3, [pc, #36]	@ (8001110 <fsm_manual_run+0x588>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f000 fbac 	bl	800184c <setTimer1>
			break;
 80010f4:	e005      	b.n	8001102 <fsm_manual_run+0x57a>
			break;
 80010f6:	bf00      	nop
 80010f8:	e004      	b.n	8001104 <fsm_manual_run+0x57c>
			break;
 80010fa:	bf00      	nop
 80010fc:	e002      	b.n	8001104 <fsm_manual_run+0x57c>
			break;
 80010fe:	bf00      	nop
 8001100:	e000      	b.n	8001104 <fsm_manual_run+0x57c>
			break;
 8001102:	bf00      	nop
	}
}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000054 	.word	0x20000054
 800110c:	20000050 	.word	0x20000050
 8001110:	20000058 	.word	0x20000058
 8001114:	200003ec 	.word	0x200003ec
 8001118:	20000444 	.word	0x20000444
 800111c:	20000044 	.word	0x20000044
 8001120:	20000048 	.word	0x20000048
 8001124:	200003f0 	.word	0x200003f0
 8001128:	20000040 	.word	0x20000040

0800112c <red1_on>:
 *      Author: tangu
 */

#include "led.h"

void red1_on(){
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, GPIO_PIN_RESET);
 8001130:	2200      	movs	r2, #0
 8001132:	2120      	movs	r1, #32
 8001134:	4802      	ldr	r0, [pc, #8]	@ (8001140 <red1_on+0x14>)
 8001136:	f000 ffc2 	bl	80020be <HAL_GPIO_WritePin>
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40010800 	.word	0x40010800

08001144 <red1_off>:
void red1_off(){
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, GPIO_PIN_SET);
 8001148:	2201      	movs	r2, #1
 800114a:	2120      	movs	r1, #32
 800114c:	4802      	ldr	r0, [pc, #8]	@ (8001158 <red1_off+0x14>)
 800114e:	f000 ffb6 	bl	80020be <HAL_GPIO_WritePin>
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40010800 	.word	0x40010800

0800115c <red2_on>:
void red2_on(){
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, GPIO_PIN_RESET);
 8001160:	2200      	movs	r2, #0
 8001162:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001166:	4802      	ldr	r0, [pc, #8]	@ (8001170 <red2_on+0x14>)
 8001168:	f000 ffa9 	bl	80020be <HAL_GPIO_WritePin>
}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40010800 	.word	0x40010800

08001174 <red2_off>:
void red2_off(){
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, GPIO_PIN_SET);
 8001178:	2201      	movs	r2, #1
 800117a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800117e:	4802      	ldr	r0, [pc, #8]	@ (8001188 <red2_off+0x14>)
 8001180:	f000 ff9d 	bl	80020be <HAL_GPIO_WritePin>
}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40010800 	.word	0x40010800

0800118c <yellow1_on>:

void yellow1_on(){
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, GPIO_PIN_RESET);
 8001190:	2200      	movs	r2, #0
 8001192:	2140      	movs	r1, #64	@ 0x40
 8001194:	4802      	ldr	r0, [pc, #8]	@ (80011a0 <yellow1_on+0x14>)
 8001196:	f000 ff92 	bl	80020be <HAL_GPIO_WritePin>
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40010800 	.word	0x40010800

080011a4 <yellow1_off>:
void yellow1_off(){
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, GPIO_PIN_SET);
 80011a8:	2201      	movs	r2, #1
 80011aa:	2140      	movs	r1, #64	@ 0x40
 80011ac:	4802      	ldr	r0, [pc, #8]	@ (80011b8 <yellow1_off+0x14>)
 80011ae:	f000 ff86 	bl	80020be <HAL_GPIO_WritePin>
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40010800 	.word	0x40010800

080011bc <yellow2_on>:
void yellow2_on(){
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, GPIO_PIN_RESET);
 80011c0:	2200      	movs	r2, #0
 80011c2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011c6:	4802      	ldr	r0, [pc, #8]	@ (80011d0 <yellow2_on+0x14>)
 80011c8:	f000 ff79 	bl	80020be <HAL_GPIO_WritePin>
}
 80011cc:	bf00      	nop
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40010800 	.word	0x40010800

080011d4 <yellow2_off>:
void yellow2_off(){
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, GPIO_PIN_SET);
 80011d8:	2201      	movs	r2, #1
 80011da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011de:	4802      	ldr	r0, [pc, #8]	@ (80011e8 <yellow2_off+0x14>)
 80011e0:	f000 ff6d 	bl	80020be <HAL_GPIO_WritePin>
}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40010800 	.word	0x40010800

080011ec <green1_on>:

void green1_on(){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, GPIO_PIN_RESET);
 80011f0:	2200      	movs	r2, #0
 80011f2:	2180      	movs	r1, #128	@ 0x80
 80011f4:	4802      	ldr	r0, [pc, #8]	@ (8001200 <green1_on+0x14>)
 80011f6:	f000 ff62 	bl	80020be <HAL_GPIO_WritePin>
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40010800 	.word	0x40010800

08001204 <green1_off>:
void green1_off(){
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, GPIO_PIN_SET);
 8001208:	2201      	movs	r2, #1
 800120a:	2180      	movs	r1, #128	@ 0x80
 800120c:	4802      	ldr	r0, [pc, #8]	@ (8001218 <green1_off+0x14>)
 800120e:	f000 ff56 	bl	80020be <HAL_GPIO_WritePin>
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40010800 	.word	0x40010800

0800121c <green2_on>:
void green2_on(){
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, GPIO_PIN_RESET);
 8001220:	2200      	movs	r2, #0
 8001222:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001226:	4802      	ldr	r0, [pc, #8]	@ (8001230 <green2_on+0x14>)
 8001228:	f000 ff49 	bl	80020be <HAL_GPIO_WritePin>
}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40010800 	.word	0x40010800

08001234 <green2_off>:
void green2_off(){
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, GPIO_PIN_SET);
 8001238:	2201      	movs	r2, #1
 800123a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800123e:	4802      	ldr	r0, [pc, #8]	@ (8001248 <green2_off+0x14>)
 8001240:	f000 ff3d 	bl	80020be <HAL_GPIO_WritePin>
}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40010800 	.word	0x40010800

0800124c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001250:	f000 fc32 	bl	8001ab8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001254:	f000 f826 	bl	80012a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001258:	f000 f8ac 	bl	80013b4 <MX_GPIO_Init>
  MX_TIM2_Init();
 800125c:	f000 f85e 	bl	800131c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  SCH_Init();
 8001260:	f7ff f882 	bl	8000368 <SCH_Init>
  	status = INIT;
 8001264:	4b0c      	ldr	r3, [pc, #48]	@ (8001298 <main+0x4c>)
 8001266:	2201      	movs	r2, #1
 8001268:	601a      	str	r2, [r3, #0]
  	SCH_Add_Task(fsm_automatic_run,200, 100);
 800126a:	2264      	movs	r2, #100	@ 0x64
 800126c:	21c8      	movs	r1, #200	@ 0xc8
 800126e:	480b      	ldr	r0, [pc, #44]	@ (800129c <main+0x50>)
 8001270:	f7ff f92a 	bl	80004c8 <SCH_Add_Task>
  	SCH_Add_Task(fsm_manual_run, 300, 500);
 8001274:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001278:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800127c:	4808      	ldr	r0, [pc, #32]	@ (80012a0 <main+0x54>)
 800127e:	f7ff f923 	bl	80004c8 <SCH_Add_Task>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
//	  SCH_Dispatch_Tasks();
	  fsm_automatic_run();
 8001282:	f7ff fb37 	bl	80008f4 <fsm_automatic_run>
	  fsm_manual_run();
 8001286:	f7ff fc7f 	bl	8000b88 <fsm_manual_run>
	  displayClock();
 800128a:	f7ff fb05 	bl	8000898 <displayClock>
	  realTimeClock();
 800128e:	f7ff facb 	bl	8000828 <realTimeClock>
	  fsm_automatic_run();
 8001292:	bf00      	nop
 8001294:	e7f5      	b.n	8001282 <main+0x36>
 8001296:	bf00      	nop
 8001298:	200003ec 	.word	0x200003ec
 800129c:	080008f5 	.word	0x080008f5
 80012a0:	08000b89 	.word	0x08000b89

080012a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b090      	sub	sp, #64	@ 0x40
 80012a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012aa:	f107 0318 	add.w	r3, r7, #24
 80012ae:	2228      	movs	r2, #40	@ 0x28
 80012b0:	2100      	movs	r1, #0
 80012b2:	4618      	mov	r0, r3
 80012b4:	f001 fe88 	bl	8002fc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	60da      	str	r2, [r3, #12]
 80012c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012c6:	2302      	movs	r3, #2
 80012c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012ca:	2301      	movs	r3, #1
 80012cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012ce:	2310      	movs	r3, #16
 80012d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012d2:	2300      	movs	r3, #0
 80012d4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d6:	f107 0318 	add.w	r3, r7, #24
 80012da:	4618      	mov	r0, r3
 80012dc:	f000 ff08 	bl	80020f0 <HAL_RCC_OscConfig>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <SystemClock_Config+0x46>
  {
    Error_Handler();
 80012e6:	f000 f8e5 	bl	80014b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ea:	230f      	movs	r3, #15
 80012ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012ee:	2300      	movs	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012f6:	2300      	movs	r3, #0
 80012f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f001 f976 	bl	80025f4 <HAL_RCC_ClockConfig>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800130e:	f000 f8d1 	bl	80014b4 <Error_Handler>
  }
}
 8001312:	bf00      	nop
 8001314:	3740      	adds	r7, #64	@ 0x40
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001322:	f107 0308 	add.w	r3, r7, #8
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001330:	463b      	mov	r3, r7
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001338:	4b1d      	ldr	r3, [pc, #116]	@ (80013b0 <MX_TIM2_Init+0x94>)
 800133a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800133e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001340:	4b1b      	ldr	r3, [pc, #108]	@ (80013b0 <MX_TIM2_Init+0x94>)
 8001342:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001346:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001348:	4b19      	ldr	r3, [pc, #100]	@ (80013b0 <MX_TIM2_Init+0x94>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800134e:	4b18      	ldr	r3, [pc, #96]	@ (80013b0 <MX_TIM2_Init+0x94>)
 8001350:	2209      	movs	r2, #9
 8001352:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001354:	4b16      	ldr	r3, [pc, #88]	@ (80013b0 <MX_TIM2_Init+0x94>)
 8001356:	2200      	movs	r2, #0
 8001358:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800135a:	4b15      	ldr	r3, [pc, #84]	@ (80013b0 <MX_TIM2_Init+0x94>)
 800135c:	2200      	movs	r2, #0
 800135e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001360:	4813      	ldr	r0, [pc, #76]	@ (80013b0 <MX_TIM2_Init+0x94>)
 8001362:	f001 faa3 	bl	80028ac <HAL_TIM_Base_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800136c:	f000 f8a2 	bl	80014b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001370:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001374:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001376:	f107 0308 	add.w	r3, r7, #8
 800137a:	4619      	mov	r1, r3
 800137c:	480c      	ldr	r0, [pc, #48]	@ (80013b0 <MX_TIM2_Init+0x94>)
 800137e:	f001 fbd4 	bl	8002b2a <HAL_TIM_ConfigClockSource>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001388:	f000 f894 	bl	80014b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800138c:	2300      	movs	r3, #0
 800138e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001390:	2300      	movs	r3, #0
 8001392:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001394:	463b      	mov	r3, r7
 8001396:	4619      	mov	r1, r3
 8001398:	4805      	ldr	r0, [pc, #20]	@ (80013b0 <MX_TIM2_Init+0x94>)
 800139a:	f001 fdab 	bl	8002ef4 <HAL_TIMEx_MasterConfigSynchronization>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80013a4:	f000 f886 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013a8:	bf00      	nop
 80013aa:	3718      	adds	r7, #24
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	200003f8 	.word	0x200003f8

080013b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ba:	f107 0308 	add.w	r3, r7, #8
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c8:	4b2e      	ldr	r3, [pc, #184]	@ (8001484 <MX_GPIO_Init+0xd0>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	4a2d      	ldr	r2, [pc, #180]	@ (8001484 <MX_GPIO_Init+0xd0>)
 80013ce:	f043 0304 	orr.w	r3, r3, #4
 80013d2:	6193      	str	r3, [r2, #24]
 80013d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001484 <MX_GPIO_Init+0xd0>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e0:	4b28      	ldr	r3, [pc, #160]	@ (8001484 <MX_GPIO_Init+0xd0>)
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	4a27      	ldr	r2, [pc, #156]	@ (8001484 <MX_GPIO_Init+0xd0>)
 80013e6:	f043 0308 	orr.w	r3, r3, #8
 80013ea:	6193      	str	r3, [r2, #24]
 80013ec:	4b25      	ldr	r3, [pc, #148]	@ (8001484 <MX_GPIO_Init+0xd0>)
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	f003 0308 	and.w	r3, r3, #8
 80013f4:	603b      	str	r3, [r7, #0]
 80013f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 80013f8:	2200      	movs	r2, #0
 80013fa:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80013fe:	4822      	ldr	r0, [pc, #136]	@ (8001488 <MX_GPIO_Init+0xd4>)
 8001400:	f000 fe5d 	bl	80020be <HAL_GPIO_WritePin>
                          |RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
                          |YELLOW2_Pin|GREEN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin, GPIO_PIN_RESET);
 8001404:	2200      	movs	r2, #0
 8001406:	2107      	movs	r1, #7
 8001408:	4820      	ldr	r0, [pc, #128]	@ (800148c <MX_GPIO_Init+0xd8>)
 800140a:	f000 fe58 	bl	80020be <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           RED1_Pin YELLOW1_Pin GREEN1_Pin RED2_Pin
                           YELLOW2_Pin GREEN2_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 800140e:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 8001412:	60bb      	str	r3, [r7, #8]
                          |RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
                          |YELLOW2_Pin|GREEN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001414:	2301      	movs	r3, #1
 8001416:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141c:	2302      	movs	r3, #2
 800141e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001420:	f107 0308 	add.w	r3, r7, #8
 8001424:	4619      	mov	r1, r3
 8001426:	4818      	ldr	r0, [pc, #96]	@ (8001488 <MX_GPIO_Init+0xd4>)
 8001428:	f000 fcb6 	bl	8001d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin;
 800142c:	2307      	movs	r3, #7
 800142e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001430:	2301      	movs	r3, #1
 8001432:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001438:	2302      	movs	r3, #2
 800143a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143c:	f107 0308 	add.w	r3, r7, #8
 8001440:	4619      	mov	r1, r3
 8001442:	4812      	ldr	r0, [pc, #72]	@ (800148c <MX_GPIO_Init+0xd8>)
 8001444:	f000 fca8 	bl	8001d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8001448:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800144c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800144e:	2300      	movs	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001452:	2301      	movs	r3, #1
 8001454:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001456:	f107 0308 	add.w	r3, r7, #8
 800145a:	4619      	mov	r1, r3
 800145c:	480b      	ldr	r0, [pc, #44]	@ (800148c <MX_GPIO_Init+0xd8>)
 800145e:	f000 fc9b 	bl	8001d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG3_Pin SEG4_Pin SEG5_Pin SEG6_Pin */
  GPIO_InitStruct.Pin = SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin;
 8001462:	2378      	movs	r3, #120	@ 0x78
 8001464:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001466:	2300      	movs	r3, #0
 8001468:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146e:	f107 0308 	add.w	r3, r7, #8
 8001472:	4619      	mov	r1, r3
 8001474:	4805      	ldr	r0, [pc, #20]	@ (800148c <MX_GPIO_Init+0xd8>)
 8001476:	f000 fc8f 	bl	8001d98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800147a:	bf00      	nop
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40021000 	.word	0x40021000
 8001488:	40010800 	.word	0x40010800
 800148c:	40010c00 	.word	0x40010c00

08001490 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
	timerRun();
 8001498:	f000 fa14 	bl	80018c4 <timerRun>
	getKeyInput1();
 800149c:	f7fe feb0 	bl	8000200 <getKeyInput1>
	getKeyInput2();
 80014a0:	f7fe feea 	bl	8000278 <getKeyInput2>
	getKeyInput3();
 80014a4:	f7fe ff24 	bl	80002f0 <getKeyInput3>
	SCH_Update();
 80014a8:	f7fe ff82 	bl	80003b0 <SCH_Update>
}
 80014ac:	bf00      	nop
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014b8:	b672      	cpsid	i
}
 80014ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014bc:	bf00      	nop
 80014be:	e7fd      	b.n	80014bc <Error_Handler+0x8>

080014c0 <display7SEG>:
 *      Author: tangu
 */

#include "seven_segment.h"

void display7SEG(int num){
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
	const int led_on = 0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60fb      	str	r3, [r7, #12]
	const int led_off = 1;
 80014cc:	2301      	movs	r3, #1
 80014ce:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, led_off);
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	461a      	mov	r2, r3
 80014d6:	2101      	movs	r1, #1
 80014d8:	48a9      	ldr	r0, [pc, #676]	@ (8001780 <display7SEG+0x2c0>)
 80014da:	f000 fdf0 	bl	80020be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, led_off);
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	461a      	mov	r2, r3
 80014e4:	2102      	movs	r1, #2
 80014e6:	48a6      	ldr	r0, [pc, #664]	@ (8001780 <display7SEG+0x2c0>)
 80014e8:	f000 fde9 	bl	80020be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, led_off);
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	461a      	mov	r2, r3
 80014f2:	2104      	movs	r1, #4
 80014f4:	48a2      	ldr	r0, [pc, #648]	@ (8001780 <display7SEG+0x2c0>)
 80014f6:	f000 fde2 	bl	80020be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, led_off);
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	461a      	mov	r2, r3
 8001500:	2108      	movs	r1, #8
 8001502:	489f      	ldr	r0, [pc, #636]	@ (8001780 <display7SEG+0x2c0>)
 8001504:	f000 fddb 	bl	80020be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, led_off);
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	b2db      	uxtb	r3, r3
 800150c:	461a      	mov	r2, r3
 800150e:	2110      	movs	r1, #16
 8001510:	489b      	ldr	r0, [pc, #620]	@ (8001780 <display7SEG+0x2c0>)
 8001512:	f000 fdd4 	bl	80020be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, led_off);
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	b2db      	uxtb	r3, r3
 800151a:	461a      	mov	r2, r3
 800151c:	2120      	movs	r1, #32
 800151e:	4898      	ldr	r0, [pc, #608]	@ (8001780 <display7SEG+0x2c0>)
 8001520:	f000 fdcd 	bl	80020be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, led_off);
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	b2db      	uxtb	r3, r3
 8001528:	461a      	mov	r2, r3
 800152a:	2140      	movs	r1, #64	@ 0x40
 800152c:	4894      	ldr	r0, [pc, #592]	@ (8001780 <display7SEG+0x2c0>)
 800152e:	f000 fdc6 	bl	80020be <HAL_GPIO_WritePin>
	switch (num) {
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b09      	cmp	r3, #9
 8001536:	f200 8182 	bhi.w	800183e <display7SEG+0x37e>
 800153a:	a201      	add	r2, pc, #4	@ (adr r2, 8001540 <display7SEG+0x80>)
 800153c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001540:	08001569 	.word	0x08001569
 8001544:	080015cd 	.word	0x080015cd
 8001548:	080015eb 	.word	0x080015eb
 800154c:	08001633 	.word	0x08001633
 8001550:	0800167b 	.word	0x0800167b
 8001554:	080016b5 	.word	0x080016b5
 8001558:	080016fd 	.word	0x080016fd
 800155c:	08001753 	.word	0x08001753
 8001560:	08001785 	.word	0x08001785
 8001564:	080017e9 	.word	0x080017e9
		case 0:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, led_on);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	b2db      	uxtb	r3, r3
 800156c:	461a      	mov	r2, r3
 800156e:	2101      	movs	r1, #1
 8001570:	4883      	ldr	r0, [pc, #524]	@ (8001780 <display7SEG+0x2c0>)
 8001572:	f000 fda4 	bl	80020be <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, led_on);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	b2db      	uxtb	r3, r3
 800157a:	461a      	mov	r2, r3
 800157c:	2102      	movs	r1, #2
 800157e:	4880      	ldr	r0, [pc, #512]	@ (8001780 <display7SEG+0x2c0>)
 8001580:	f000 fd9d 	bl	80020be <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, led_on);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	b2db      	uxtb	r3, r3
 8001588:	461a      	mov	r2, r3
 800158a:	2104      	movs	r1, #4
 800158c:	487c      	ldr	r0, [pc, #496]	@ (8001780 <display7SEG+0x2c0>)
 800158e:	f000 fd96 	bl	80020be <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, led_on);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	b2db      	uxtb	r3, r3
 8001596:	461a      	mov	r2, r3
 8001598:	2108      	movs	r1, #8
 800159a:	4879      	ldr	r0, [pc, #484]	@ (8001780 <display7SEG+0x2c0>)
 800159c:	f000 fd8f 	bl	80020be <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, led_on);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	461a      	mov	r2, r3
 80015a6:	2110      	movs	r1, #16
 80015a8:	4875      	ldr	r0, [pc, #468]	@ (8001780 <display7SEG+0x2c0>)
 80015aa:	f000 fd88 	bl	80020be <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, led_on);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	461a      	mov	r2, r3
 80015b4:	2120      	movs	r1, #32
 80015b6:	4872      	ldr	r0, [pc, #456]	@ (8001780 <display7SEG+0x2c0>)
 80015b8:	f000 fd81 	bl	80020be <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, led_off);
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	461a      	mov	r2, r3
 80015c2:	2140      	movs	r1, #64	@ 0x40
 80015c4:	486e      	ldr	r0, [pc, #440]	@ (8001780 <display7SEG+0x2c0>)
 80015c6:	f000 fd7a 	bl	80020be <HAL_GPIO_WritePin>
			break;
 80015ca:	e139      	b.n	8001840 <display7SEG+0x380>
		case 1:
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, led_on);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	461a      	mov	r2, r3
 80015d2:	2102      	movs	r1, #2
 80015d4:	486a      	ldr	r0, [pc, #424]	@ (8001780 <display7SEG+0x2c0>)
 80015d6:	f000 fd72 	bl	80020be <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, led_on);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	461a      	mov	r2, r3
 80015e0:	2104      	movs	r1, #4
 80015e2:	4867      	ldr	r0, [pc, #412]	@ (8001780 <display7SEG+0x2c0>)
 80015e4:	f000 fd6b 	bl	80020be <HAL_GPIO_WritePin>
			break;
 80015e8:	e12a      	b.n	8001840 <display7SEG+0x380>
		case 2:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, led_on);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	461a      	mov	r2, r3
 80015f0:	2101      	movs	r1, #1
 80015f2:	4863      	ldr	r0, [pc, #396]	@ (8001780 <display7SEG+0x2c0>)
 80015f4:	f000 fd63 	bl	80020be <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, led_on);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	461a      	mov	r2, r3
 80015fe:	2102      	movs	r1, #2
 8001600:	485f      	ldr	r0, [pc, #380]	@ (8001780 <display7SEG+0x2c0>)
 8001602:	f000 fd5c 	bl	80020be <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, led_on);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	b2db      	uxtb	r3, r3
 800160a:	461a      	mov	r2, r3
 800160c:	2108      	movs	r1, #8
 800160e:	485c      	ldr	r0, [pc, #368]	@ (8001780 <display7SEG+0x2c0>)
 8001610:	f000 fd55 	bl	80020be <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, led_on);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	b2db      	uxtb	r3, r3
 8001618:	461a      	mov	r2, r3
 800161a:	2110      	movs	r1, #16
 800161c:	4858      	ldr	r0, [pc, #352]	@ (8001780 <display7SEG+0x2c0>)
 800161e:	f000 fd4e 	bl	80020be <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, led_on);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	b2db      	uxtb	r3, r3
 8001626:	461a      	mov	r2, r3
 8001628:	2140      	movs	r1, #64	@ 0x40
 800162a:	4855      	ldr	r0, [pc, #340]	@ (8001780 <display7SEG+0x2c0>)
 800162c:	f000 fd47 	bl	80020be <HAL_GPIO_WritePin>
			break;
 8001630:	e106      	b.n	8001840 <display7SEG+0x380>
		case 3:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, led_on);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	b2db      	uxtb	r3, r3
 8001636:	461a      	mov	r2, r3
 8001638:	2101      	movs	r1, #1
 800163a:	4851      	ldr	r0, [pc, #324]	@ (8001780 <display7SEG+0x2c0>)
 800163c:	f000 fd3f 	bl	80020be <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, led_on);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	b2db      	uxtb	r3, r3
 8001644:	461a      	mov	r2, r3
 8001646:	2102      	movs	r1, #2
 8001648:	484d      	ldr	r0, [pc, #308]	@ (8001780 <display7SEG+0x2c0>)
 800164a:	f000 fd38 	bl	80020be <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, led_on);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	b2db      	uxtb	r3, r3
 8001652:	461a      	mov	r2, r3
 8001654:	2104      	movs	r1, #4
 8001656:	484a      	ldr	r0, [pc, #296]	@ (8001780 <display7SEG+0x2c0>)
 8001658:	f000 fd31 	bl	80020be <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, led_on);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	b2db      	uxtb	r3, r3
 8001660:	461a      	mov	r2, r3
 8001662:	2108      	movs	r1, #8
 8001664:	4846      	ldr	r0, [pc, #280]	@ (8001780 <display7SEG+0x2c0>)
 8001666:	f000 fd2a 	bl	80020be <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, led_on);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	b2db      	uxtb	r3, r3
 800166e:	461a      	mov	r2, r3
 8001670:	2140      	movs	r1, #64	@ 0x40
 8001672:	4843      	ldr	r0, [pc, #268]	@ (8001780 <display7SEG+0x2c0>)
 8001674:	f000 fd23 	bl	80020be <HAL_GPIO_WritePin>
			break;
 8001678:	e0e2      	b.n	8001840 <display7SEG+0x380>
		case 4:
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, led_on);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	b2db      	uxtb	r3, r3
 800167e:	461a      	mov	r2, r3
 8001680:	2102      	movs	r1, #2
 8001682:	483f      	ldr	r0, [pc, #252]	@ (8001780 <display7SEG+0x2c0>)
 8001684:	f000 fd1b 	bl	80020be <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, led_on);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	b2db      	uxtb	r3, r3
 800168c:	461a      	mov	r2, r3
 800168e:	2104      	movs	r1, #4
 8001690:	483b      	ldr	r0, [pc, #236]	@ (8001780 <display7SEG+0x2c0>)
 8001692:	f000 fd14 	bl	80020be <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, led_on);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	b2db      	uxtb	r3, r3
 800169a:	461a      	mov	r2, r3
 800169c:	2120      	movs	r1, #32
 800169e:	4838      	ldr	r0, [pc, #224]	@ (8001780 <display7SEG+0x2c0>)
 80016a0:	f000 fd0d 	bl	80020be <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, led_on);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	461a      	mov	r2, r3
 80016aa:	2140      	movs	r1, #64	@ 0x40
 80016ac:	4834      	ldr	r0, [pc, #208]	@ (8001780 <display7SEG+0x2c0>)
 80016ae:	f000 fd06 	bl	80020be <HAL_GPIO_WritePin>
			break;
 80016b2:	e0c5      	b.n	8001840 <display7SEG+0x380>
		case 5:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, led_on);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	461a      	mov	r2, r3
 80016ba:	2101      	movs	r1, #1
 80016bc:	4830      	ldr	r0, [pc, #192]	@ (8001780 <display7SEG+0x2c0>)
 80016be:	f000 fcfe 	bl	80020be <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, led_on);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	461a      	mov	r2, r3
 80016c8:	2104      	movs	r1, #4
 80016ca:	482d      	ldr	r0, [pc, #180]	@ (8001780 <display7SEG+0x2c0>)
 80016cc:	f000 fcf7 	bl	80020be <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, led_on);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	461a      	mov	r2, r3
 80016d6:	2108      	movs	r1, #8
 80016d8:	4829      	ldr	r0, [pc, #164]	@ (8001780 <display7SEG+0x2c0>)
 80016da:	f000 fcf0 	bl	80020be <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, led_on);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	461a      	mov	r2, r3
 80016e4:	2120      	movs	r1, #32
 80016e6:	4826      	ldr	r0, [pc, #152]	@ (8001780 <display7SEG+0x2c0>)
 80016e8:	f000 fce9 	bl	80020be <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, led_on);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	461a      	mov	r2, r3
 80016f2:	2140      	movs	r1, #64	@ 0x40
 80016f4:	4822      	ldr	r0, [pc, #136]	@ (8001780 <display7SEG+0x2c0>)
 80016f6:	f000 fce2 	bl	80020be <HAL_GPIO_WritePin>
			break;
 80016fa:	e0a1      	b.n	8001840 <display7SEG+0x380>
		case 6:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, led_on);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	461a      	mov	r2, r3
 8001702:	2101      	movs	r1, #1
 8001704:	481e      	ldr	r0, [pc, #120]	@ (8001780 <display7SEG+0x2c0>)
 8001706:	f000 fcda 	bl	80020be <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, led_on);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	b2db      	uxtb	r3, r3
 800170e:	461a      	mov	r2, r3
 8001710:	2104      	movs	r1, #4
 8001712:	481b      	ldr	r0, [pc, #108]	@ (8001780 <display7SEG+0x2c0>)
 8001714:	f000 fcd3 	bl	80020be <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, led_on);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	b2db      	uxtb	r3, r3
 800171c:	461a      	mov	r2, r3
 800171e:	2108      	movs	r1, #8
 8001720:	4817      	ldr	r0, [pc, #92]	@ (8001780 <display7SEG+0x2c0>)
 8001722:	f000 fccc 	bl	80020be <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, led_on);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	b2db      	uxtb	r3, r3
 800172a:	461a      	mov	r2, r3
 800172c:	2110      	movs	r1, #16
 800172e:	4814      	ldr	r0, [pc, #80]	@ (8001780 <display7SEG+0x2c0>)
 8001730:	f000 fcc5 	bl	80020be <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, led_on);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	b2db      	uxtb	r3, r3
 8001738:	461a      	mov	r2, r3
 800173a:	2120      	movs	r1, #32
 800173c:	4810      	ldr	r0, [pc, #64]	@ (8001780 <display7SEG+0x2c0>)
 800173e:	f000 fcbe 	bl	80020be <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, led_on);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	b2db      	uxtb	r3, r3
 8001746:	461a      	mov	r2, r3
 8001748:	2140      	movs	r1, #64	@ 0x40
 800174a:	480d      	ldr	r0, [pc, #52]	@ (8001780 <display7SEG+0x2c0>)
 800174c:	f000 fcb7 	bl	80020be <HAL_GPIO_WritePin>
			break;
 8001750:	e076      	b.n	8001840 <display7SEG+0x380>
		case 7:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, led_on);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	b2db      	uxtb	r3, r3
 8001756:	461a      	mov	r2, r3
 8001758:	2101      	movs	r1, #1
 800175a:	4809      	ldr	r0, [pc, #36]	@ (8001780 <display7SEG+0x2c0>)
 800175c:	f000 fcaf 	bl	80020be <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, led_on);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	b2db      	uxtb	r3, r3
 8001764:	461a      	mov	r2, r3
 8001766:	2102      	movs	r1, #2
 8001768:	4805      	ldr	r0, [pc, #20]	@ (8001780 <display7SEG+0x2c0>)
 800176a:	f000 fca8 	bl	80020be <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, led_on);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	b2db      	uxtb	r3, r3
 8001772:	461a      	mov	r2, r3
 8001774:	2104      	movs	r1, #4
 8001776:	4802      	ldr	r0, [pc, #8]	@ (8001780 <display7SEG+0x2c0>)
 8001778:	f000 fca1 	bl	80020be <HAL_GPIO_WritePin>
			break;
 800177c:	e060      	b.n	8001840 <display7SEG+0x380>
 800177e:	bf00      	nop
 8001780:	40010c00 	.word	0x40010c00
		case 8:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, led_on);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	b2db      	uxtb	r3, r3
 8001788:	461a      	mov	r2, r3
 800178a:	2101      	movs	r1, #1
 800178c:	482e      	ldr	r0, [pc, #184]	@ (8001848 <display7SEG+0x388>)
 800178e:	f000 fc96 	bl	80020be <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, led_on);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	b2db      	uxtb	r3, r3
 8001796:	461a      	mov	r2, r3
 8001798:	2102      	movs	r1, #2
 800179a:	482b      	ldr	r0, [pc, #172]	@ (8001848 <display7SEG+0x388>)
 800179c:	f000 fc8f 	bl	80020be <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, led_on);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	461a      	mov	r2, r3
 80017a6:	2104      	movs	r1, #4
 80017a8:	4827      	ldr	r0, [pc, #156]	@ (8001848 <display7SEG+0x388>)
 80017aa:	f000 fc88 	bl	80020be <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, led_on);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	461a      	mov	r2, r3
 80017b4:	2108      	movs	r1, #8
 80017b6:	4824      	ldr	r0, [pc, #144]	@ (8001848 <display7SEG+0x388>)
 80017b8:	f000 fc81 	bl	80020be <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, led_on);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	461a      	mov	r2, r3
 80017c2:	2110      	movs	r1, #16
 80017c4:	4820      	ldr	r0, [pc, #128]	@ (8001848 <display7SEG+0x388>)
 80017c6:	f000 fc7a 	bl	80020be <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, led_on);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	461a      	mov	r2, r3
 80017d0:	2120      	movs	r1, #32
 80017d2:	481d      	ldr	r0, [pc, #116]	@ (8001848 <display7SEG+0x388>)
 80017d4:	f000 fc73 	bl	80020be <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, led_on);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	461a      	mov	r2, r3
 80017de:	2140      	movs	r1, #64	@ 0x40
 80017e0:	4819      	ldr	r0, [pc, #100]	@ (8001848 <display7SEG+0x388>)
 80017e2:	f000 fc6c 	bl	80020be <HAL_GPIO_WritePin>
			break;
 80017e6:	e02b      	b.n	8001840 <display7SEG+0x380>
		case 9:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, led_on);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	461a      	mov	r2, r3
 80017ee:	2101      	movs	r1, #1
 80017f0:	4815      	ldr	r0, [pc, #84]	@ (8001848 <display7SEG+0x388>)
 80017f2:	f000 fc64 	bl	80020be <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, led_on);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	461a      	mov	r2, r3
 80017fc:	2102      	movs	r1, #2
 80017fe:	4812      	ldr	r0, [pc, #72]	@ (8001848 <display7SEG+0x388>)
 8001800:	f000 fc5d 	bl	80020be <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, led_on);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	b2db      	uxtb	r3, r3
 8001808:	461a      	mov	r2, r3
 800180a:	2104      	movs	r1, #4
 800180c:	480e      	ldr	r0, [pc, #56]	@ (8001848 <display7SEG+0x388>)
 800180e:	f000 fc56 	bl	80020be <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, led_on);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	b2db      	uxtb	r3, r3
 8001816:	461a      	mov	r2, r3
 8001818:	2108      	movs	r1, #8
 800181a:	480b      	ldr	r0, [pc, #44]	@ (8001848 <display7SEG+0x388>)
 800181c:	f000 fc4f 	bl	80020be <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, led_on);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	b2db      	uxtb	r3, r3
 8001824:	461a      	mov	r2, r3
 8001826:	2120      	movs	r1, #32
 8001828:	4807      	ldr	r0, [pc, #28]	@ (8001848 <display7SEG+0x388>)
 800182a:	f000 fc48 	bl	80020be <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, led_on);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	b2db      	uxtb	r3, r3
 8001832:	461a      	mov	r2, r3
 8001834:	2140      	movs	r1, #64	@ 0x40
 8001836:	4804      	ldr	r0, [pc, #16]	@ (8001848 <display7SEG+0x388>)
 8001838:	f000 fc41 	bl	80020be <HAL_GPIO_WritePin>
			break;
 800183c:	e000      	b.n	8001840 <display7SEG+0x380>
		default:
			break;
 800183e:	bf00      	nop
	}
}
 8001840:	bf00      	nop
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40010c00 	.word	0x40010c00

0800184c <setTimer1>:
int timer2_counter = 0;
int timer2_flag = 0;
int timer3_counter = 0;
int timer3_flag = 0;

void setTimer1(int duration){
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 8001854:	4a05      	ldr	r2, [pc, #20]	@ (800186c <setTimer1+0x20>)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800185a:	4b05      	ldr	r3, [pc, #20]	@ (8001870 <setTimer1+0x24>)
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	bc80      	pop	{r7}
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	20000440 	.word	0x20000440
 8001870:	20000444 	.word	0x20000444

08001874 <setTimer2>:

void setTimer2(int duration){
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 800187c:	4a05      	ldr	r2, [pc, #20]	@ (8001894 <setTimer2+0x20>)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001882:	4b05      	ldr	r3, [pc, #20]	@ (8001898 <setTimer2+0x24>)
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	bc80      	pop	{r7}
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	20000448 	.word	0x20000448
 8001898:	2000044c 	.word	0x2000044c

0800189c <setTimer3>:

void setTimer3(int duration){
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 80018a4:	4a05      	ldr	r2, [pc, #20]	@ (80018bc <setTimer3+0x20>)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 80018aa:	4b05      	ldr	r3, [pc, #20]	@ (80018c0 <setTimer3+0x24>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	20000450 	.word	0x20000450
 80018c0:	20000454 	.word	0x20000454

080018c4 <timerRun>:

void timerRun(){
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
	if (timer1_counter > 0){
 80018c8:	4b19      	ldr	r3, [pc, #100]	@ (8001930 <timerRun+0x6c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	dd0b      	ble.n	80018e8 <timerRun+0x24>
		timer1_counter--;
 80018d0:	4b17      	ldr	r3, [pc, #92]	@ (8001930 <timerRun+0x6c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	3b01      	subs	r3, #1
 80018d6:	4a16      	ldr	r2, [pc, #88]	@ (8001930 <timerRun+0x6c>)
 80018d8:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0){
 80018da:	4b15      	ldr	r3, [pc, #84]	@ (8001930 <timerRun+0x6c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	dc02      	bgt.n	80018e8 <timerRun+0x24>
			timer1_flag = 1;
 80018e2:	4b14      	ldr	r3, [pc, #80]	@ (8001934 <timerRun+0x70>)
 80018e4:	2201      	movs	r2, #1
 80018e6:	601a      	str	r2, [r3, #0]
		}
	}

	if (timer2_counter > 0){
 80018e8:	4b13      	ldr	r3, [pc, #76]	@ (8001938 <timerRun+0x74>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	dd0b      	ble.n	8001908 <timerRun+0x44>
		timer2_counter--;
 80018f0:	4b11      	ldr	r3, [pc, #68]	@ (8001938 <timerRun+0x74>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	3b01      	subs	r3, #1
 80018f6:	4a10      	ldr	r2, [pc, #64]	@ (8001938 <timerRun+0x74>)
 80018f8:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0){
 80018fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001938 <timerRun+0x74>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	dc02      	bgt.n	8001908 <timerRun+0x44>
			timer2_flag = 1;
 8001902:	4b0e      	ldr	r3, [pc, #56]	@ (800193c <timerRun+0x78>)
 8001904:	2201      	movs	r2, #1
 8001906:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer3_counter > 0){
 8001908:	4b0d      	ldr	r3, [pc, #52]	@ (8001940 <timerRun+0x7c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	dd0b      	ble.n	8001928 <timerRun+0x64>
		timer3_counter--;
 8001910:	4b0b      	ldr	r3, [pc, #44]	@ (8001940 <timerRun+0x7c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	3b01      	subs	r3, #1
 8001916:	4a0a      	ldr	r2, [pc, #40]	@ (8001940 <timerRun+0x7c>)
 8001918:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0){
 800191a:	4b09      	ldr	r3, [pc, #36]	@ (8001940 <timerRun+0x7c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	dc02      	bgt.n	8001928 <timerRun+0x64>
			timer3_flag = 1;
 8001922:	4b08      	ldr	r3, [pc, #32]	@ (8001944 <timerRun+0x80>)
 8001924:	2201      	movs	r2, #1
 8001926:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr
 8001930:	20000440 	.word	0x20000440
 8001934:	20000444 	.word	0x20000444
 8001938:	20000448 	.word	0x20000448
 800193c:	2000044c 	.word	0x2000044c
 8001940:	20000450 	.word	0x20000450
 8001944:	20000454 	.word	0x20000454

08001948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800194e:	4b15      	ldr	r3, [pc, #84]	@ (80019a4 <HAL_MspInit+0x5c>)
 8001950:	699b      	ldr	r3, [r3, #24]
 8001952:	4a14      	ldr	r2, [pc, #80]	@ (80019a4 <HAL_MspInit+0x5c>)
 8001954:	f043 0301 	orr.w	r3, r3, #1
 8001958:	6193      	str	r3, [r2, #24]
 800195a:	4b12      	ldr	r3, [pc, #72]	@ (80019a4 <HAL_MspInit+0x5c>)
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	60bb      	str	r3, [r7, #8]
 8001964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001966:	4b0f      	ldr	r3, [pc, #60]	@ (80019a4 <HAL_MspInit+0x5c>)
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	4a0e      	ldr	r2, [pc, #56]	@ (80019a4 <HAL_MspInit+0x5c>)
 800196c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001970:	61d3      	str	r3, [r2, #28]
 8001972:	4b0c      	ldr	r3, [pc, #48]	@ (80019a4 <HAL_MspInit+0x5c>)
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800197a:	607b      	str	r3, [r7, #4]
 800197c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800197e:	4b0a      	ldr	r3, [pc, #40]	@ (80019a8 <HAL_MspInit+0x60>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	4a04      	ldr	r2, [pc, #16]	@ (80019a8 <HAL_MspInit+0x60>)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800199a:	bf00      	nop
 800199c:	3714      	adds	r7, #20
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr
 80019a4:	40021000 	.word	0x40021000
 80019a8:	40010000 	.word	0x40010000

080019ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019bc:	d113      	bne.n	80019e6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019be:	4b0c      	ldr	r3, [pc, #48]	@ (80019f0 <HAL_TIM_Base_MspInit+0x44>)
 80019c0:	69db      	ldr	r3, [r3, #28]
 80019c2:	4a0b      	ldr	r2, [pc, #44]	@ (80019f0 <HAL_TIM_Base_MspInit+0x44>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	61d3      	str	r3, [r2, #28]
 80019ca:	4b09      	ldr	r3, [pc, #36]	@ (80019f0 <HAL_TIM_Base_MspInit+0x44>)
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019d6:	2200      	movs	r2, #0
 80019d8:	2100      	movs	r1, #0
 80019da:	201c      	movs	r0, #28
 80019dc:	f000 f9a5 	bl	8001d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019e0:	201c      	movs	r0, #28
 80019e2:	f000 f9be 	bl	8001d62 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80019e6:	bf00      	nop
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40021000 	.word	0x40021000

080019f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019f8:	bf00      	nop
 80019fa:	e7fd      	b.n	80019f8 <NMI_Handler+0x4>

080019fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a00:	bf00      	nop
 8001a02:	e7fd      	b.n	8001a00 <HardFault_Handler+0x4>

08001a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a08:	bf00      	nop
 8001a0a:	e7fd      	b.n	8001a08 <MemManage_Handler+0x4>

08001a0c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a10:	bf00      	nop
 8001a12:	e7fd      	b.n	8001a10 <BusFault_Handler+0x4>

08001a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a18:	bf00      	nop
 8001a1a:	e7fd      	b.n	8001a18 <UsageFault_Handler+0x4>

08001a1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr

08001a28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr

08001a34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr

08001a40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a44:	f000 f87e 	bl	8001b44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a48:	bf00      	nop
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a50:	4802      	ldr	r0, [pc, #8]	@ (8001a5c <TIM2_IRQHandler+0x10>)
 8001a52:	f000 ff7a 	bl	800294a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	200003f8 	.word	0x200003f8

08001a60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a64:	bf00      	nop
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr

08001a6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a6c:	f7ff fff8 	bl	8001a60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a70:	480b      	ldr	r0, [pc, #44]	@ (8001aa0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a72:	490c      	ldr	r1, [pc, #48]	@ (8001aa4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a74:	4a0c      	ldr	r2, [pc, #48]	@ (8001aa8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a78:	e002      	b.n	8001a80 <LoopCopyDataInit>

08001a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a7e:	3304      	adds	r3, #4

08001a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a84:	d3f9      	bcc.n	8001a7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a86:	4a09      	ldr	r2, [pc, #36]	@ (8001aac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a88:	4c09      	ldr	r4, [pc, #36]	@ (8001ab0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a8c:	e001      	b.n	8001a92 <LoopFillZerobss>

08001a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a90:	3204      	adds	r2, #4

08001a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a94:	d3fb      	bcc.n	8001a8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a96:	f001 fa9f 	bl	8002fd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a9a:	f7ff fbd7 	bl	800124c <main>
  bx lr
 8001a9e:	4770      	bx	lr
  ldr r0, =_sdata
 8001aa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aa4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001aa8:	08003064 	.word	0x08003064
  ldr r2, =_sbss
 8001aac:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001ab0:	2000045c 	.word	0x2000045c

08001ab4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ab4:	e7fe      	b.n	8001ab4 <ADC1_2_IRQHandler>
	...

08001ab8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001abc:	4b08      	ldr	r3, [pc, #32]	@ (8001ae0 <HAL_Init+0x28>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a07      	ldr	r2, [pc, #28]	@ (8001ae0 <HAL_Init+0x28>)
 8001ac2:	f043 0310 	orr.w	r3, r3, #16
 8001ac6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ac8:	2003      	movs	r0, #3
 8001aca:	f000 f923 	bl	8001d14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ace:	200f      	movs	r0, #15
 8001ad0:	f000 f808 	bl	8001ae4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ad4:	f7ff ff38 	bl	8001948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40022000 	.word	0x40022000

08001ae4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001aec:	4b12      	ldr	r3, [pc, #72]	@ (8001b38 <HAL_InitTick+0x54>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	4b12      	ldr	r3, [pc, #72]	@ (8001b3c <HAL_InitTick+0x58>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	4619      	mov	r1, r3
 8001af6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001afa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b02:	4618      	mov	r0, r3
 8001b04:	f000 f93b 	bl	8001d7e <HAL_SYSTICK_Config>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e00e      	b.n	8001b30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2b0f      	cmp	r3, #15
 8001b16:	d80a      	bhi.n	8001b2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	6879      	ldr	r1, [r7, #4]
 8001b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b20:	f000 f903 	bl	8001d2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b24:	4a06      	ldr	r2, [pc, #24]	@ (8001b40 <HAL_InitTick+0x5c>)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	e000      	b.n	8001b30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	2000006c 	.word	0x2000006c
 8001b3c:	20000074 	.word	0x20000074
 8001b40:	20000070 	.word	0x20000070

08001b44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b48:	4b05      	ldr	r3, [pc, #20]	@ (8001b60 <HAL_IncTick+0x1c>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	4b05      	ldr	r3, [pc, #20]	@ (8001b64 <HAL_IncTick+0x20>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4413      	add	r3, r2
 8001b54:	4a03      	ldr	r2, [pc, #12]	@ (8001b64 <HAL_IncTick+0x20>)
 8001b56:	6013      	str	r3, [r2, #0]
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr
 8001b60:	20000074 	.word	0x20000074
 8001b64:	20000458 	.word	0x20000458

08001b68 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b6c:	4b02      	ldr	r3, [pc, #8]	@ (8001b78 <HAL_GetTick+0x10>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr
 8001b78:	20000458 	.word	0x20000458

08001b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b92:	68ba      	ldr	r2, [r7, #8]
 8001b94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b98:	4013      	ands	r3, r2
 8001b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ba4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ba8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bae:	4a04      	ldr	r2, [pc, #16]	@ (8001bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	60d3      	str	r3, [r2, #12]
}
 8001bb4:	bf00      	nop
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bc8:	4b04      	ldr	r3, [pc, #16]	@ (8001bdc <__NVIC_GetPriorityGrouping+0x18>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	0a1b      	lsrs	r3, r3, #8
 8001bce:	f003 0307 	and.w	r3, r3, #7
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	db0b      	blt.n	8001c0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	f003 021f 	and.w	r2, r3, #31
 8001bf8:	4906      	ldr	r1, [pc, #24]	@ (8001c14 <__NVIC_EnableIRQ+0x34>)
 8001bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfe:	095b      	lsrs	r3, r3, #5
 8001c00:	2001      	movs	r0, #1
 8001c02:	fa00 f202 	lsl.w	r2, r0, r2
 8001c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr
 8001c14:	e000e100 	.word	0xe000e100

08001c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	6039      	str	r1, [r7, #0]
 8001c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	db0a      	blt.n	8001c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	490c      	ldr	r1, [pc, #48]	@ (8001c64 <__NVIC_SetPriority+0x4c>)
 8001c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c36:	0112      	lsls	r2, r2, #4
 8001c38:	b2d2      	uxtb	r2, r2
 8001c3a:	440b      	add	r3, r1
 8001c3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c40:	e00a      	b.n	8001c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	4908      	ldr	r1, [pc, #32]	@ (8001c68 <__NVIC_SetPriority+0x50>)
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	f003 030f 	and.w	r3, r3, #15
 8001c4e:	3b04      	subs	r3, #4
 8001c50:	0112      	lsls	r2, r2, #4
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	440b      	add	r3, r1
 8001c56:	761a      	strb	r2, [r3, #24]
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bc80      	pop	{r7}
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	e000e100 	.word	0xe000e100
 8001c68:	e000ed00 	.word	0xe000ed00

08001c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b089      	sub	sp, #36	@ 0x24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	f1c3 0307 	rsb	r3, r3, #7
 8001c86:	2b04      	cmp	r3, #4
 8001c88:	bf28      	it	cs
 8001c8a:	2304      	movcs	r3, #4
 8001c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	3304      	adds	r3, #4
 8001c92:	2b06      	cmp	r3, #6
 8001c94:	d902      	bls.n	8001c9c <NVIC_EncodePriority+0x30>
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	3b03      	subs	r3, #3
 8001c9a:	e000      	b.n	8001c9e <NVIC_EncodePriority+0x32>
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43da      	mvns	r2, r3
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	401a      	ands	r2, r3
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	fa01 f303 	lsl.w	r3, r1, r3
 8001cbe:	43d9      	mvns	r1, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc4:	4313      	orrs	r3, r2
         );
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3724      	adds	r7, #36	@ 0x24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr

08001cd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ce0:	d301      	bcc.n	8001ce6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e00f      	b.n	8001d06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ce6:	4a0a      	ldr	r2, [pc, #40]	@ (8001d10 <SysTick_Config+0x40>)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3b01      	subs	r3, #1
 8001cec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cee:	210f      	movs	r1, #15
 8001cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf4:	f7ff ff90 	bl	8001c18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cf8:	4b05      	ldr	r3, [pc, #20]	@ (8001d10 <SysTick_Config+0x40>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cfe:	4b04      	ldr	r3, [pc, #16]	@ (8001d10 <SysTick_Config+0x40>)
 8001d00:	2207      	movs	r2, #7
 8001d02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	e000e010 	.word	0xe000e010

08001d14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f7ff ff2d 	bl	8001b7c <__NVIC_SetPriorityGrouping>
}
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b086      	sub	sp, #24
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	4603      	mov	r3, r0
 8001d32:	60b9      	str	r1, [r7, #8]
 8001d34:	607a      	str	r2, [r7, #4]
 8001d36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d3c:	f7ff ff42 	bl	8001bc4 <__NVIC_GetPriorityGrouping>
 8001d40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	68b9      	ldr	r1, [r7, #8]
 8001d46:	6978      	ldr	r0, [r7, #20]
 8001d48:	f7ff ff90 	bl	8001c6c <NVIC_EncodePriority>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d52:	4611      	mov	r1, r2
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff ff5f 	bl	8001c18 <__NVIC_SetPriority>
}
 8001d5a:	bf00      	nop
 8001d5c:	3718      	adds	r7, #24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b082      	sub	sp, #8
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	4603      	mov	r3, r0
 8001d6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff ff35 	bl	8001be0 <__NVIC_EnableIRQ>
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b082      	sub	sp, #8
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7ff ffa2 	bl	8001cd0 <SysTick_Config>
 8001d8c:	4603      	mov	r3, r0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
	...

08001d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b08b      	sub	sp, #44	@ 0x2c
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001da2:	2300      	movs	r3, #0
 8001da4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001da6:	2300      	movs	r3, #0
 8001da8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001daa:	e161      	b.n	8002070 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001dac:	2201      	movs	r2, #1
 8001dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	69fa      	ldr	r2, [r7, #28]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	f040 8150 	bne.w	800206a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	4a97      	ldr	r2, [pc, #604]	@ (800202c <HAL_GPIO_Init+0x294>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d05e      	beq.n	8001e92 <HAL_GPIO_Init+0xfa>
 8001dd4:	4a95      	ldr	r2, [pc, #596]	@ (800202c <HAL_GPIO_Init+0x294>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d875      	bhi.n	8001ec6 <HAL_GPIO_Init+0x12e>
 8001dda:	4a95      	ldr	r2, [pc, #596]	@ (8002030 <HAL_GPIO_Init+0x298>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d058      	beq.n	8001e92 <HAL_GPIO_Init+0xfa>
 8001de0:	4a93      	ldr	r2, [pc, #588]	@ (8002030 <HAL_GPIO_Init+0x298>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d86f      	bhi.n	8001ec6 <HAL_GPIO_Init+0x12e>
 8001de6:	4a93      	ldr	r2, [pc, #588]	@ (8002034 <HAL_GPIO_Init+0x29c>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d052      	beq.n	8001e92 <HAL_GPIO_Init+0xfa>
 8001dec:	4a91      	ldr	r2, [pc, #580]	@ (8002034 <HAL_GPIO_Init+0x29c>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d869      	bhi.n	8001ec6 <HAL_GPIO_Init+0x12e>
 8001df2:	4a91      	ldr	r2, [pc, #580]	@ (8002038 <HAL_GPIO_Init+0x2a0>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d04c      	beq.n	8001e92 <HAL_GPIO_Init+0xfa>
 8001df8:	4a8f      	ldr	r2, [pc, #572]	@ (8002038 <HAL_GPIO_Init+0x2a0>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d863      	bhi.n	8001ec6 <HAL_GPIO_Init+0x12e>
 8001dfe:	4a8f      	ldr	r2, [pc, #572]	@ (800203c <HAL_GPIO_Init+0x2a4>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d046      	beq.n	8001e92 <HAL_GPIO_Init+0xfa>
 8001e04:	4a8d      	ldr	r2, [pc, #564]	@ (800203c <HAL_GPIO_Init+0x2a4>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d85d      	bhi.n	8001ec6 <HAL_GPIO_Init+0x12e>
 8001e0a:	2b12      	cmp	r3, #18
 8001e0c:	d82a      	bhi.n	8001e64 <HAL_GPIO_Init+0xcc>
 8001e0e:	2b12      	cmp	r3, #18
 8001e10:	d859      	bhi.n	8001ec6 <HAL_GPIO_Init+0x12e>
 8001e12:	a201      	add	r2, pc, #4	@ (adr r2, 8001e18 <HAL_GPIO_Init+0x80>)
 8001e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e18:	08001e93 	.word	0x08001e93
 8001e1c:	08001e6d 	.word	0x08001e6d
 8001e20:	08001e7f 	.word	0x08001e7f
 8001e24:	08001ec1 	.word	0x08001ec1
 8001e28:	08001ec7 	.word	0x08001ec7
 8001e2c:	08001ec7 	.word	0x08001ec7
 8001e30:	08001ec7 	.word	0x08001ec7
 8001e34:	08001ec7 	.word	0x08001ec7
 8001e38:	08001ec7 	.word	0x08001ec7
 8001e3c:	08001ec7 	.word	0x08001ec7
 8001e40:	08001ec7 	.word	0x08001ec7
 8001e44:	08001ec7 	.word	0x08001ec7
 8001e48:	08001ec7 	.word	0x08001ec7
 8001e4c:	08001ec7 	.word	0x08001ec7
 8001e50:	08001ec7 	.word	0x08001ec7
 8001e54:	08001ec7 	.word	0x08001ec7
 8001e58:	08001ec7 	.word	0x08001ec7
 8001e5c:	08001e75 	.word	0x08001e75
 8001e60:	08001e89 	.word	0x08001e89
 8001e64:	4a76      	ldr	r2, [pc, #472]	@ (8002040 <HAL_GPIO_Init+0x2a8>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d013      	beq.n	8001e92 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e6a:	e02c      	b.n	8001ec6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	623b      	str	r3, [r7, #32]
          break;
 8001e72:	e029      	b.n	8001ec8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	3304      	adds	r3, #4
 8001e7a:	623b      	str	r3, [r7, #32]
          break;
 8001e7c:	e024      	b.n	8001ec8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	3308      	adds	r3, #8
 8001e84:	623b      	str	r3, [r7, #32]
          break;
 8001e86:	e01f      	b.n	8001ec8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	330c      	adds	r3, #12
 8001e8e:	623b      	str	r3, [r7, #32]
          break;
 8001e90:	e01a      	b.n	8001ec8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d102      	bne.n	8001ea0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e9a:	2304      	movs	r3, #4
 8001e9c:	623b      	str	r3, [r7, #32]
          break;
 8001e9e:	e013      	b.n	8001ec8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d105      	bne.n	8001eb4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ea8:	2308      	movs	r3, #8
 8001eaa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	69fa      	ldr	r2, [r7, #28]
 8001eb0:	611a      	str	r2, [r3, #16]
          break;
 8001eb2:	e009      	b.n	8001ec8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001eb4:	2308      	movs	r3, #8
 8001eb6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	69fa      	ldr	r2, [r7, #28]
 8001ebc:	615a      	str	r2, [r3, #20]
          break;
 8001ebe:	e003      	b.n	8001ec8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	623b      	str	r3, [r7, #32]
          break;
 8001ec4:	e000      	b.n	8001ec8 <HAL_GPIO_Init+0x130>
          break;
 8001ec6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	2bff      	cmp	r3, #255	@ 0xff
 8001ecc:	d801      	bhi.n	8001ed2 <HAL_GPIO_Init+0x13a>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	e001      	b.n	8001ed6 <HAL_GPIO_Init+0x13e>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	3304      	adds	r3, #4
 8001ed6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	2bff      	cmp	r3, #255	@ 0xff
 8001edc:	d802      	bhi.n	8001ee4 <HAL_GPIO_Init+0x14c>
 8001ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	e002      	b.n	8001eea <HAL_GPIO_Init+0x152>
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee6:	3b08      	subs	r3, #8
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	210f      	movs	r1, #15
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	401a      	ands	r2, r3
 8001efc:	6a39      	ldr	r1, [r7, #32]
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	fa01 f303 	lsl.w	r3, r1, r3
 8001f04:	431a      	orrs	r2, r3
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f000 80a9 	beq.w	800206a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f18:	4b4a      	ldr	r3, [pc, #296]	@ (8002044 <HAL_GPIO_Init+0x2ac>)
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	4a49      	ldr	r2, [pc, #292]	@ (8002044 <HAL_GPIO_Init+0x2ac>)
 8001f1e:	f043 0301 	orr.w	r3, r3, #1
 8001f22:	6193      	str	r3, [r2, #24]
 8001f24:	4b47      	ldr	r3, [pc, #284]	@ (8002044 <HAL_GPIO_Init+0x2ac>)
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	60bb      	str	r3, [r7, #8]
 8001f2e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f30:	4a45      	ldr	r2, [pc, #276]	@ (8002048 <HAL_GPIO_Init+0x2b0>)
 8001f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f34:	089b      	lsrs	r3, r3, #2
 8001f36:	3302      	adds	r3, #2
 8001f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f3c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f40:	f003 0303 	and.w	r3, r3, #3
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	220f      	movs	r2, #15
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	4013      	ands	r3, r2
 8001f52:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a3d      	ldr	r2, [pc, #244]	@ (800204c <HAL_GPIO_Init+0x2b4>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d00d      	beq.n	8001f78 <HAL_GPIO_Init+0x1e0>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a3c      	ldr	r2, [pc, #240]	@ (8002050 <HAL_GPIO_Init+0x2b8>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d007      	beq.n	8001f74 <HAL_GPIO_Init+0x1dc>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a3b      	ldr	r2, [pc, #236]	@ (8002054 <HAL_GPIO_Init+0x2bc>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d101      	bne.n	8001f70 <HAL_GPIO_Init+0x1d8>
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	e004      	b.n	8001f7a <HAL_GPIO_Init+0x1e2>
 8001f70:	2303      	movs	r3, #3
 8001f72:	e002      	b.n	8001f7a <HAL_GPIO_Init+0x1e2>
 8001f74:	2301      	movs	r3, #1
 8001f76:	e000      	b.n	8001f7a <HAL_GPIO_Init+0x1e2>
 8001f78:	2300      	movs	r3, #0
 8001f7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f7c:	f002 0203 	and.w	r2, r2, #3
 8001f80:	0092      	lsls	r2, r2, #2
 8001f82:	4093      	lsls	r3, r2
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f8a:	492f      	ldr	r1, [pc, #188]	@ (8002048 <HAL_GPIO_Init+0x2b0>)
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8e:	089b      	lsrs	r3, r3, #2
 8001f90:	3302      	adds	r3, #2
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d006      	beq.n	8001fb2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fa4:	4b2c      	ldr	r3, [pc, #176]	@ (8002058 <HAL_GPIO_Init+0x2c0>)
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	492b      	ldr	r1, [pc, #172]	@ (8002058 <HAL_GPIO_Init+0x2c0>)
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	608b      	str	r3, [r1, #8]
 8001fb0:	e006      	b.n	8001fc0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fb2:	4b29      	ldr	r3, [pc, #164]	@ (8002058 <HAL_GPIO_Init+0x2c0>)
 8001fb4:	689a      	ldr	r2, [r3, #8]
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	4927      	ldr	r1, [pc, #156]	@ (8002058 <HAL_GPIO_Init+0x2c0>)
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d006      	beq.n	8001fda <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fcc:	4b22      	ldr	r3, [pc, #136]	@ (8002058 <HAL_GPIO_Init+0x2c0>)
 8001fce:	68da      	ldr	r2, [r3, #12]
 8001fd0:	4921      	ldr	r1, [pc, #132]	@ (8002058 <HAL_GPIO_Init+0x2c0>)
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	60cb      	str	r3, [r1, #12]
 8001fd8:	e006      	b.n	8001fe8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fda:	4b1f      	ldr	r3, [pc, #124]	@ (8002058 <HAL_GPIO_Init+0x2c0>)
 8001fdc:	68da      	ldr	r2, [r3, #12]
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	491d      	ldr	r1, [pc, #116]	@ (8002058 <HAL_GPIO_Init+0x2c0>)
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d006      	beq.n	8002002 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ff4:	4b18      	ldr	r3, [pc, #96]	@ (8002058 <HAL_GPIO_Init+0x2c0>)
 8001ff6:	685a      	ldr	r2, [r3, #4]
 8001ff8:	4917      	ldr	r1, [pc, #92]	@ (8002058 <HAL_GPIO_Init+0x2c0>)
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	604b      	str	r3, [r1, #4]
 8002000:	e006      	b.n	8002010 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002002:	4b15      	ldr	r3, [pc, #84]	@ (8002058 <HAL_GPIO_Init+0x2c0>)
 8002004:	685a      	ldr	r2, [r3, #4]
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	43db      	mvns	r3, r3
 800200a:	4913      	ldr	r1, [pc, #76]	@ (8002058 <HAL_GPIO_Init+0x2c0>)
 800200c:	4013      	ands	r3, r2
 800200e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d01f      	beq.n	800205c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800201c:	4b0e      	ldr	r3, [pc, #56]	@ (8002058 <HAL_GPIO_Init+0x2c0>)
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	490d      	ldr	r1, [pc, #52]	@ (8002058 <HAL_GPIO_Init+0x2c0>)
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	4313      	orrs	r3, r2
 8002026:	600b      	str	r3, [r1, #0]
 8002028:	e01f      	b.n	800206a <HAL_GPIO_Init+0x2d2>
 800202a:	bf00      	nop
 800202c:	10320000 	.word	0x10320000
 8002030:	10310000 	.word	0x10310000
 8002034:	10220000 	.word	0x10220000
 8002038:	10210000 	.word	0x10210000
 800203c:	10120000 	.word	0x10120000
 8002040:	10110000 	.word	0x10110000
 8002044:	40021000 	.word	0x40021000
 8002048:	40010000 	.word	0x40010000
 800204c:	40010800 	.word	0x40010800
 8002050:	40010c00 	.word	0x40010c00
 8002054:	40011000 	.word	0x40011000
 8002058:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800205c:	4b0b      	ldr	r3, [pc, #44]	@ (800208c <HAL_GPIO_Init+0x2f4>)
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	43db      	mvns	r3, r3
 8002064:	4909      	ldr	r1, [pc, #36]	@ (800208c <HAL_GPIO_Init+0x2f4>)
 8002066:	4013      	ands	r3, r2
 8002068:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800206a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206c:	3301      	adds	r3, #1
 800206e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002076:	fa22 f303 	lsr.w	r3, r2, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	f47f ae96 	bne.w	8001dac <HAL_GPIO_Init+0x14>
  }
}
 8002080:	bf00      	nop
 8002082:	bf00      	nop
 8002084:	372c      	adds	r7, #44	@ 0x2c
 8002086:	46bd      	mov	sp, r7
 8002088:	bc80      	pop	{r7}
 800208a:	4770      	bx	lr
 800208c:	40010400 	.word	0x40010400

08002090 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	460b      	mov	r3, r1
 800209a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	887b      	ldrh	r3, [r7, #2]
 80020a2:	4013      	ands	r3, r2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d002      	beq.n	80020ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020a8:	2301      	movs	r3, #1
 80020aa:	73fb      	strb	r3, [r7, #15]
 80020ac:	e001      	b.n	80020b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020ae:	2300      	movs	r3, #0
 80020b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3714      	adds	r7, #20
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bc80      	pop	{r7}
 80020bc:	4770      	bx	lr

080020be <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020be:	b480      	push	{r7}
 80020c0:	b083      	sub	sp, #12
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
 80020c6:	460b      	mov	r3, r1
 80020c8:	807b      	strh	r3, [r7, #2]
 80020ca:	4613      	mov	r3, r2
 80020cc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020ce:	787b      	ldrb	r3, [r7, #1]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d003      	beq.n	80020dc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020d4:	887a      	ldrh	r2, [r7, #2]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020da:	e003      	b.n	80020e4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020dc:	887b      	ldrh	r3, [r7, #2]
 80020de:	041a      	lsls	r2, r3, #16
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	611a      	str	r2, [r3, #16]
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bc80      	pop	{r7}
 80020ec:	4770      	bx	lr
	...

080020f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e272      	b.n	80025e8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b00      	cmp	r3, #0
 800210c:	f000 8087 	beq.w	800221e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002110:	4b92      	ldr	r3, [pc, #584]	@ (800235c <HAL_RCC_OscConfig+0x26c>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f003 030c 	and.w	r3, r3, #12
 8002118:	2b04      	cmp	r3, #4
 800211a:	d00c      	beq.n	8002136 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800211c:	4b8f      	ldr	r3, [pc, #572]	@ (800235c <HAL_RCC_OscConfig+0x26c>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 030c 	and.w	r3, r3, #12
 8002124:	2b08      	cmp	r3, #8
 8002126:	d112      	bne.n	800214e <HAL_RCC_OscConfig+0x5e>
 8002128:	4b8c      	ldr	r3, [pc, #560]	@ (800235c <HAL_RCC_OscConfig+0x26c>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002130:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002134:	d10b      	bne.n	800214e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002136:	4b89      	ldr	r3, [pc, #548]	@ (800235c <HAL_RCC_OscConfig+0x26c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d06c      	beq.n	800221c <HAL_RCC_OscConfig+0x12c>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d168      	bne.n	800221c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e24c      	b.n	80025e8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002156:	d106      	bne.n	8002166 <HAL_RCC_OscConfig+0x76>
 8002158:	4b80      	ldr	r3, [pc, #512]	@ (800235c <HAL_RCC_OscConfig+0x26c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a7f      	ldr	r2, [pc, #508]	@ (800235c <HAL_RCC_OscConfig+0x26c>)
 800215e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002162:	6013      	str	r3, [r2, #0]
 8002164:	e02e      	b.n	80021c4 <HAL_RCC_OscConfig+0xd4>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d10c      	bne.n	8002188 <HAL_RCC_OscConfig+0x98>
 800216e:	4b7b      	ldr	r3, [pc, #492]	@ (800235c <HAL_RCC_OscConfig+0x26c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a7a      	ldr	r2, [pc, #488]	@ (800235c <HAL_RCC_OscConfig+0x26c>)
 8002174:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002178:	6013      	str	r3, [r2, #0]
 800217a:	4b78      	ldr	r3, [pc, #480]	@ (800235c <HAL_RCC_OscConfig+0x26c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a77      	ldr	r2, [pc, #476]	@ (800235c <HAL_RCC_OscConfig+0x26c>)
 8002180:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002184:	6013      	str	r3, [r2, #0]
 8002186:	e01d      	b.n	80021c4 <HAL_RCC_OscConfig+0xd4>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002190:	d10c      	bne.n	80021ac <HAL_RCC_OscConfig+0xbc>
 8002192:	4b72      	ldr	r3, [pc, #456]	@ (800235c <HAL_RCC_OscConfig+0x26c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a71      	ldr	r2, [pc, #452]	@ (800235c <HAL_RCC_OscConfig+0x26c>)
 8002198:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800219c:	6013      	str	r3, [r2, #0]
 800219e:	4b6f      	ldr	r3, [pc, #444]	@ (800235c <HAL_RCC_OscConfig+0x26c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a6e      	ldr	r2, [pc, #440]	@ (800235c <HAL_RCC_OscConfig+0x26c>)
 80021a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021a8:	6013      	str	r3, [r2, #0]
 80021aa:	e00b      	b.n	80021c4 <HAL_RCC_OscConfig+0xd4>
 80021ac:	4b6b      	ldr	r3, [pc, #428]	@ (800235c <HAL_RCC_OscConfig+0x26c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a6a      	ldr	r2, [pc, #424]	@ (800235c <HAL_RCC_OscConfig+0x26c>)
 80021b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021b6:	6013      	str	r3, [r2, #0]
 80021b8:	4b68      	ldr	r3, [pc, #416]	@ (800235c <HAL_RCC_OscConfig+0x26c>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a67      	ldr	r2, [pc, #412]	@ (800235c <HAL_RCC_OscConfig+0x26c>)
 80021be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d013      	beq.n	80021f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021cc:	f7ff fccc 	bl	8001b68 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021d4:	f7ff fcc8 	bl	8001b68 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b64      	cmp	r3, #100	@ 0x64
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e200      	b.n	80025e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e6:	4b5d      	ldr	r3, [pc, #372]	@ (800235c <HAL_RCC_OscConfig+0x26c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d0f0      	beq.n	80021d4 <HAL_RCC_OscConfig+0xe4>
 80021f2:	e014      	b.n	800221e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f4:	f7ff fcb8 	bl	8001b68 <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021fc:	f7ff fcb4 	bl	8001b68 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b64      	cmp	r3, #100	@ 0x64
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e1ec      	b.n	80025e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800220e:	4b53      	ldr	r3, [pc, #332]	@ (800235c <HAL_RCC_OscConfig+0x26c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1f0      	bne.n	80021fc <HAL_RCC_OscConfig+0x10c>
 800221a:	e000      	b.n	800221e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800221c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d063      	beq.n	80022f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800222a:	4b4c      	ldr	r3, [pc, #304]	@ (800235c <HAL_RCC_OscConfig+0x26c>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f003 030c 	and.w	r3, r3, #12
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00b      	beq.n	800224e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002236:	4b49      	ldr	r3, [pc, #292]	@ (800235c <HAL_RCC_OscConfig+0x26c>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f003 030c 	and.w	r3, r3, #12
 800223e:	2b08      	cmp	r3, #8
 8002240:	d11c      	bne.n	800227c <HAL_RCC_OscConfig+0x18c>
 8002242:	4b46      	ldr	r3, [pc, #280]	@ (800235c <HAL_RCC_OscConfig+0x26c>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d116      	bne.n	800227c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800224e:	4b43      	ldr	r3, [pc, #268]	@ (800235c <HAL_RCC_OscConfig+0x26c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d005      	beq.n	8002266 <HAL_RCC_OscConfig+0x176>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d001      	beq.n	8002266 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e1c0      	b.n	80025e8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002266:	4b3d      	ldr	r3, [pc, #244]	@ (800235c <HAL_RCC_OscConfig+0x26c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	4939      	ldr	r1, [pc, #228]	@ (800235c <HAL_RCC_OscConfig+0x26c>)
 8002276:	4313      	orrs	r3, r2
 8002278:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800227a:	e03a      	b.n	80022f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d020      	beq.n	80022c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002284:	4b36      	ldr	r3, [pc, #216]	@ (8002360 <HAL_RCC_OscConfig+0x270>)
 8002286:	2201      	movs	r2, #1
 8002288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228a:	f7ff fc6d 	bl	8001b68 <HAL_GetTick>
 800228e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002290:	e008      	b.n	80022a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002292:	f7ff fc69 	bl	8001b68 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b02      	cmp	r3, #2
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e1a1      	b.n	80025e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a4:	4b2d      	ldr	r3, [pc, #180]	@ (800235c <HAL_RCC_OscConfig+0x26c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d0f0      	beq.n	8002292 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b0:	4b2a      	ldr	r3, [pc, #168]	@ (800235c <HAL_RCC_OscConfig+0x26c>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	4927      	ldr	r1, [pc, #156]	@ (800235c <HAL_RCC_OscConfig+0x26c>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	600b      	str	r3, [r1, #0]
 80022c4:	e015      	b.n	80022f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022c6:	4b26      	ldr	r3, [pc, #152]	@ (8002360 <HAL_RCC_OscConfig+0x270>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022cc:	f7ff fc4c 	bl	8001b68 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022d4:	f7ff fc48 	bl	8001b68 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e180      	b.n	80025e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022e6:	4b1d      	ldr	r3, [pc, #116]	@ (800235c <HAL_RCC_OscConfig+0x26c>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1f0      	bne.n	80022d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0308 	and.w	r3, r3, #8
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d03a      	beq.n	8002374 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d019      	beq.n	800233a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002306:	4b17      	ldr	r3, [pc, #92]	@ (8002364 <HAL_RCC_OscConfig+0x274>)
 8002308:	2201      	movs	r2, #1
 800230a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800230c:	f7ff fc2c 	bl	8001b68 <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002314:	f7ff fc28 	bl	8001b68 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e160      	b.n	80025e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002326:	4b0d      	ldr	r3, [pc, #52]	@ (800235c <HAL_RCC_OscConfig+0x26c>)
 8002328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d0f0      	beq.n	8002314 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002332:	2001      	movs	r0, #1
 8002334:	f000 fa9c 	bl	8002870 <RCC_Delay>
 8002338:	e01c      	b.n	8002374 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800233a:	4b0a      	ldr	r3, [pc, #40]	@ (8002364 <HAL_RCC_OscConfig+0x274>)
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002340:	f7ff fc12 	bl	8001b68 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002346:	e00f      	b.n	8002368 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002348:	f7ff fc0e 	bl	8001b68 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d908      	bls.n	8002368 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e146      	b.n	80025e8 <HAL_RCC_OscConfig+0x4f8>
 800235a:	bf00      	nop
 800235c:	40021000 	.word	0x40021000
 8002360:	42420000 	.word	0x42420000
 8002364:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002368:	4b92      	ldr	r3, [pc, #584]	@ (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 800236a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1e9      	bne.n	8002348 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0304 	and.w	r3, r3, #4
 800237c:	2b00      	cmp	r3, #0
 800237e:	f000 80a6 	beq.w	80024ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002382:	2300      	movs	r3, #0
 8002384:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002386:	4b8b      	ldr	r3, [pc, #556]	@ (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d10d      	bne.n	80023ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002392:	4b88      	ldr	r3, [pc, #544]	@ (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	4a87      	ldr	r2, [pc, #540]	@ (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 8002398:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800239c:	61d3      	str	r3, [r2, #28]
 800239e:	4b85      	ldr	r3, [pc, #532]	@ (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 80023a0:	69db      	ldr	r3, [r3, #28]
 80023a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023a6:	60bb      	str	r3, [r7, #8]
 80023a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023aa:	2301      	movs	r3, #1
 80023ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ae:	4b82      	ldr	r3, [pc, #520]	@ (80025b8 <HAL_RCC_OscConfig+0x4c8>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d118      	bne.n	80023ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023ba:	4b7f      	ldr	r3, [pc, #508]	@ (80025b8 <HAL_RCC_OscConfig+0x4c8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a7e      	ldr	r2, [pc, #504]	@ (80025b8 <HAL_RCC_OscConfig+0x4c8>)
 80023c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023c6:	f7ff fbcf 	bl	8001b68 <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ce:	f7ff fbcb 	bl	8001b68 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b64      	cmp	r3, #100	@ 0x64
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e103      	b.n	80025e8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e0:	4b75      	ldr	r3, [pc, #468]	@ (80025b8 <HAL_RCC_OscConfig+0x4c8>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0f0      	beq.n	80023ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d106      	bne.n	8002402 <HAL_RCC_OscConfig+0x312>
 80023f4:	4b6f      	ldr	r3, [pc, #444]	@ (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	4a6e      	ldr	r2, [pc, #440]	@ (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 80023fa:	f043 0301 	orr.w	r3, r3, #1
 80023fe:	6213      	str	r3, [r2, #32]
 8002400:	e02d      	b.n	800245e <HAL_RCC_OscConfig+0x36e>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10c      	bne.n	8002424 <HAL_RCC_OscConfig+0x334>
 800240a:	4b6a      	ldr	r3, [pc, #424]	@ (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	4a69      	ldr	r2, [pc, #420]	@ (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 8002410:	f023 0301 	bic.w	r3, r3, #1
 8002414:	6213      	str	r3, [r2, #32]
 8002416:	4b67      	ldr	r3, [pc, #412]	@ (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	4a66      	ldr	r2, [pc, #408]	@ (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 800241c:	f023 0304 	bic.w	r3, r3, #4
 8002420:	6213      	str	r3, [r2, #32]
 8002422:	e01c      	b.n	800245e <HAL_RCC_OscConfig+0x36e>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	2b05      	cmp	r3, #5
 800242a:	d10c      	bne.n	8002446 <HAL_RCC_OscConfig+0x356>
 800242c:	4b61      	ldr	r3, [pc, #388]	@ (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	4a60      	ldr	r2, [pc, #384]	@ (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 8002432:	f043 0304 	orr.w	r3, r3, #4
 8002436:	6213      	str	r3, [r2, #32]
 8002438:	4b5e      	ldr	r3, [pc, #376]	@ (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	4a5d      	ldr	r2, [pc, #372]	@ (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 800243e:	f043 0301 	orr.w	r3, r3, #1
 8002442:	6213      	str	r3, [r2, #32]
 8002444:	e00b      	b.n	800245e <HAL_RCC_OscConfig+0x36e>
 8002446:	4b5b      	ldr	r3, [pc, #364]	@ (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	4a5a      	ldr	r2, [pc, #360]	@ (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 800244c:	f023 0301 	bic.w	r3, r3, #1
 8002450:	6213      	str	r3, [r2, #32]
 8002452:	4b58      	ldr	r3, [pc, #352]	@ (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	4a57      	ldr	r2, [pc, #348]	@ (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 8002458:	f023 0304 	bic.w	r3, r3, #4
 800245c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d015      	beq.n	8002492 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002466:	f7ff fb7f 	bl	8001b68 <HAL_GetTick>
 800246a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800246c:	e00a      	b.n	8002484 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800246e:	f7ff fb7b 	bl	8001b68 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	f241 3288 	movw	r2, #5000	@ 0x1388
 800247c:	4293      	cmp	r3, r2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e0b1      	b.n	80025e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002484:	4b4b      	ldr	r3, [pc, #300]	@ (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0ee      	beq.n	800246e <HAL_RCC_OscConfig+0x37e>
 8002490:	e014      	b.n	80024bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002492:	f7ff fb69 	bl	8001b68 <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002498:	e00a      	b.n	80024b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249a:	f7ff fb65 	bl	8001b68 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e09b      	b.n	80025e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024b0:	4b40      	ldr	r3, [pc, #256]	@ (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d1ee      	bne.n	800249a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024bc:	7dfb      	ldrb	r3, [r7, #23]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d105      	bne.n	80024ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024c2:	4b3c      	ldr	r3, [pc, #240]	@ (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	4a3b      	ldr	r2, [pc, #236]	@ (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 80024c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f000 8087 	beq.w	80025e6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024d8:	4b36      	ldr	r3, [pc, #216]	@ (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f003 030c 	and.w	r3, r3, #12
 80024e0:	2b08      	cmp	r3, #8
 80024e2:	d061      	beq.n	80025a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	69db      	ldr	r3, [r3, #28]
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d146      	bne.n	800257a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ec:	4b33      	ldr	r3, [pc, #204]	@ (80025bc <HAL_RCC_OscConfig+0x4cc>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f2:	f7ff fb39 	bl	8001b68 <HAL_GetTick>
 80024f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024f8:	e008      	b.n	800250c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024fa:	f7ff fb35 	bl	8001b68 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d901      	bls.n	800250c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e06d      	b.n	80025e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800250c:	4b29      	ldr	r3, [pc, #164]	@ (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d1f0      	bne.n	80024fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002520:	d108      	bne.n	8002534 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002522:	4b24      	ldr	r3, [pc, #144]	@ (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	4921      	ldr	r1, [pc, #132]	@ (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 8002530:	4313      	orrs	r3, r2
 8002532:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002534:	4b1f      	ldr	r3, [pc, #124]	@ (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a19      	ldr	r1, [r3, #32]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002544:	430b      	orrs	r3, r1
 8002546:	491b      	ldr	r1, [pc, #108]	@ (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 8002548:	4313      	orrs	r3, r2
 800254a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800254c:	4b1b      	ldr	r3, [pc, #108]	@ (80025bc <HAL_RCC_OscConfig+0x4cc>)
 800254e:	2201      	movs	r2, #1
 8002550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002552:	f7ff fb09 	bl	8001b68 <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002558:	e008      	b.n	800256c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800255a:	f7ff fb05 	bl	8001b68 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e03d      	b.n	80025e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800256c:	4b11      	ldr	r3, [pc, #68]	@ (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0f0      	beq.n	800255a <HAL_RCC_OscConfig+0x46a>
 8002578:	e035      	b.n	80025e6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800257a:	4b10      	ldr	r3, [pc, #64]	@ (80025bc <HAL_RCC_OscConfig+0x4cc>)
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002580:	f7ff faf2 	bl	8001b68 <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002588:	f7ff faee 	bl	8001b68 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e026      	b.n	80025e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800259a:	4b06      	ldr	r3, [pc, #24]	@ (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1f0      	bne.n	8002588 <HAL_RCC_OscConfig+0x498>
 80025a6:	e01e      	b.n	80025e6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	69db      	ldr	r3, [r3, #28]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d107      	bne.n	80025c0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e019      	b.n	80025e8 <HAL_RCC_OscConfig+0x4f8>
 80025b4:	40021000 	.word	0x40021000
 80025b8:	40007000 	.word	0x40007000
 80025bc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025c0:	4b0b      	ldr	r3, [pc, #44]	@ (80025f0 <HAL_RCC_OscConfig+0x500>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d106      	bne.n	80025e2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025de:	429a      	cmp	r2, r3
 80025e0:	d001      	beq.n	80025e6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e000      	b.n	80025e8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3718      	adds	r7, #24
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40021000 	.word	0x40021000

080025f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d101      	bne.n	8002608 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e0d0      	b.n	80027aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002608:	4b6a      	ldr	r3, [pc, #424]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c0>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0307 	and.w	r3, r3, #7
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	429a      	cmp	r2, r3
 8002614:	d910      	bls.n	8002638 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002616:	4b67      	ldr	r3, [pc, #412]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f023 0207 	bic.w	r2, r3, #7
 800261e:	4965      	ldr	r1, [pc, #404]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	4313      	orrs	r3, r2
 8002624:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002626:	4b63      	ldr	r3, [pc, #396]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0307 	and.w	r3, r3, #7
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	429a      	cmp	r2, r3
 8002632:	d001      	beq.n	8002638 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e0b8      	b.n	80027aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d020      	beq.n	8002686 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0304 	and.w	r3, r3, #4
 800264c:	2b00      	cmp	r3, #0
 800264e:	d005      	beq.n	800265c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002650:	4b59      	ldr	r3, [pc, #356]	@ (80027b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	4a58      	ldr	r2, [pc, #352]	@ (80027b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002656:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800265a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0308 	and.w	r3, r3, #8
 8002664:	2b00      	cmp	r3, #0
 8002666:	d005      	beq.n	8002674 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002668:	4b53      	ldr	r3, [pc, #332]	@ (80027b8 <HAL_RCC_ClockConfig+0x1c4>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	4a52      	ldr	r2, [pc, #328]	@ (80027b8 <HAL_RCC_ClockConfig+0x1c4>)
 800266e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002672:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002674:	4b50      	ldr	r3, [pc, #320]	@ (80027b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	494d      	ldr	r1, [pc, #308]	@ (80027b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002682:	4313      	orrs	r3, r2
 8002684:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	2b00      	cmp	r3, #0
 8002690:	d040      	beq.n	8002714 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d107      	bne.n	80026aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800269a:	4b47      	ldr	r3, [pc, #284]	@ (80027b8 <HAL_RCC_ClockConfig+0x1c4>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d115      	bne.n	80026d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e07f      	b.n	80027aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d107      	bne.n	80026c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026b2:	4b41      	ldr	r3, [pc, #260]	@ (80027b8 <HAL_RCC_ClockConfig+0x1c4>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d109      	bne.n	80026d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e073      	b.n	80027aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c2:	4b3d      	ldr	r3, [pc, #244]	@ (80027b8 <HAL_RCC_ClockConfig+0x1c4>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e06b      	b.n	80027aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026d2:	4b39      	ldr	r3, [pc, #228]	@ (80027b8 <HAL_RCC_ClockConfig+0x1c4>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f023 0203 	bic.w	r2, r3, #3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	4936      	ldr	r1, [pc, #216]	@ (80027b8 <HAL_RCC_ClockConfig+0x1c4>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026e4:	f7ff fa40 	bl	8001b68 <HAL_GetTick>
 80026e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ea:	e00a      	b.n	8002702 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026ec:	f7ff fa3c 	bl	8001b68 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e053      	b.n	80027aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002702:	4b2d      	ldr	r3, [pc, #180]	@ (80027b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f003 020c 	and.w	r2, r3, #12
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	429a      	cmp	r2, r3
 8002712:	d1eb      	bne.n	80026ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002714:	4b27      	ldr	r3, [pc, #156]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0307 	and.w	r3, r3, #7
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	429a      	cmp	r2, r3
 8002720:	d210      	bcs.n	8002744 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002722:	4b24      	ldr	r3, [pc, #144]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f023 0207 	bic.w	r2, r3, #7
 800272a:	4922      	ldr	r1, [pc, #136]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c0>)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	4313      	orrs	r3, r2
 8002730:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002732:	4b20      	ldr	r3, [pc, #128]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	429a      	cmp	r2, r3
 800273e:	d001      	beq.n	8002744 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e032      	b.n	80027aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0304 	and.w	r3, r3, #4
 800274c:	2b00      	cmp	r3, #0
 800274e:	d008      	beq.n	8002762 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002750:	4b19      	ldr	r3, [pc, #100]	@ (80027b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	4916      	ldr	r1, [pc, #88]	@ (80027b8 <HAL_RCC_ClockConfig+0x1c4>)
 800275e:	4313      	orrs	r3, r2
 8002760:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0308 	and.w	r3, r3, #8
 800276a:	2b00      	cmp	r3, #0
 800276c:	d009      	beq.n	8002782 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800276e:	4b12      	ldr	r3, [pc, #72]	@ (80027b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	490e      	ldr	r1, [pc, #56]	@ (80027b8 <HAL_RCC_ClockConfig+0x1c4>)
 800277e:	4313      	orrs	r3, r2
 8002780:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002782:	f000 f821 	bl	80027c8 <HAL_RCC_GetSysClockFreq>
 8002786:	4602      	mov	r2, r0
 8002788:	4b0b      	ldr	r3, [pc, #44]	@ (80027b8 <HAL_RCC_ClockConfig+0x1c4>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	091b      	lsrs	r3, r3, #4
 800278e:	f003 030f 	and.w	r3, r3, #15
 8002792:	490a      	ldr	r1, [pc, #40]	@ (80027bc <HAL_RCC_ClockConfig+0x1c8>)
 8002794:	5ccb      	ldrb	r3, [r1, r3]
 8002796:	fa22 f303 	lsr.w	r3, r2, r3
 800279a:	4a09      	ldr	r2, [pc, #36]	@ (80027c0 <HAL_RCC_ClockConfig+0x1cc>)
 800279c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800279e:	4b09      	ldr	r3, [pc, #36]	@ (80027c4 <HAL_RCC_ClockConfig+0x1d0>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7ff f99e 	bl	8001ae4 <HAL_InitTick>

  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40022000 	.word	0x40022000
 80027b8:	40021000 	.word	0x40021000
 80027bc:	08003038 	.word	0x08003038
 80027c0:	2000006c 	.word	0x2000006c
 80027c4:	20000070 	.word	0x20000070

080027c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b087      	sub	sp, #28
 80027cc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027ce:	2300      	movs	r3, #0
 80027d0:	60fb      	str	r3, [r7, #12]
 80027d2:	2300      	movs	r3, #0
 80027d4:	60bb      	str	r3, [r7, #8]
 80027d6:	2300      	movs	r3, #0
 80027d8:	617b      	str	r3, [r7, #20]
 80027da:	2300      	movs	r3, #0
 80027dc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80027de:	2300      	movs	r3, #0
 80027e0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027e2:	4b1e      	ldr	r3, [pc, #120]	@ (800285c <HAL_RCC_GetSysClockFreq+0x94>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f003 030c 	and.w	r3, r3, #12
 80027ee:	2b04      	cmp	r3, #4
 80027f0:	d002      	beq.n	80027f8 <HAL_RCC_GetSysClockFreq+0x30>
 80027f2:	2b08      	cmp	r3, #8
 80027f4:	d003      	beq.n	80027fe <HAL_RCC_GetSysClockFreq+0x36>
 80027f6:	e027      	b.n	8002848 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027f8:	4b19      	ldr	r3, [pc, #100]	@ (8002860 <HAL_RCC_GetSysClockFreq+0x98>)
 80027fa:	613b      	str	r3, [r7, #16]
      break;
 80027fc:	e027      	b.n	800284e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	0c9b      	lsrs	r3, r3, #18
 8002802:	f003 030f 	and.w	r3, r3, #15
 8002806:	4a17      	ldr	r2, [pc, #92]	@ (8002864 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002808:	5cd3      	ldrb	r3, [r2, r3]
 800280a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d010      	beq.n	8002838 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002816:	4b11      	ldr	r3, [pc, #68]	@ (800285c <HAL_RCC_GetSysClockFreq+0x94>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	0c5b      	lsrs	r3, r3, #17
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	4a11      	ldr	r2, [pc, #68]	@ (8002868 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002822:	5cd3      	ldrb	r3, [r2, r3]
 8002824:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a0d      	ldr	r2, [pc, #52]	@ (8002860 <HAL_RCC_GetSysClockFreq+0x98>)
 800282a:	fb03 f202 	mul.w	r2, r3, r2
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	fbb2 f3f3 	udiv	r3, r2, r3
 8002834:	617b      	str	r3, [r7, #20]
 8002836:	e004      	b.n	8002842 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a0c      	ldr	r2, [pc, #48]	@ (800286c <HAL_RCC_GetSysClockFreq+0xa4>)
 800283c:	fb02 f303 	mul.w	r3, r2, r3
 8002840:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	613b      	str	r3, [r7, #16]
      break;
 8002846:	e002      	b.n	800284e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002848:	4b05      	ldr	r3, [pc, #20]	@ (8002860 <HAL_RCC_GetSysClockFreq+0x98>)
 800284a:	613b      	str	r3, [r7, #16]
      break;
 800284c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800284e:	693b      	ldr	r3, [r7, #16]
}
 8002850:	4618      	mov	r0, r3
 8002852:	371c      	adds	r7, #28
 8002854:	46bd      	mov	sp, r7
 8002856:	bc80      	pop	{r7}
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	40021000 	.word	0x40021000
 8002860:	007a1200 	.word	0x007a1200
 8002864:	08003048 	.word	0x08003048
 8002868:	08003058 	.word	0x08003058
 800286c:	003d0900 	.word	0x003d0900

08002870 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002878:	4b0a      	ldr	r3, [pc, #40]	@ (80028a4 <RCC_Delay+0x34>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a0a      	ldr	r2, [pc, #40]	@ (80028a8 <RCC_Delay+0x38>)
 800287e:	fba2 2303 	umull	r2, r3, r2, r3
 8002882:	0a5b      	lsrs	r3, r3, #9
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	fb02 f303 	mul.w	r3, r2, r3
 800288a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800288c:	bf00      	nop
  }
  while (Delay --);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	1e5a      	subs	r2, r3, #1
 8002892:	60fa      	str	r2, [r7, #12]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1f9      	bne.n	800288c <RCC_Delay+0x1c>
}
 8002898:	bf00      	nop
 800289a:	bf00      	nop
 800289c:	3714      	adds	r7, #20
 800289e:	46bd      	mov	sp, r7
 80028a0:	bc80      	pop	{r7}
 80028a2:	4770      	bx	lr
 80028a4:	2000006c 	.word	0x2000006c
 80028a8:	10624dd3 	.word	0x10624dd3

080028ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e041      	b.n	8002942 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d106      	bne.n	80028d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f7ff f86a 	bl	80019ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2202      	movs	r2, #2
 80028dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	3304      	adds	r3, #4
 80028e8:	4619      	mov	r1, r3
 80028ea:	4610      	mov	r0, r2
 80028ec:	f000 fa08 	bl	8002d00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b084      	sub	sp, #16
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d020      	beq.n	80029ae <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d01b      	beq.n	80029ae <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f06f 0202 	mvn.w	r2, #2
 800297e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	f003 0303 	and.w	r3, r3, #3
 8002990:	2b00      	cmp	r3, #0
 8002992:	d003      	beq.n	800299c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 f998 	bl	8002cca <HAL_TIM_IC_CaptureCallback>
 800299a:	e005      	b.n	80029a8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 f98b 	bl	8002cb8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 f99a 	bl	8002cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	f003 0304 	and.w	r3, r3, #4
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d020      	beq.n	80029fa <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f003 0304 	and.w	r3, r3, #4
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d01b      	beq.n	80029fa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f06f 0204 	mvn.w	r2, #4
 80029ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2202      	movs	r2, #2
 80029d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d003      	beq.n	80029e8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f000 f972 	bl	8002cca <HAL_TIM_IC_CaptureCallback>
 80029e6:	e005      	b.n	80029f4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 f965 	bl	8002cb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 f974 	bl	8002cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	f003 0308 	and.w	r3, r3, #8
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d020      	beq.n	8002a46 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f003 0308 	and.w	r3, r3, #8
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d01b      	beq.n	8002a46 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f06f 0208 	mvn.w	r2, #8
 8002a16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2204      	movs	r2, #4
 8002a1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	69db      	ldr	r3, [r3, #28]
 8002a24:	f003 0303 	and.w	r3, r3, #3
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d003      	beq.n	8002a34 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 f94c 	bl	8002cca <HAL_TIM_IC_CaptureCallback>
 8002a32:	e005      	b.n	8002a40 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 f93f 	bl	8002cb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f94e 	bl	8002cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	f003 0310 	and.w	r3, r3, #16
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d020      	beq.n	8002a92 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f003 0310 	and.w	r3, r3, #16
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d01b      	beq.n	8002a92 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f06f 0210 	mvn.w	r2, #16
 8002a62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2208      	movs	r2, #8
 8002a68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	69db      	ldr	r3, [r3, #28]
 8002a70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d003      	beq.n	8002a80 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 f926 	bl	8002cca <HAL_TIM_IC_CaptureCallback>
 8002a7e:	e005      	b.n	8002a8c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 f919 	bl	8002cb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f928 	bl	8002cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00c      	beq.n	8002ab6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d007      	beq.n	8002ab6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f06f 0201 	mvn.w	r2, #1
 8002aae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f7fe fced 	bl	8001490 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00c      	beq.n	8002ada <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d007      	beq.n	8002ada <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f000 fa6e 	bl	8002fb6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00c      	beq.n	8002afe <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d007      	beq.n	8002afe <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002af6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 f8f8 	bl	8002cee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	f003 0320 	and.w	r3, r3, #32
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00c      	beq.n	8002b22 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f003 0320 	and.w	r3, r3, #32
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d007      	beq.n	8002b22 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f06f 0220 	mvn.w	r2, #32
 8002b1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 fa41 	bl	8002fa4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b22:	bf00      	nop
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b084      	sub	sp, #16
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
 8002b32:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b34:	2300      	movs	r3, #0
 8002b36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d101      	bne.n	8002b46 <HAL_TIM_ConfigClockSource+0x1c>
 8002b42:	2302      	movs	r3, #2
 8002b44:	e0b4      	b.n	8002cb0 <HAL_TIM_ConfigClockSource+0x186>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2202      	movs	r2, #2
 8002b52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002b64:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b6c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68ba      	ldr	r2, [r7, #8]
 8002b74:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b7e:	d03e      	beq.n	8002bfe <HAL_TIM_ConfigClockSource+0xd4>
 8002b80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b84:	f200 8087 	bhi.w	8002c96 <HAL_TIM_ConfigClockSource+0x16c>
 8002b88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b8c:	f000 8086 	beq.w	8002c9c <HAL_TIM_ConfigClockSource+0x172>
 8002b90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b94:	d87f      	bhi.n	8002c96 <HAL_TIM_ConfigClockSource+0x16c>
 8002b96:	2b70      	cmp	r3, #112	@ 0x70
 8002b98:	d01a      	beq.n	8002bd0 <HAL_TIM_ConfigClockSource+0xa6>
 8002b9a:	2b70      	cmp	r3, #112	@ 0x70
 8002b9c:	d87b      	bhi.n	8002c96 <HAL_TIM_ConfigClockSource+0x16c>
 8002b9e:	2b60      	cmp	r3, #96	@ 0x60
 8002ba0:	d050      	beq.n	8002c44 <HAL_TIM_ConfigClockSource+0x11a>
 8002ba2:	2b60      	cmp	r3, #96	@ 0x60
 8002ba4:	d877      	bhi.n	8002c96 <HAL_TIM_ConfigClockSource+0x16c>
 8002ba6:	2b50      	cmp	r3, #80	@ 0x50
 8002ba8:	d03c      	beq.n	8002c24 <HAL_TIM_ConfigClockSource+0xfa>
 8002baa:	2b50      	cmp	r3, #80	@ 0x50
 8002bac:	d873      	bhi.n	8002c96 <HAL_TIM_ConfigClockSource+0x16c>
 8002bae:	2b40      	cmp	r3, #64	@ 0x40
 8002bb0:	d058      	beq.n	8002c64 <HAL_TIM_ConfigClockSource+0x13a>
 8002bb2:	2b40      	cmp	r3, #64	@ 0x40
 8002bb4:	d86f      	bhi.n	8002c96 <HAL_TIM_ConfigClockSource+0x16c>
 8002bb6:	2b30      	cmp	r3, #48	@ 0x30
 8002bb8:	d064      	beq.n	8002c84 <HAL_TIM_ConfigClockSource+0x15a>
 8002bba:	2b30      	cmp	r3, #48	@ 0x30
 8002bbc:	d86b      	bhi.n	8002c96 <HAL_TIM_ConfigClockSource+0x16c>
 8002bbe:	2b20      	cmp	r3, #32
 8002bc0:	d060      	beq.n	8002c84 <HAL_TIM_ConfigClockSource+0x15a>
 8002bc2:	2b20      	cmp	r3, #32
 8002bc4:	d867      	bhi.n	8002c96 <HAL_TIM_ConfigClockSource+0x16c>
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d05c      	beq.n	8002c84 <HAL_TIM_ConfigClockSource+0x15a>
 8002bca:	2b10      	cmp	r3, #16
 8002bcc:	d05a      	beq.n	8002c84 <HAL_TIM_ConfigClockSource+0x15a>
 8002bce:	e062      	b.n	8002c96 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002be0:	f000 f969 	bl	8002eb6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002bf2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68ba      	ldr	r2, [r7, #8]
 8002bfa:	609a      	str	r2, [r3, #8]
      break;
 8002bfc:	e04f      	b.n	8002c9e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c0e:	f000 f952 	bl	8002eb6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	689a      	ldr	r2, [r3, #8]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c20:	609a      	str	r2, [r3, #8]
      break;
 8002c22:	e03c      	b.n	8002c9e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c30:	461a      	mov	r2, r3
 8002c32:	f000 f8c9 	bl	8002dc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2150      	movs	r1, #80	@ 0x50
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f000 f920 	bl	8002e82 <TIM_ITRx_SetConfig>
      break;
 8002c42:	e02c      	b.n	8002c9e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c50:	461a      	mov	r2, r3
 8002c52:	f000 f8e7 	bl	8002e24 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2160      	movs	r1, #96	@ 0x60
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f000 f910 	bl	8002e82 <TIM_ITRx_SetConfig>
      break;
 8002c62:	e01c      	b.n	8002c9e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c70:	461a      	mov	r2, r3
 8002c72:	f000 f8a9 	bl	8002dc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2140      	movs	r1, #64	@ 0x40
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f000 f900 	bl	8002e82 <TIM_ITRx_SetConfig>
      break;
 8002c82:	e00c      	b.n	8002c9e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	4610      	mov	r0, r2
 8002c90:	f000 f8f7 	bl	8002e82 <TIM_ITRx_SetConfig>
      break;
 8002c94:	e003      	b.n	8002c9e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	73fb      	strb	r3, [r7, #15]
      break;
 8002c9a:	e000      	b.n	8002c9e <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c9c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bc80      	pop	{r7}
 8002cc8:	4770      	bx	lr

08002cca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b083      	sub	sp, #12
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cd2:	bf00      	nop
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bc80      	pop	{r7}
 8002cda:	4770      	bx	lr

08002cdc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bc80      	pop	{r7}
 8002cec:	4770      	bx	lr

08002cee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b083      	sub	sp, #12
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bc80      	pop	{r7}
 8002cfe:	4770      	bx	lr

08002d00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a2b      	ldr	r2, [pc, #172]	@ (8002dc0 <TIM_Base_SetConfig+0xc0>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d007      	beq.n	8002d28 <TIM_Base_SetConfig+0x28>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d1e:	d003      	beq.n	8002d28 <TIM_Base_SetConfig+0x28>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a28      	ldr	r2, [pc, #160]	@ (8002dc4 <TIM_Base_SetConfig+0xc4>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d108      	bne.n	8002d3a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a20      	ldr	r2, [pc, #128]	@ (8002dc0 <TIM_Base_SetConfig+0xc0>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d007      	beq.n	8002d52 <TIM_Base_SetConfig+0x52>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d48:	d003      	beq.n	8002d52 <TIM_Base_SetConfig+0x52>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a1d      	ldr	r2, [pc, #116]	@ (8002dc4 <TIM_Base_SetConfig+0xc4>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d108      	bne.n	8002d64 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	689a      	ldr	r2, [r3, #8]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a0d      	ldr	r2, [pc, #52]	@ (8002dc0 <TIM_Base_SetConfig+0xc0>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d103      	bne.n	8002d98 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	691a      	ldr	r2, [r3, #16]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d005      	beq.n	8002db6 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	f023 0201 	bic.w	r2, r3, #1
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	611a      	str	r2, [r3, #16]
  }
}
 8002db6:	bf00      	nop
 8002db8:	3714      	adds	r7, #20
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr
 8002dc0:	40012c00 	.word	0x40012c00
 8002dc4:	40000400 	.word	0x40000400

08002dc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b087      	sub	sp, #28
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	f023 0201 	bic.w	r2, r3, #1
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002df2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	011b      	lsls	r3, r3, #4
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	f023 030a 	bic.w	r3, r3, #10
 8002e04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	621a      	str	r2, [r3, #32]
}
 8002e1a:	bf00      	nop
 8002e1c:	371c      	adds	r7, #28
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bc80      	pop	{r7}
 8002e22:	4770      	bx	lr

08002e24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b087      	sub	sp, #28
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	f023 0210 	bic.w	r2, r3, #16
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002e4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	031b      	lsls	r3, r3, #12
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002e60:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	011b      	lsls	r3, r3, #4
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	621a      	str	r2, [r3, #32]
}
 8002e78:	bf00      	nop
 8002e7a:	371c      	adds	r7, #28
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bc80      	pop	{r7}
 8002e80:	4770      	bx	lr

08002e82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b085      	sub	sp, #20
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
 8002e8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	f043 0307 	orr.w	r3, r3, #7
 8002ea4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	609a      	str	r2, [r3, #8]
}
 8002eac:	bf00      	nop
 8002eae:	3714      	adds	r7, #20
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bc80      	pop	{r7}
 8002eb4:	4770      	bx	lr

08002eb6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b087      	sub	sp, #28
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	60f8      	str	r0, [r7, #12]
 8002ebe:	60b9      	str	r1, [r7, #8]
 8002ec0:	607a      	str	r2, [r7, #4]
 8002ec2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002ed0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	021a      	lsls	r2, r3, #8
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	431a      	orrs	r2, r3
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	609a      	str	r2, [r3, #8]
}
 8002eea:	bf00      	nop
 8002eec:	371c      	adds	r7, #28
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bc80      	pop	{r7}
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d101      	bne.n	8002f0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f08:	2302      	movs	r3, #2
 8002f0a:	e041      	b.n	8002f90 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2202      	movs	r2, #2
 8002f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a14      	ldr	r2, [pc, #80]	@ (8002f9c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d009      	beq.n	8002f64 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f58:	d004      	beq.n	8002f64 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a10      	ldr	r2, [pc, #64]	@ (8002fa0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d10c      	bne.n	8002f7e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f6a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	68ba      	ldr	r2, [r7, #8]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68ba      	ldr	r2, [r7, #8]
 8002f7c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3714      	adds	r7, #20
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bc80      	pop	{r7}
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	40012c00 	.word	0x40012c00
 8002fa0:	40000400 	.word	0x40000400

08002fa4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bc80      	pop	{r7}
 8002fb4:	4770      	bx	lr

08002fb6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	b083      	sub	sp, #12
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fbe:	bf00      	nop
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bc80      	pop	{r7}
 8002fc6:	4770      	bx	lr

08002fc8 <memset>:
 8002fc8:	4603      	mov	r3, r0
 8002fca:	4402      	add	r2, r0
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d100      	bne.n	8002fd2 <memset+0xa>
 8002fd0:	4770      	bx	lr
 8002fd2:	f803 1b01 	strb.w	r1, [r3], #1
 8002fd6:	e7f9      	b.n	8002fcc <memset+0x4>

08002fd8 <__libc_init_array>:
 8002fd8:	b570      	push	{r4, r5, r6, lr}
 8002fda:	2600      	movs	r6, #0
 8002fdc:	4d0c      	ldr	r5, [pc, #48]	@ (8003010 <__libc_init_array+0x38>)
 8002fde:	4c0d      	ldr	r4, [pc, #52]	@ (8003014 <__libc_init_array+0x3c>)
 8002fe0:	1b64      	subs	r4, r4, r5
 8002fe2:	10a4      	asrs	r4, r4, #2
 8002fe4:	42a6      	cmp	r6, r4
 8002fe6:	d109      	bne.n	8002ffc <__libc_init_array+0x24>
 8002fe8:	f000 f81a 	bl	8003020 <_init>
 8002fec:	2600      	movs	r6, #0
 8002fee:	4d0a      	ldr	r5, [pc, #40]	@ (8003018 <__libc_init_array+0x40>)
 8002ff0:	4c0a      	ldr	r4, [pc, #40]	@ (800301c <__libc_init_array+0x44>)
 8002ff2:	1b64      	subs	r4, r4, r5
 8002ff4:	10a4      	asrs	r4, r4, #2
 8002ff6:	42a6      	cmp	r6, r4
 8002ff8:	d105      	bne.n	8003006 <__libc_init_array+0x2e>
 8002ffa:	bd70      	pop	{r4, r5, r6, pc}
 8002ffc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003000:	4798      	blx	r3
 8003002:	3601      	adds	r6, #1
 8003004:	e7ee      	b.n	8002fe4 <__libc_init_array+0xc>
 8003006:	f855 3b04 	ldr.w	r3, [r5], #4
 800300a:	4798      	blx	r3
 800300c:	3601      	adds	r6, #1
 800300e:	e7f2      	b.n	8002ff6 <__libc_init_array+0x1e>
 8003010:	0800305c 	.word	0x0800305c
 8003014:	0800305c 	.word	0x0800305c
 8003018:	0800305c 	.word	0x0800305c
 800301c:	08003060 	.word	0x08003060

08003020 <_init>:
 8003020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003022:	bf00      	nop
 8003024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003026:	bc08      	pop	{r3}
 8003028:	469e      	mov	lr, r3
 800302a:	4770      	bx	lr

0800302c <_fini>:
 800302c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800302e:	bf00      	nop
 8003030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003032:	bc08      	pop	{r3}
 8003034:	469e      	mov	lr, r3
 8003036:	4770      	bx	lr
