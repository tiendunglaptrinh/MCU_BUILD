
Lab3_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030b0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080031bc  080031bc  000041bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031e0  080031e0  00005078  2**0
                  CONTENTS
  4 .ARM          00000000  080031e0  080031e0  00005078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031e0  080031e0  00005078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031e0  080031e0  000041e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080031e4  080031e4  000041e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  080031e8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e4  20000078  08003260  00005078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000045c  08003260  0000545c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009447  00000000  00000000  000050a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000202f  00000000  00000000  0000e4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf0  00000000  00000000  00010518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008f2  00000000  00000000  00011108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017eb0  00000000  00000000  000119fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e570  00000000  00000000  000298aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086414  00000000  00000000  00037e1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000be22e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002db0  00000000  00000000  000be274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000c1024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	080031a4 	.word	0x080031a4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	080031a4 	.word	0x080031a4

0800014c <isButton1Pressed>:

int TimerForKeyPress1 = 200;
int TimerForKeyPress2 = 200;
int TimerForKeyPress3 = 200;

int isButton1Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if (button_flag1 == 1){
 8000150:	4b06      	ldr	r3, [pc, #24]	@ (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
		button_flag1 = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	@ (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	else {
		return 0;
 8000162:	2300      	movs	r3, #0
	}
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	20000094 	.word	0x20000094

08000170 <isButton2Pressed>:

int isButton2Pressed(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if (button_flag2 == 1){
 8000174:	4b06      	ldr	r3, [pc, #24]	@ (8000190 <isButton2Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton2Pressed+0x16>
		button_flag2 = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	@ (8000190 <isButton2Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton2Pressed+0x18>
	}
	else{
		return 0;
 8000186:	2300      	movs	r3, #0
	}
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	20000098 	.word	0x20000098

08000194 <isButton3Pressed>:

int isButton3Pressed(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if (button_flag3 == 1){
 8000198:	4b06      	ldr	r3, [pc, #24]	@ (80001b4 <isButton3Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton3Pressed+0x16>
		button_flag3 = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <isButton3Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton3Pressed+0x18>
	}
	else{
		return 0;
 80001aa:	2300      	movs	r3, #0
	}
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	2000009c 	.word	0x2000009c

080001b8 <subKeyProcess1>:
void subKeyProcess1(){
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
//	TODO
	button_flag1 = 1;
 80001bc:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <subKeyProcess1+0x14>)
 80001be:	2201      	movs	r2, #1
 80001c0:	601a      	str	r2, [r3, #0]
}
 80001c2:	bf00      	nop
 80001c4:	46bd      	mov	sp, r7
 80001c6:	bc80      	pop	{r7}
 80001c8:	4770      	bx	lr
 80001ca:	bf00      	nop
 80001cc:	20000094 	.word	0x20000094

080001d0 <subKeyProcess2>:

void subKeyProcess2(){
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0
	button_flag2 = 1;
 80001d4:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <subKeyProcess2+0x14>)
 80001d6:	2201      	movs	r2, #1
 80001d8:	601a      	str	r2, [r3, #0]
}
 80001da:	bf00      	nop
 80001dc:	46bd      	mov	sp, r7
 80001de:	bc80      	pop	{r7}
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop
 80001e4:	20000098 	.word	0x20000098

080001e8 <subKeyProcess3>:

void subKeyProcess3(){
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	button_flag3 = 1;
 80001ec:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <subKeyProcess3+0x14>)
 80001ee:	2201      	movs	r2, #1
 80001f0:	601a      	str	r2, [r3, #0]
}
 80001f2:	bf00      	nop
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	2000009c 	.word	0x2000009c

08000200 <getKeyInput1>:

void getKeyInput1(){
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	KeyReg0_1 = KeyReg1_1;
 8000204:	4b17      	ldr	r3, [pc, #92]	@ (8000264 <getKeyInput1+0x64>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a17      	ldr	r2, [pc, #92]	@ (8000268 <getKeyInput1+0x68>)
 800020a:	6013      	str	r3, [r2, #0]
	KeyReg1_1 = KeyReg2_1;
 800020c:	4b17      	ldr	r3, [pc, #92]	@ (800026c <getKeyInput1+0x6c>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a14      	ldr	r2, [pc, #80]	@ (8000264 <getKeyInput1+0x64>)
 8000212:	6013      	str	r3, [r2, #0]
	KeyReg2_1 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 8000214:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000218:	4815      	ldr	r0, [pc, #84]	@ (8000270 <getKeyInput1+0x70>)
 800021a:	f001 ff91 	bl	8002140 <HAL_GPIO_ReadPin>
 800021e:	4603      	mov	r3, r0
 8000220:	461a      	mov	r2, r3
 8000222:	4b12      	ldr	r3, [pc, #72]	@ (800026c <getKeyInput1+0x6c>)
 8000224:	601a      	str	r2, [r3, #0]
	if ((KeyReg0_1 == KeyReg1_1) && (KeyReg1_1 == KeyReg2_1)){
 8000226:	4b10      	ldr	r3, [pc, #64]	@ (8000268 <getKeyInput1+0x68>)
 8000228:	681a      	ldr	r2, [r3, #0]
 800022a:	4b0e      	ldr	r3, [pc, #56]	@ (8000264 <getKeyInput1+0x64>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	429a      	cmp	r2, r3
 8000230:	d115      	bne.n	800025e <getKeyInput1+0x5e>
 8000232:	4b0c      	ldr	r3, [pc, #48]	@ (8000264 <getKeyInput1+0x64>)
 8000234:	681a      	ldr	r2, [r3, #0]
 8000236:	4b0d      	ldr	r3, [pc, #52]	@ (800026c <getKeyInput1+0x6c>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	429a      	cmp	r2, r3
 800023c:	d10f      	bne.n	800025e <getKeyInput1+0x5e>
		if (KeyReg3_1 != KeyReg2_1){
 800023e:	4b0d      	ldr	r3, [pc, #52]	@ (8000274 <getKeyInput1+0x74>)
 8000240:	681a      	ldr	r2, [r3, #0]
 8000242:	4b0a      	ldr	r3, [pc, #40]	@ (800026c <getKeyInput1+0x6c>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	429a      	cmp	r2, r3
 8000248:	d009      	beq.n	800025e <getKeyInput1+0x5e>
			KeyReg3_1 = KeyReg2_1;
 800024a:	4b08      	ldr	r3, [pc, #32]	@ (800026c <getKeyInput1+0x6c>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	4a09      	ldr	r2, [pc, #36]	@ (8000274 <getKeyInput1+0x74>)
 8000250:	6013      	str	r3, [r2, #0]
			if (KeyReg2_1 == PRESSED_STATE){
 8000252:	4b06      	ldr	r3, [pc, #24]	@ (800026c <getKeyInput1+0x6c>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d101      	bne.n	800025e <getKeyInput1+0x5e>
				subKeyProcess1();
 800025a:	f7ff ffad 	bl	80001b8 <subKeyProcess1>
			}
		}
	}
}
 800025e:	bf00      	nop
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	20000004 	.word	0x20000004
 8000268:	20000000 	.word	0x20000000
 800026c:	20000008 	.word	0x20000008
 8000270:	40010c00 	.word	0x40010c00
 8000274:	20000024 	.word	0x20000024

08000278 <getKeyInput2>:

void getKeyInput2(){
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	KeyReg0_2 = KeyReg1_2;
 800027c:	4b17      	ldr	r3, [pc, #92]	@ (80002dc <getKeyInput2+0x64>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a17      	ldr	r2, [pc, #92]	@ (80002e0 <getKeyInput2+0x68>)
 8000282:	6013      	str	r3, [r2, #0]
	KeyReg1_2 = KeyReg2_2;
 8000284:	4b17      	ldr	r3, [pc, #92]	@ (80002e4 <getKeyInput2+0x6c>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a14      	ldr	r2, [pc, #80]	@ (80002dc <getKeyInput2+0x64>)
 800028a:	6013      	str	r3, [r2, #0]
	KeyReg2_2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 800028c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000290:	4815      	ldr	r0, [pc, #84]	@ (80002e8 <getKeyInput2+0x70>)
 8000292:	f001 ff55 	bl	8002140 <HAL_GPIO_ReadPin>
 8000296:	4603      	mov	r3, r0
 8000298:	461a      	mov	r2, r3
 800029a:	4b12      	ldr	r3, [pc, #72]	@ (80002e4 <getKeyInput2+0x6c>)
 800029c:	601a      	str	r2, [r3, #0]
	if ((KeyReg0_2 == KeyReg1_2) && (KeyReg1_2 == KeyReg2_2)){
 800029e:	4b10      	ldr	r3, [pc, #64]	@ (80002e0 <getKeyInput2+0x68>)
 80002a0:	681a      	ldr	r2, [r3, #0]
 80002a2:	4b0e      	ldr	r3, [pc, #56]	@ (80002dc <getKeyInput2+0x64>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	429a      	cmp	r2, r3
 80002a8:	d115      	bne.n	80002d6 <getKeyInput2+0x5e>
 80002aa:	4b0c      	ldr	r3, [pc, #48]	@ (80002dc <getKeyInput2+0x64>)
 80002ac:	681a      	ldr	r2, [r3, #0]
 80002ae:	4b0d      	ldr	r3, [pc, #52]	@ (80002e4 <getKeyInput2+0x6c>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d10f      	bne.n	80002d6 <getKeyInput2+0x5e>
		if (KeyReg3_2 != KeyReg2_2){
 80002b6:	4b0d      	ldr	r3, [pc, #52]	@ (80002ec <getKeyInput2+0x74>)
 80002b8:	681a      	ldr	r2, [r3, #0]
 80002ba:	4b0a      	ldr	r3, [pc, #40]	@ (80002e4 <getKeyInput2+0x6c>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	429a      	cmp	r2, r3
 80002c0:	d009      	beq.n	80002d6 <getKeyInput2+0x5e>
			KeyReg3_2 = KeyReg2_2;
 80002c2:	4b08      	ldr	r3, [pc, #32]	@ (80002e4 <getKeyInput2+0x6c>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	4a09      	ldr	r2, [pc, #36]	@ (80002ec <getKeyInput2+0x74>)
 80002c8:	6013      	str	r3, [r2, #0]
			if (KeyReg2_2 == PRESSED_STATE){
 80002ca:	4b06      	ldr	r3, [pc, #24]	@ (80002e4 <getKeyInput2+0x6c>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d101      	bne.n	80002d6 <getKeyInput2+0x5e>
				subKeyProcess2();
 80002d2:	f7ff ff7d 	bl	80001d0 <subKeyProcess2>
			}
		}
	}
}
 80002d6:	bf00      	nop
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	20000010 	.word	0x20000010
 80002e0:	2000000c 	.word	0x2000000c
 80002e4:	20000014 	.word	0x20000014
 80002e8:	40010c00 	.word	0x40010c00
 80002ec:	20000028 	.word	0x20000028

080002f0 <getKeyInput3>:

void getKeyInput3(){
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
	KeyReg0_3 = KeyReg1_3;
 80002f4:	4b17      	ldr	r3, [pc, #92]	@ (8000354 <getKeyInput3+0x64>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a17      	ldr	r2, [pc, #92]	@ (8000358 <getKeyInput3+0x68>)
 80002fa:	6013      	str	r3, [r2, #0]
	KeyReg1_3 = KeyReg2_3;
 80002fc:	4b17      	ldr	r3, [pc, #92]	@ (800035c <getKeyInput3+0x6c>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a14      	ldr	r2, [pc, #80]	@ (8000354 <getKeyInput3+0x64>)
 8000302:	6013      	str	r3, [r2, #0]
	KeyReg2_3 = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 8000304:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000308:	4815      	ldr	r0, [pc, #84]	@ (8000360 <getKeyInput3+0x70>)
 800030a:	f001 ff19 	bl	8002140 <HAL_GPIO_ReadPin>
 800030e:	4603      	mov	r3, r0
 8000310:	461a      	mov	r2, r3
 8000312:	4b12      	ldr	r3, [pc, #72]	@ (800035c <getKeyInput3+0x6c>)
 8000314:	601a      	str	r2, [r3, #0]
	if ((KeyReg0_3 == KeyReg1_3) && (KeyReg1_3 == KeyReg2_3)){
 8000316:	4b10      	ldr	r3, [pc, #64]	@ (8000358 <getKeyInput3+0x68>)
 8000318:	681a      	ldr	r2, [r3, #0]
 800031a:	4b0e      	ldr	r3, [pc, #56]	@ (8000354 <getKeyInput3+0x64>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	429a      	cmp	r2, r3
 8000320:	d115      	bne.n	800034e <getKeyInput3+0x5e>
 8000322:	4b0c      	ldr	r3, [pc, #48]	@ (8000354 <getKeyInput3+0x64>)
 8000324:	681a      	ldr	r2, [r3, #0]
 8000326:	4b0d      	ldr	r3, [pc, #52]	@ (800035c <getKeyInput3+0x6c>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	429a      	cmp	r2, r3
 800032c:	d10f      	bne.n	800034e <getKeyInput3+0x5e>
		if (KeyReg3_3 != KeyReg2_3){
 800032e:	4b0d      	ldr	r3, [pc, #52]	@ (8000364 <getKeyInput3+0x74>)
 8000330:	681a      	ldr	r2, [r3, #0]
 8000332:	4b0a      	ldr	r3, [pc, #40]	@ (800035c <getKeyInput3+0x6c>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	429a      	cmp	r2, r3
 8000338:	d009      	beq.n	800034e <getKeyInput3+0x5e>
			KeyReg3_3 = KeyReg2_3;
 800033a:	4b08      	ldr	r3, [pc, #32]	@ (800035c <getKeyInput3+0x6c>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	4a09      	ldr	r2, [pc, #36]	@ (8000364 <getKeyInput3+0x74>)
 8000340:	6013      	str	r3, [r2, #0]
			if (KeyReg2_3 == PRESSED_STATE){
 8000342:	4b06      	ldr	r3, [pc, #24]	@ (800035c <getKeyInput3+0x6c>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	2b00      	cmp	r3, #0
 8000348:	d101      	bne.n	800034e <getKeyInput3+0x5e>
				subKeyProcess3();
 800034a:	f7ff ff4d 	bl	80001e8 <subKeyProcess3>
			}
		}
	}
}
 800034e:	bf00      	nop
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	2000001c 	.word	0x2000001c
 8000358:	20000018 	.word	0x20000018
 800035c:	20000020 	.word	0x20000020
 8000360:	40010c00 	.word	0x40010c00
 8000364:	2000002c 	.word	0x2000002c

08000368 <SCH_Update>:
	head = tail = 0;
	//Timer_init();
	//Watchdog_init();
}

void SCH_Update(void) {
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
	unsigned char Index;
	//NOTE: calculations are in *TICKS* (not milliseconds)
	for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 800036e:	2300      	movs	r3, #0
 8000370:	71fb      	strb	r3, [r7, #7]
 8000372:	e074      	b.n	800045e <SCH_Update+0xf6>
		// Check if there is a task at this location
		if (SCH_tasks_G[Index].pTask) {
 8000374:	79fa      	ldrb	r2, [r7, #7]
 8000376:	493e      	ldr	r1, [pc, #248]	@ (8000470 <SCH_Update+0x108>)
 8000378:	4613      	mov	r3, r2
 800037a:	009b      	lsls	r3, r3, #2
 800037c:	4413      	add	r3, r2
 800037e:	009b      	lsls	r3, r3, #2
 8000380:	440b      	add	r3, r1
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d067      	beq.n	8000458 <SCH_Update+0xf0>
			if (SCH_tasks_G[Index].Delay == 0) {
 8000388:	79fa      	ldrb	r2, [r7, #7]
 800038a:	4939      	ldr	r1, [pc, #228]	@ (8000470 <SCH_Update+0x108>)
 800038c:	4613      	mov	r3, r2
 800038e:	009b      	lsls	r3, r3, #2
 8000390:	4413      	add	r3, r2
 8000392:	009b      	lsls	r3, r3, #2
 8000394:	440b      	add	r3, r1
 8000396:	3304      	adds	r3, #4
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	2b00      	cmp	r3, #0
 800039c:	d149      	bne.n	8000432 <SCH_Update+0xca>
				// The task is due to run
				// Inc. the ’RunMe’ flag
				SCH_tasks_G[Index].RunMe += 1;
 800039e:	79fa      	ldrb	r2, [r7, #7]
 80003a0:	4933      	ldr	r1, [pc, #204]	@ (8000470 <SCH_Update+0x108>)
 80003a2:	4613      	mov	r3, r2
 80003a4:	009b      	lsls	r3, r3, #2
 80003a6:	4413      	add	r3, r2
 80003a8:	009b      	lsls	r3, r3, #2
 80003aa:	440b      	add	r3, r1
 80003ac:	330c      	adds	r3, #12
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	79fa      	ldrb	r2, [r7, #7]
 80003b2:	3301      	adds	r3, #1
 80003b4:	b2d8      	uxtb	r0, r3
 80003b6:	492e      	ldr	r1, [pc, #184]	@ (8000470 <SCH_Update+0x108>)
 80003b8:	4613      	mov	r3, r2
 80003ba:	009b      	lsls	r3, r3, #2
 80003bc:	4413      	add	r3, r2
 80003be:	009b      	lsls	r3, r3, #2
 80003c0:	440b      	add	r3, r1
 80003c2:	330c      	adds	r3, #12
 80003c4:	4602      	mov	r2, r0
 80003c6:	701a      	strb	r2, [r3, #0]
				queue[tail] = Index;
 80003c8:	4b2a      	ldr	r3, [pc, #168]	@ (8000474 <SCH_Update+0x10c>)
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	4619      	mov	r1, r3
 80003ce:	4a2a      	ldr	r2, [pc, #168]	@ (8000478 <SCH_Update+0x110>)
 80003d0:	79fb      	ldrb	r3, [r7, #7]
 80003d2:	5453      	strb	r3, [r2, r1]
				tail = (tail + 1) % SCH_MAX_TASKS;
 80003d4:	4b27      	ldr	r3, [pc, #156]	@ (8000474 <SCH_Update+0x10c>)
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	1c5a      	adds	r2, r3, #1
 80003da:	4b28      	ldr	r3, [pc, #160]	@ (800047c <SCH_Update+0x114>)
 80003dc:	fb83 1302 	smull	r1, r3, r3, r2
 80003e0:	1119      	asrs	r1, r3, #4
 80003e2:	17d3      	asrs	r3, r2, #31
 80003e4:	1ac9      	subs	r1, r1, r3
 80003e6:	460b      	mov	r3, r1
 80003e8:	009b      	lsls	r3, r3, #2
 80003ea:	440b      	add	r3, r1
 80003ec:	00db      	lsls	r3, r3, #3
 80003ee:	1ad1      	subs	r1, r2, r3
 80003f0:	b2ca      	uxtb	r2, r1
 80003f2:	4b20      	ldr	r3, [pc, #128]	@ (8000474 <SCH_Update+0x10c>)
 80003f4:	701a      	strb	r2, [r3, #0]
				if (SCH_tasks_G[Index].Period) {
 80003f6:	79fa      	ldrb	r2, [r7, #7]
 80003f8:	491d      	ldr	r1, [pc, #116]	@ (8000470 <SCH_Update+0x108>)
 80003fa:	4613      	mov	r3, r2
 80003fc:	009b      	lsls	r3, r3, #2
 80003fe:	4413      	add	r3, r2
 8000400:	009b      	lsls	r3, r3, #2
 8000402:	440b      	add	r3, r1
 8000404:	3308      	adds	r3, #8
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	2b00      	cmp	r3, #0
 800040a:	d025      	beq.n	8000458 <SCH_Update+0xf0>
					// Schedule periodic tasks to run again
					SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
 800040c:	79f9      	ldrb	r1, [r7, #7]
 800040e:	79fa      	ldrb	r2, [r7, #7]
 8000410:	4817      	ldr	r0, [pc, #92]	@ (8000470 <SCH_Update+0x108>)
 8000412:	460b      	mov	r3, r1
 8000414:	009b      	lsls	r3, r3, #2
 8000416:	440b      	add	r3, r1
 8000418:	009b      	lsls	r3, r3, #2
 800041a:	4403      	add	r3, r0
 800041c:	3308      	adds	r3, #8
 800041e:	6819      	ldr	r1, [r3, #0]
 8000420:	4813      	ldr	r0, [pc, #76]	@ (8000470 <SCH_Update+0x108>)
 8000422:	4613      	mov	r3, r2
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	4413      	add	r3, r2
 8000428:	009b      	lsls	r3, r3, #2
 800042a:	4403      	add	r3, r0
 800042c:	3304      	adds	r3, #4
 800042e:	6019      	str	r1, [r3, #0]
 8000430:	e012      	b.n	8000458 <SCH_Update+0xf0>
				}
			} else {
				// Not yet ready to run: just decrement the delay
				SCH_tasks_G[Index].Delay -= 1;
 8000432:	79fa      	ldrb	r2, [r7, #7]
 8000434:	490e      	ldr	r1, [pc, #56]	@ (8000470 <SCH_Update+0x108>)
 8000436:	4613      	mov	r3, r2
 8000438:	009b      	lsls	r3, r3, #2
 800043a:	4413      	add	r3, r2
 800043c:	009b      	lsls	r3, r3, #2
 800043e:	440b      	add	r3, r1
 8000440:	3304      	adds	r3, #4
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	79fa      	ldrb	r2, [r7, #7]
 8000446:	1e59      	subs	r1, r3, #1
 8000448:	4809      	ldr	r0, [pc, #36]	@ (8000470 <SCH_Update+0x108>)
 800044a:	4613      	mov	r3, r2
 800044c:	009b      	lsls	r3, r3, #2
 800044e:	4413      	add	r3, r2
 8000450:	009b      	lsls	r3, r3, #2
 8000452:	4403      	add	r3, r0
 8000454:	3304      	adds	r3, #4
 8000456:	6019      	str	r1, [r3, #0]
	for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8000458:	79fb      	ldrb	r3, [r7, #7]
 800045a:	3301      	adds	r3, #1
 800045c:	71fb      	strb	r3, [r7, #7]
 800045e:	79fb      	ldrb	r3, [r7, #7]
 8000460:	2b27      	cmp	r3, #39	@ 0x27
 8000462:	d987      	bls.n	8000374 <SCH_Update+0xc>
			}
		}
	}
}
 8000464:	bf00      	nop
 8000466:	bf00      	nop
 8000468:	370c      	adds	r7, #12
 800046a:	46bd      	mov	sp, r7
 800046c:	bc80      	pop	{r7}
 800046e:	4770      	bx	lr
 8000470:	200000a4 	.word	0x200000a4
 8000474:	200000a2 	.word	0x200000a2
 8000478:	200003c4 	.word	0x200003c4
 800047c:	66666667 	.word	0x66666667

08000480 <SCH_Add_Task>:

unsigned char SCH_Add_Task(void (*pFunction)(), unsigned int DELAY,
		unsigned int PERIOD) {
 8000480:	b480      	push	{r7}
 8000482:	b087      	sub	sp, #28
 8000484:	af00      	add	r7, sp, #0
 8000486:	60f8      	str	r0, [r7, #12]
 8000488:	60b9      	str	r1, [r7, #8]
 800048a:	607a      	str	r2, [r7, #4]
	unsigned char Index = 0;
 800048c:	2300      	movs	r3, #0
 800048e:	75fb      	strb	r3, [r7, #23]
	// First find a gap in the array (if there is one)
	while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS)) {
 8000490:	e002      	b.n	8000498 <SCH_Add_Task+0x18>
		Index++;
 8000492:	7dfb      	ldrb	r3, [r7, #23]
 8000494:	3301      	adds	r3, #1
 8000496:	75fb      	strb	r3, [r7, #23]
	while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS)) {
 8000498:	7dfa      	ldrb	r2, [r7, #23]
 800049a:	4920      	ldr	r1, [pc, #128]	@ (800051c <SCH_Add_Task+0x9c>)
 800049c:	4613      	mov	r3, r2
 800049e:	009b      	lsls	r3, r3, #2
 80004a0:	4413      	add	r3, r2
 80004a2:	009b      	lsls	r3, r3, #2
 80004a4:	440b      	add	r3, r1
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d002      	beq.n	80004b2 <SCH_Add_Task+0x32>
 80004ac:	7dfb      	ldrb	r3, [r7, #23]
 80004ae:	2b27      	cmp	r3, #39	@ 0x27
 80004b0:	d9ef      	bls.n	8000492 <SCH_Add_Task+0x12>
	}
	// Have we reached the end of the list?
	if (Index == SCH_MAX_TASKS) {
 80004b2:	7dfb      	ldrb	r3, [r7, #23]
 80004b4:	2b28      	cmp	r3, #40	@ 0x28
 80004b6:	d104      	bne.n	80004c2 <SCH_Add_Task+0x42>
		// Task list is full
		// Set the global error variable
		Error_code_G = ERROR_SCH_TOO_MANY_TASKS;
 80004b8:	4b19      	ldr	r3, [pc, #100]	@ (8000520 <SCH_Add_Task+0xa0>)
 80004ba:	2201      	movs	r2, #1
 80004bc:	701a      	strb	r2, [r3, #0]
		// Also return an error code
		return SCH_MAX_TASKS;
 80004be:	2328      	movs	r3, #40	@ 0x28
 80004c0:	e027      	b.n	8000512 <SCH_Add_Task+0x92>
	}
	// If we’re here, there is a space in the task array
	SCH_tasks_G[Index].pTask = pFunction;
 80004c2:	7dfa      	ldrb	r2, [r7, #23]
 80004c4:	4915      	ldr	r1, [pc, #84]	@ (800051c <SCH_Add_Task+0x9c>)
 80004c6:	4613      	mov	r3, r2
 80004c8:	009b      	lsls	r3, r3, #2
 80004ca:	4413      	add	r3, r2
 80004cc:	009b      	lsls	r3, r3, #2
 80004ce:	440b      	add	r3, r1
 80004d0:	68fa      	ldr	r2, [r7, #12]
 80004d2:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[Index].Delay = DELAY;
 80004d4:	7dfa      	ldrb	r2, [r7, #23]
 80004d6:	4911      	ldr	r1, [pc, #68]	@ (800051c <SCH_Add_Task+0x9c>)
 80004d8:	4613      	mov	r3, r2
 80004da:	009b      	lsls	r3, r3, #2
 80004dc:	4413      	add	r3, r2
 80004de:	009b      	lsls	r3, r3, #2
 80004e0:	440b      	add	r3, r1
 80004e2:	3304      	adds	r3, #4
 80004e4:	68ba      	ldr	r2, [r7, #8]
 80004e6:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[Index].Period = PERIOD;
 80004e8:	7dfa      	ldrb	r2, [r7, #23]
 80004ea:	490c      	ldr	r1, [pc, #48]	@ (800051c <SCH_Add_Task+0x9c>)
 80004ec:	4613      	mov	r3, r2
 80004ee:	009b      	lsls	r3, r3, #2
 80004f0:	4413      	add	r3, r2
 80004f2:	009b      	lsls	r3, r3, #2
 80004f4:	440b      	add	r3, r1
 80004f6:	3308      	adds	r3, #8
 80004f8:	687a      	ldr	r2, [r7, #4]
 80004fa:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[Index].RunMe = 0;
 80004fc:	7dfa      	ldrb	r2, [r7, #23]
 80004fe:	4907      	ldr	r1, [pc, #28]	@ (800051c <SCH_Add_Task+0x9c>)
 8000500:	4613      	mov	r3, r2
 8000502:	009b      	lsls	r3, r3, #2
 8000504:	4413      	add	r3, r2
 8000506:	009b      	lsls	r3, r3, #2
 8000508:	440b      	add	r3, r1
 800050a:	330c      	adds	r3, #12
 800050c:	2200      	movs	r2, #0
 800050e:	701a      	strb	r2, [r3, #0]
	// return position of task (to allow later deletion)
	return Index;
 8000510:	7dfb      	ldrb	r3, [r7, #23]
}
 8000512:	4618      	mov	r0, r3
 8000514:	371c      	adds	r7, #28
 8000516:	46bd      	mov	sp, r7
 8000518:	bc80      	pop	{r7}
 800051a:	4770      	bx	lr
 800051c:	200000a4 	.word	0x200000a4
 8000520:	200000a0 	.word	0x200000a0

08000524 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
	unsigned char Index;
	// Dispatches (runs) the next task (if one is ready)
	while (head != tail) {
 800052a:	e04e      	b.n	80005ca <SCH_Dispatch_Tasks+0xa6>
		if (SCH_tasks_G[Index].RunMe > 0) {
 800052c:	79fa      	ldrb	r2, [r7, #7]
 800052e:	492d      	ldr	r1, [pc, #180]	@ (80005e4 <SCH_Dispatch_Tasks+0xc0>)
 8000530:	4613      	mov	r3, r2
 8000532:	009b      	lsls	r3, r3, #2
 8000534:	4413      	add	r3, r2
 8000536:	009b      	lsls	r3, r3, #2
 8000538:	440b      	add	r3, r1
 800053a:	330c      	adds	r3, #12
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d043      	beq.n	80005ca <SCH_Dispatch_Tasks+0xa6>
			Index = queue[head];
 8000542:	4b29      	ldr	r3, [pc, #164]	@ (80005e8 <SCH_Dispatch_Tasks+0xc4>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	461a      	mov	r2, r3
 8000548:	4b28      	ldr	r3, [pc, #160]	@ (80005ec <SCH_Dispatch_Tasks+0xc8>)
 800054a:	5c9b      	ldrb	r3, [r3, r2]
 800054c:	71fb      	strb	r3, [r7, #7]
			head = (head + 1) % SCH_MAX_TASKS;
 800054e:	4b26      	ldr	r3, [pc, #152]	@ (80005e8 <SCH_Dispatch_Tasks+0xc4>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	1c5a      	adds	r2, r3, #1
 8000554:	4b26      	ldr	r3, [pc, #152]	@ (80005f0 <SCH_Dispatch_Tasks+0xcc>)
 8000556:	fb83 1302 	smull	r1, r3, r3, r2
 800055a:	1119      	asrs	r1, r3, #4
 800055c:	17d3      	asrs	r3, r2, #31
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	460b      	mov	r3, r1
 8000562:	009b      	lsls	r3, r3, #2
 8000564:	440b      	add	r3, r1
 8000566:	00db      	lsls	r3, r3, #3
 8000568:	1ad1      	subs	r1, r2, r3
 800056a:	b2ca      	uxtb	r2, r1
 800056c:	4b1e      	ldr	r3, [pc, #120]	@ (80005e8 <SCH_Dispatch_Tasks+0xc4>)
 800056e:	701a      	strb	r2, [r3, #0]
			(*SCH_tasks_G[Index].pTask)(); // Run the task
 8000570:	79fa      	ldrb	r2, [r7, #7]
 8000572:	491c      	ldr	r1, [pc, #112]	@ (80005e4 <SCH_Dispatch_Tasks+0xc0>)
 8000574:	4613      	mov	r3, r2
 8000576:	009b      	lsls	r3, r3, #2
 8000578:	4413      	add	r3, r2
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	440b      	add	r3, r1
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4798      	blx	r3
			SCH_tasks_G[Index].RunMe -= 1; // Reset / reduce RunMe flag
 8000582:	79fa      	ldrb	r2, [r7, #7]
 8000584:	4917      	ldr	r1, [pc, #92]	@ (80005e4 <SCH_Dispatch_Tasks+0xc0>)
 8000586:	4613      	mov	r3, r2
 8000588:	009b      	lsls	r3, r3, #2
 800058a:	4413      	add	r3, r2
 800058c:	009b      	lsls	r3, r3, #2
 800058e:	440b      	add	r3, r1
 8000590:	330c      	adds	r3, #12
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	79fa      	ldrb	r2, [r7, #7]
 8000596:	3b01      	subs	r3, #1
 8000598:	b2d8      	uxtb	r0, r3
 800059a:	4912      	ldr	r1, [pc, #72]	@ (80005e4 <SCH_Dispatch_Tasks+0xc0>)
 800059c:	4613      	mov	r3, r2
 800059e:	009b      	lsls	r3, r3, #2
 80005a0:	4413      	add	r3, r2
 80005a2:	009b      	lsls	r3, r3, #2
 80005a4:	440b      	add	r3, r1
 80005a6:	330c      	adds	r3, #12
 80005a8:	4602      	mov	r2, r0
 80005aa:	701a      	strb	r2, [r3, #0]
			// Periodic tasks will automatically run again
			// − if this is a ’one shot’ task, remove it from the array
			if (SCH_tasks_G[Index].Period == 0) {
 80005ac:	79fa      	ldrb	r2, [r7, #7]
 80005ae:	490d      	ldr	r1, [pc, #52]	@ (80005e4 <SCH_Dispatch_Tasks+0xc0>)
 80005b0:	4613      	mov	r3, r2
 80005b2:	009b      	lsls	r3, r3, #2
 80005b4:	4413      	add	r3, r2
 80005b6:	009b      	lsls	r3, r3, #2
 80005b8:	440b      	add	r3, r1
 80005ba:	3308      	adds	r3, #8
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d103      	bne.n	80005ca <SCH_Dispatch_Tasks+0xa6>
				SCH_Delete_Task(Index);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	4618      	mov	r0, r3
 80005c6:	f000 f817 	bl	80005f8 <SCH_Delete_Task>
	while (head != tail) {
 80005ca:	4b07      	ldr	r3, [pc, #28]	@ (80005e8 <SCH_Dispatch_Tasks+0xc4>)
 80005cc:	781a      	ldrb	r2, [r3, #0]
 80005ce:	4b09      	ldr	r3, [pc, #36]	@ (80005f4 <SCH_Dispatch_Tasks+0xd0>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	429a      	cmp	r2, r3
 80005d4:	d1aa      	bne.n	800052c <SCH_Dispatch_Tasks+0x8>
		}
	}
	// Report system status
	//SCH_Report_Status();
	// The scheduler enters idle mode at this point
	SCH_Go_To_Sleep();
 80005d6:	f000 f857 	bl	8000688 <SCH_Go_To_Sleep>
}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	200000a4 	.word	0x200000a4
 80005e8:	200000a1 	.word	0x200000a1
 80005ec:	200003c4 	.word	0x200003c4
 80005f0:	66666667 	.word	0x66666667
 80005f4:	200000a2 	.word	0x200000a2

080005f8 <SCH_Delete_Task>:

unsigned char SCH_Delete_Task(const unsigned char TASK_INDEX) {
 80005f8:	b480      	push	{r7}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]
	unsigned char Return_code;
	if (SCH_tasks_G[TASK_INDEX].pTask == 0) {
 8000602:	79fa      	ldrb	r2, [r7, #7]
 8000604:	491e      	ldr	r1, [pc, #120]	@ (8000680 <SCH_Delete_Task+0x88>)
 8000606:	4613      	mov	r3, r2
 8000608:	009b      	lsls	r3, r3, #2
 800060a:	4413      	add	r3, r2
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	440b      	add	r3, r1
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d105      	bne.n	8000622 <SCH_Delete_Task+0x2a>
		// No task at this location ...
		//
		// Set the global error variable
		Error_code_G = ERROR_SCH_CANNOT_DELETE_TASK;
 8000616:	4b1b      	ldr	r3, [pc, #108]	@ (8000684 <SCH_Delete_Task+0x8c>)
 8000618:	2202      	movs	r2, #2
 800061a:	701a      	strb	r2, [r3, #0]
		// ... also return an error code
		Return_code = RETURN_ERROR;
 800061c:	2303      	movs	r3, #3
 800061e:	73fb      	strb	r3, [r7, #15]
 8000620:	e001      	b.n	8000626 <SCH_Delete_Task+0x2e>
	} else {
		Return_code = RETURN_NORMAL;
 8000622:	2304      	movs	r3, #4
 8000624:	73fb      	strb	r3, [r7, #15]
	}
	SCH_tasks_G[TASK_INDEX].pTask = 0x0000;
 8000626:	79fa      	ldrb	r2, [r7, #7]
 8000628:	4915      	ldr	r1, [pc, #84]	@ (8000680 <SCH_Delete_Task+0x88>)
 800062a:	4613      	mov	r3, r2
 800062c:	009b      	lsls	r3, r3, #2
 800062e:	4413      	add	r3, r2
 8000630:	009b      	lsls	r3, r3, #2
 8000632:	440b      	add	r3, r1
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].Delay = 0;
 8000638:	79fa      	ldrb	r2, [r7, #7]
 800063a:	4911      	ldr	r1, [pc, #68]	@ (8000680 <SCH_Delete_Task+0x88>)
 800063c:	4613      	mov	r3, r2
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	4413      	add	r3, r2
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	440b      	add	r3, r1
 8000646:	3304      	adds	r3, #4
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].Period = 0;
 800064c:	79fa      	ldrb	r2, [r7, #7]
 800064e:	490c      	ldr	r1, [pc, #48]	@ (8000680 <SCH_Delete_Task+0x88>)
 8000650:	4613      	mov	r3, r2
 8000652:	009b      	lsls	r3, r3, #2
 8000654:	4413      	add	r3, r2
 8000656:	009b      	lsls	r3, r3, #2
 8000658:	440b      	add	r3, r1
 800065a:	3308      	adds	r3, #8
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].RunMe = 0;
 8000660:	79fa      	ldrb	r2, [r7, #7]
 8000662:	4907      	ldr	r1, [pc, #28]	@ (8000680 <SCH_Delete_Task+0x88>)
 8000664:	4613      	mov	r3, r2
 8000666:	009b      	lsls	r3, r3, #2
 8000668:	4413      	add	r3, r2
 800066a:	009b      	lsls	r3, r3, #2
 800066c:	440b      	add	r3, r1
 800066e:	330c      	adds	r3, #12
 8000670:	2200      	movs	r2, #0
 8000672:	701a      	strb	r2, [r3, #0]
	return Return_code; // return status
 8000674:	7bfb      	ldrb	r3, [r7, #15]
}
 8000676:	4618      	mov	r0, r3
 8000678:	3714      	adds	r7, #20
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr
 8000680:	200000a4 	.word	0x200000a4
 8000684:	200000a0 	.word	0x200000a0

08000688 <SCH_Go_To_Sleep>:

void SCH_Go_To_Sleep() {
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800068c:	2101      	movs	r1, #1
 800068e:	2000      	movs	r0, #0
 8000690:	f001 fd86 	bl	80021a0 <HAL_PWR_EnterSLEEPMode>
}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}

08000698 <reset7Led>:
#include "blinky_4led.h"
#include "seven_segment.h"

int clockBuffer[4] = {1, 0, 0, 3};

void reset7Led(){
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
	SEG1_status = 0;
 800069c:	4b07      	ldr	r3, [pc, #28]	@ (80006bc <reset7Led+0x24>)
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
	SEG2_status = 1;
 80006a2:	4b07      	ldr	r3, [pc, #28]	@ (80006c0 <reset7Led+0x28>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	601a      	str	r2, [r3, #0]
	SEG3_status = 1;
 80006a8:	4b06      	ldr	r3, [pc, #24]	@ (80006c4 <reset7Led+0x2c>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	601a      	str	r2, [r3, #0]
	SEG4_status = 1;
 80006ae:	4b06      	ldr	r3, [pc, #24]	@ (80006c8 <reset7Led+0x30>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	601a      	str	r2, [r3, #0]
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr
 80006bc:	200003f4 	.word	0x200003f4
 80006c0:	20000060 	.word	0x20000060
 80006c4:	20000064 	.word	0x20000064
 80006c8:	20000068 	.word	0x20000068

080006cc <blinky4led>:

void blinky4led() {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
    if (timer2_flag == 1) {
 80006d0:	4b34      	ldr	r3, [pc, #208]	@ (80007a4 <blinky4led+0xd8>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d163      	bne.n	80007a0 <blinky4led+0xd4>
    	setTimer2(duration_blinky);
 80006d8:	4b33      	ldr	r3, [pc, #204]	@ (80007a8 <blinky4led+0xdc>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4618      	mov	r0, r3
 80006de:	f001 f921 	bl	8001924 <setTimer2>

        HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SEG1_status);
 80006e2:	4b32      	ldr	r3, [pc, #200]	@ (80007ac <blinky4led+0xe0>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	461a      	mov	r2, r3
 80006ea:	2102      	movs	r1, #2
 80006ec:	4830      	ldr	r0, [pc, #192]	@ (80007b0 <blinky4led+0xe4>)
 80006ee:	f001 fd3e 	bl	800216e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SEG2_status);
 80006f2:	4b30      	ldr	r3, [pc, #192]	@ (80007b4 <blinky4led+0xe8>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	461a      	mov	r2, r3
 80006fa:	2104      	movs	r1, #4
 80006fc:	482c      	ldr	r0, [pc, #176]	@ (80007b0 <blinky4led+0xe4>)
 80006fe:	f001 fd36 	bl	800216e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SEG3_status);
 8000702:	4b2d      	ldr	r3, [pc, #180]	@ (80007b8 <blinky4led+0xec>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	b2db      	uxtb	r3, r3
 8000708:	461a      	mov	r2, r3
 800070a:	2108      	movs	r1, #8
 800070c:	4828      	ldr	r0, [pc, #160]	@ (80007b0 <blinky4led+0xe4>)
 800070e:	f001 fd2e 	bl	800216e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SEG4_status);
 8000712:	4b2a      	ldr	r3, [pc, #168]	@ (80007bc <blinky4led+0xf0>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	b2db      	uxtb	r3, r3
 8000718:	461a      	mov	r2, r3
 800071a:	2110      	movs	r1, #16
 800071c:	4824      	ldr	r0, [pc, #144]	@ (80007b0 <blinky4led+0xe4>)
 800071e:	f001 fd26 	bl	800216e <HAL_GPIO_WritePin>

        if (SEG1_status == 0) {
 8000722:	4b22      	ldr	r3, [pc, #136]	@ (80007ac <blinky4led+0xe0>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d10b      	bne.n	8000742 <blinky4led+0x76>
            display7SEG(clockBuffer[0]);
 800072a:	4b25      	ldr	r3, [pc, #148]	@ (80007c0 <blinky4led+0xf4>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4618      	mov	r0, r3
 8000730:	f000 ff1e 	bl	8001570 <display7SEG>
            SEG1_status = 1;
 8000734:	4b1d      	ldr	r3, [pc, #116]	@ (80007ac <blinky4led+0xe0>)
 8000736:	2201      	movs	r2, #1
 8000738:	601a      	str	r2, [r3, #0]
            SEG2_status = 0;
 800073a:	4b1e      	ldr	r3, [pc, #120]	@ (80007b4 <blinky4led+0xe8>)
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
            display7SEG(clockBuffer[3]);
            SEG4_status = 1;
            SEG1_status = 0;
        }
    }
}
 8000740:	e02e      	b.n	80007a0 <blinky4led+0xd4>
        } else if (SEG2_status == 0) {
 8000742:	4b1c      	ldr	r3, [pc, #112]	@ (80007b4 <blinky4led+0xe8>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d10b      	bne.n	8000762 <blinky4led+0x96>
            display7SEG(clockBuffer[1]);
 800074a:	4b1d      	ldr	r3, [pc, #116]	@ (80007c0 <blinky4led+0xf4>)
 800074c:	685b      	ldr	r3, [r3, #4]
 800074e:	4618      	mov	r0, r3
 8000750:	f000 ff0e 	bl	8001570 <display7SEG>
            SEG2_status = 1;
 8000754:	4b17      	ldr	r3, [pc, #92]	@ (80007b4 <blinky4led+0xe8>)
 8000756:	2201      	movs	r2, #1
 8000758:	601a      	str	r2, [r3, #0]
            SEG3_status = 0;
 800075a:	4b17      	ldr	r3, [pc, #92]	@ (80007b8 <blinky4led+0xec>)
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
}
 8000760:	e01e      	b.n	80007a0 <blinky4led+0xd4>
        } else if (SEG3_status == 0) {
 8000762:	4b15      	ldr	r3, [pc, #84]	@ (80007b8 <blinky4led+0xec>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d10b      	bne.n	8000782 <blinky4led+0xb6>
            display7SEG(clockBuffer[2]);
 800076a:	4b15      	ldr	r3, [pc, #84]	@ (80007c0 <blinky4led+0xf4>)
 800076c:	689b      	ldr	r3, [r3, #8]
 800076e:	4618      	mov	r0, r3
 8000770:	f000 fefe 	bl	8001570 <display7SEG>
            SEG3_status = 1;
 8000774:	4b10      	ldr	r3, [pc, #64]	@ (80007b8 <blinky4led+0xec>)
 8000776:	2201      	movs	r2, #1
 8000778:	601a      	str	r2, [r3, #0]
            SEG4_status = 0;
 800077a:	4b10      	ldr	r3, [pc, #64]	@ (80007bc <blinky4led+0xf0>)
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
}
 8000780:	e00e      	b.n	80007a0 <blinky4led+0xd4>
        } else if (SEG4_status == 0) {
 8000782:	4b0e      	ldr	r3, [pc, #56]	@ (80007bc <blinky4led+0xf0>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d10a      	bne.n	80007a0 <blinky4led+0xd4>
            display7SEG(clockBuffer[3]);
 800078a:	4b0d      	ldr	r3, [pc, #52]	@ (80007c0 <blinky4led+0xf4>)
 800078c:	68db      	ldr	r3, [r3, #12]
 800078e:	4618      	mov	r0, r3
 8000790:	f000 feee 	bl	8001570 <display7SEG>
            SEG4_status = 1;
 8000794:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <blinky4led+0xf0>)
 8000796:	2201      	movs	r2, #1
 8000798:	601a      	str	r2, [r3, #0]
            SEG1_status = 0;
 800079a:	4b04      	ldr	r3, [pc, #16]	@ (80007ac <blinky4led+0xe0>)
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	2000044c 	.word	0x2000044c
 80007a8:	2000005c 	.word	0x2000005c
 80007ac:	200003f4 	.word	0x200003f4
 80007b0:	40010800 	.word	0x40010800
 80007b4:	20000060 	.word	0x20000060
 80007b8:	20000064 	.word	0x20000064
 80007bc:	20000068 	.word	0x20000068
 80007c0:	20000030 	.word	0x20000030

080007c4 <updateDisplayClock>:

void updateDisplayClock(int duration1, int duration2){
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	6039      	str	r1, [r7, #0]
	clockBuffer[0] = (duration1 / 100) / 10;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4a1e      	ldr	r2, [pc, #120]	@ (800084c <updateDisplayClock+0x88>)
 80007d2:	fb82 1203 	smull	r1, r2, r2, r3
 80007d6:	1192      	asrs	r2, r2, #6
 80007d8:	17db      	asrs	r3, r3, #31
 80007da:	1ad3      	subs	r3, r2, r3
 80007dc:	4a1c      	ldr	r2, [pc, #112]	@ (8000850 <updateDisplayClock+0x8c>)
 80007de:	6013      	str	r3, [r2, #0]
	clockBuffer[1] = (duration1 / 100) % 10;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	4a1c      	ldr	r2, [pc, #112]	@ (8000854 <updateDisplayClock+0x90>)
 80007e4:	fb82 1203 	smull	r1, r2, r2, r3
 80007e8:	1152      	asrs	r2, r2, #5
 80007ea:	17db      	asrs	r3, r3, #31
 80007ec:	1ad1      	subs	r1, r2, r3
 80007ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000858 <updateDisplayClock+0x94>)
 80007f0:	fb83 2301 	smull	r2, r3, r3, r1
 80007f4:	109a      	asrs	r2, r3, #2
 80007f6:	17cb      	asrs	r3, r1, #31
 80007f8:	1ad2      	subs	r2, r2, r3
 80007fa:	4613      	mov	r3, r2
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	4413      	add	r3, r2
 8000800:	005b      	lsls	r3, r3, #1
 8000802:	1aca      	subs	r2, r1, r3
 8000804:	4b12      	ldr	r3, [pc, #72]	@ (8000850 <updateDisplayClock+0x8c>)
 8000806:	605a      	str	r2, [r3, #4]
	clockBuffer[2] = (duration2 / 100) / 10;
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	4a10      	ldr	r2, [pc, #64]	@ (800084c <updateDisplayClock+0x88>)
 800080c:	fb82 1203 	smull	r1, r2, r2, r3
 8000810:	1192      	asrs	r2, r2, #6
 8000812:	17db      	asrs	r3, r3, #31
 8000814:	1ad3      	subs	r3, r2, r3
 8000816:	4a0e      	ldr	r2, [pc, #56]	@ (8000850 <updateDisplayClock+0x8c>)
 8000818:	6093      	str	r3, [r2, #8]
	clockBuffer[3] = (duration2 / 100) % 10;
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	4a0d      	ldr	r2, [pc, #52]	@ (8000854 <updateDisplayClock+0x90>)
 800081e:	fb82 1203 	smull	r1, r2, r2, r3
 8000822:	1152      	asrs	r2, r2, #5
 8000824:	17db      	asrs	r3, r3, #31
 8000826:	1ad1      	subs	r1, r2, r3
 8000828:	4b0b      	ldr	r3, [pc, #44]	@ (8000858 <updateDisplayClock+0x94>)
 800082a:	fb83 2301 	smull	r2, r3, r3, r1
 800082e:	109a      	asrs	r2, r3, #2
 8000830:	17cb      	asrs	r3, r1, #31
 8000832:	1ad2      	subs	r2, r2, r3
 8000834:	4613      	mov	r3, r2
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	4413      	add	r3, r2
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	1aca      	subs	r2, r1, r3
 800083e:	4b04      	ldr	r3, [pc, #16]	@ (8000850 <updateDisplayClock+0x8c>)
 8000840:	60da      	str	r2, [r3, #12]
}
 8000842:	bf00      	nop
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr
 800084c:	10624dd3 	.word	0x10624dd3
 8000850:	20000030 	.word	0x20000030
 8000854:	51eb851f 	.word	0x51eb851f
 8000858:	66666667 	.word	0x66666667

0800085c <updateManualClock>:

void updateManualClock(int duration){
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
	clockBuffer[0] = 0;
 8000864:	4b13      	ldr	r3, [pc, #76]	@ (80008b4 <updateManualClock+0x58>)
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
	clockBuffer[1] = 0;
 800086a:	4b12      	ldr	r3, [pc, #72]	@ (80008b4 <updateManualClock+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	605a      	str	r2, [r3, #4]
	clockBuffer[2] = (duration / 100) / 10;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4a11      	ldr	r2, [pc, #68]	@ (80008b8 <updateManualClock+0x5c>)
 8000874:	fb82 1203 	smull	r1, r2, r2, r3
 8000878:	1192      	asrs	r2, r2, #6
 800087a:	17db      	asrs	r3, r3, #31
 800087c:	1ad3      	subs	r3, r2, r3
 800087e:	4a0d      	ldr	r2, [pc, #52]	@ (80008b4 <updateManualClock+0x58>)
 8000880:	6093      	str	r3, [r2, #8]
	clockBuffer[3] = (duration / 100) % 10;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	4a0d      	ldr	r2, [pc, #52]	@ (80008bc <updateManualClock+0x60>)
 8000886:	fb82 1203 	smull	r1, r2, r2, r3
 800088a:	1152      	asrs	r2, r2, #5
 800088c:	17db      	asrs	r3, r3, #31
 800088e:	1ad1      	subs	r1, r2, r3
 8000890:	4b0b      	ldr	r3, [pc, #44]	@ (80008c0 <updateManualClock+0x64>)
 8000892:	fb83 2301 	smull	r2, r3, r3, r1
 8000896:	109a      	asrs	r2, r3, #2
 8000898:	17cb      	asrs	r3, r1, #31
 800089a:	1ad2      	subs	r2, r2, r3
 800089c:	4613      	mov	r3, r2
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	4413      	add	r3, r2
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	1aca      	subs	r2, r1, r3
 80008a6:	4b03      	ldr	r3, [pc, #12]	@ (80008b4 <updateManualClock+0x58>)
 80008a8:	60da      	str	r2, [r3, #12]
}
 80008aa:	bf00      	nop
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bc80      	pop	{r7}
 80008b2:	4770      	bx	lr
 80008b4:	20000030 	.word	0x20000030
 80008b8:	10624dd3 	.word	0x10624dd3
 80008bc:	51eb851f 	.word	0x51eb851f
 80008c0:	66666667 	.word	0x66666667

080008c4 <realTimeClock>:

void realTimeClock(){
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
	if (clock_status == CLOCK_DISPLAY){
 80008c8:	4b16      	ldr	r3, [pc, #88]	@ (8000924 <realTimeClock+0x60>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2b15      	cmp	r3, #21
 80008ce:	d126      	bne.n	800091e <realTimeClock+0x5a>
		if (timer3_flag == 1){
 80008d0:	4b15      	ldr	r3, [pc, #84]	@ (8000928 <realTimeClock+0x64>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d114      	bne.n	8000902 <realTimeClock+0x3e>
			setTimer3(100);
 80008d8:	2064      	movs	r0, #100	@ 0x64
 80008da:	f001 f837 	bl	800194c <setTimer3>
			duration_road1 -= 100;
 80008de:	4b13      	ldr	r3, [pc, #76]	@ (800092c <realTimeClock+0x68>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	3b64      	subs	r3, #100	@ 0x64
 80008e4:	4a11      	ldr	r2, [pc, #68]	@ (800092c <realTimeClock+0x68>)
 80008e6:	6013      	str	r3, [r2, #0]
			duration_road2 -= 100;
 80008e8:	4b11      	ldr	r3, [pc, #68]	@ (8000930 <realTimeClock+0x6c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	3b64      	subs	r3, #100	@ 0x64
 80008ee:	4a10      	ldr	r2, [pc, #64]	@ (8000930 <realTimeClock+0x6c>)
 80008f0:	6013      	str	r3, [r2, #0]
			updateDisplayClock(duration_road1, duration_road2);
 80008f2:	4b0e      	ldr	r3, [pc, #56]	@ (800092c <realTimeClock+0x68>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a0e      	ldr	r2, [pc, #56]	@ (8000930 <realTimeClock+0x6c>)
 80008f8:	6812      	ldr	r2, [r2, #0]
 80008fa:	4611      	mov	r1, r2
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff ff61 	bl	80007c4 <updateDisplayClock>
		}
		if (duration_road1 < 0) duration_road1 = 0;
 8000902:	4b0a      	ldr	r3, [pc, #40]	@ (800092c <realTimeClock+0x68>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	2b00      	cmp	r3, #0
 8000908:	da02      	bge.n	8000910 <realTimeClock+0x4c>
 800090a:	4b08      	ldr	r3, [pc, #32]	@ (800092c <realTimeClock+0x68>)
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
		if (duration_road2 < 0) duration_road2 = 0;
 8000910:	4b07      	ldr	r3, [pc, #28]	@ (8000930 <realTimeClock+0x6c>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	da02      	bge.n	800091e <realTimeClock+0x5a>
 8000918:	4b05      	ldr	r3, [pc, #20]	@ (8000930 <realTimeClock+0x6c>)
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
	}
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000040 	.word	0x20000040
 8000928:	20000454 	.word	0x20000454
 800092c:	20000044 	.word	0x20000044
 8000930:	20000048 	.word	0x20000048

08000934 <displayClock>:

void displayClock(){
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
	switch (clock_status) {
 8000938:	4b11      	ldr	r3, [pc, #68]	@ (8000980 <displayClock+0x4c>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	2b16      	cmp	r3, #22
 800093e:	d013      	beq.n	8000968 <displayClock+0x34>
 8000940:	2b16      	cmp	r3, #22
 8000942:	dc17      	bgt.n	8000974 <displayClock+0x40>
 8000944:	2b14      	cmp	r3, #20
 8000946:	d002      	beq.n	800094e <displayClock+0x1a>
 8000948:	2b15      	cmp	r3, #21
 800094a:	d004      	beq.n	8000956 <displayClock+0x22>
		case CLOCK_MAN:
			// TODO
			updateManualClock(duration_current);
			break;
		default:
			break;
 800094c:	e012      	b.n	8000974 <displayClock+0x40>
			clock_status = CLOCK_DISPLAY;
 800094e:	4b0c      	ldr	r3, [pc, #48]	@ (8000980 <displayClock+0x4c>)
 8000950:	2215      	movs	r2, #21
 8000952:	601a      	str	r2, [r3, #0]
			break;
 8000954:	e00f      	b.n	8000976 <displayClock+0x42>
			updateDisplayClock(duration_road1, duration_road2);
 8000956:	4b0b      	ldr	r3, [pc, #44]	@ (8000984 <displayClock+0x50>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a0b      	ldr	r2, [pc, #44]	@ (8000988 <displayClock+0x54>)
 800095c:	6812      	ldr	r2, [r2, #0]
 800095e:	4611      	mov	r1, r2
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff ff2f 	bl	80007c4 <updateDisplayClock>
			break;
 8000966:	e006      	b.n	8000976 <displayClock+0x42>
			updateManualClock(duration_current);
 8000968:	4b08      	ldr	r3, [pc, #32]	@ (800098c <displayClock+0x58>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff ff75 	bl	800085c <updateManualClock>
			break;
 8000972:	e000      	b.n	8000976 <displayClock+0x42>
			break;
 8000974:	bf00      	nop
	}
	blinky4led();
 8000976:	f7ff fea9 	bl	80006cc <blinky4led>
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000040 	.word	0x20000040
 8000984:	20000044 	.word	0x20000044
 8000988:	20000048 	.word	0x20000048
 800098c:	2000004c 	.word	0x2000004c

08000990 <fsm_automatic_run>:
#include "fsm_automatic.h"
#include "led.h"
#include "global.h"
#include "blinky_4led.h"

void fsm_automatic_run() {
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
	switch (status) {
 8000994:	4b99      	ldr	r3, [pc, #612]	@ (8000bfc <fsm_automatic_run+0x26c>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	3b01      	subs	r3, #1
 800099a:	2b04      	cmp	r3, #4
 800099c:	f200 8122 	bhi.w	8000be4 <fsm_automatic_run+0x254>
 80009a0:	a201      	add	r2, pc, #4	@ (adr r2, 80009a8 <fsm_automatic_run+0x18>)
 80009a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009a6:	bf00      	nop
 80009a8:	080009bd 	.word	0x080009bd
 80009ac:	080009ed 	.word	0x080009ed
 80009b0:	08000a73 	.word	0x08000a73
 80009b4:	08000af7 	.word	0x08000af7
 80009b8:	08000b75 	.word	0x08000b75
	case INIT:
		red1_off();
 80009bc:	f000 fc10 	bl	80011e0 <red1_off>
		yellow1_off();
 80009c0:	f000 fc3e 	bl	8001240 <yellow1_off>
		green1_off();
 80009c4:	f000 fc6c 	bl	80012a0 <green1_off>
		red2_off();
 80009c8:	f000 fc22 	bl	8001210 <red2_off>
		yellow2_off();
 80009cc:	f000 fc50 	bl	8001270 <yellow2_off>
		green2_off();
 80009d0:	f000 fc7e 	bl	80012d0 <green2_off>

		status = AUTO_RED_GREEN;
 80009d4:	4b89      	ldr	r3, [pc, #548]	@ (8000bfc <fsm_automatic_run+0x26c>)
 80009d6:	2202      	movs	r2, #2
 80009d8:	601a      	str	r2, [r3, #0]
		clock_status = CLOCK_DISPLAY;
 80009da:	4b89      	ldr	r3, [pc, #548]	@ (8000c00 <fsm_automatic_run+0x270>)
 80009dc:	2215      	movs	r2, #21
 80009de:	601a      	str	r2, [r3, #0]
		setTimer1(duration_green);
 80009e0:	4b88      	ldr	r3, [pc, #544]	@ (8000c04 <fsm_automatic_run+0x274>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4618      	mov	r0, r3
 80009e6:	f000 ff89 	bl	80018fc <setTimer1>
		break;
 80009ea:	e104      	b.n	8000bf6 <fsm_automatic_run+0x266>
	case AUTO_RED_GREEN:
		red1_on();
 80009ec:	f000 fbec 	bl	80011c8 <red1_on>
		yellow1_off();
 80009f0:	f000 fc26 	bl	8001240 <yellow1_off>
		green1_off();
 80009f4:	f000 fc54 	bl	80012a0 <green1_off>

		red2_off();
 80009f8:	f000 fc0a 	bl	8001210 <red2_off>
		yellow2_off();
 80009fc:	f000 fc38 	bl	8001270 <yellow2_off>
		green2_on();
 8000a00:	f000 fc5a 	bl	80012b8 <green2_on>

		if (isButton1Pressed() == 1) {
 8000a04:	f7ff fba2 	bl	800014c <isButton1Pressed>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d11a      	bne.n	8000a44 <fsm_automatic_run+0xb4>
			duration_add = 0;
 8000a0e:	4b7e      	ldr	r3, [pc, #504]	@ (8000c08 <fsm_automatic_run+0x278>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
			status = MAN_RED;
 8000a14:	4b79      	ldr	r3, [pc, #484]	@ (8000bfc <fsm_automatic_run+0x26c>)
 8000a16:	220c      	movs	r2, #12
 8000a18:	601a      	str	r2, [r3, #0]
			timer1_flag = 1;
 8000a1a:	4b7c      	ldr	r3, [pc, #496]	@ (8000c0c <fsm_automatic_run+0x27c>)
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	601a      	str	r2, [r3, #0]
			duration_current = duration_red;
 8000a20:	4b7b      	ldr	r3, [pc, #492]	@ (8000c10 <fsm_automatic_run+0x280>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a7b      	ldr	r2, [pc, #492]	@ (8000c14 <fsm_automatic_run+0x284>)
 8000a26:	6013      	str	r3, [r2, #0]
			updateManualClock(duration_current);
 8000a28:	4b7a      	ldr	r3, [pc, #488]	@ (8000c14 <fsm_automatic_run+0x284>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff ff15 	bl	800085c <updateManualClock>
			reset7Led();
 8000a32:	f7ff fe31 	bl	8000698 <reset7Led>
			clock_status = CLOCK_MAN;
 8000a36:	4b72      	ldr	r3, [pc, #456]	@ (8000c00 <fsm_automatic_run+0x270>)
 8000a38:	2216      	movs	r2, #22
 8000a3a:	601a      	str	r2, [r3, #0]
			setTimer1(TIME_MAN_MODE);
 8000a3c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a40:	f000 ff5c 	bl	80018fc <setTimer1>
		}

		if (timer1_flag == 1) {
 8000a44:	4b71      	ldr	r3, [pc, #452]	@ (8000c0c <fsm_automatic_run+0x27c>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	f040 80cd 	bne.w	8000be8 <fsm_automatic_run+0x258>
			duration_road1 = 200;
 8000a4e:	4b72      	ldr	r3, [pc, #456]	@ (8000c18 <fsm_automatic_run+0x288>)
 8000a50:	22c8      	movs	r2, #200	@ 0xc8
 8000a52:	601a      	str	r2, [r3, #0]
			duration_road2 = 200;
 8000a54:	4b71      	ldr	r3, [pc, #452]	@ (8000c1c <fsm_automatic_run+0x28c>)
 8000a56:	22c8      	movs	r2, #200	@ 0xc8
 8000a58:	601a      	str	r2, [r3, #0]
			status = AUTO_RED_YELLOW;
 8000a5a:	4b68      	ldr	r3, [pc, #416]	@ (8000bfc <fsm_automatic_run+0x26c>)
 8000a5c:	2203      	movs	r2, #3
 8000a5e:	601a      	str	r2, [r3, #0]
			clock_status = CLOCK_DISPLAY;
 8000a60:	4b67      	ldr	r3, [pc, #412]	@ (8000c00 <fsm_automatic_run+0x270>)
 8000a62:	2215      	movs	r2, #21
 8000a64:	601a      	str	r2, [r3, #0]
			setTimer1(duration_yellow);
 8000a66:	4b6e      	ldr	r3, [pc, #440]	@ (8000c20 <fsm_automatic_run+0x290>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f000 ff46 	bl	80018fc <setTimer1>
		}
		break;
 8000a70:	e0ba      	b.n	8000be8 <fsm_automatic_run+0x258>
	case AUTO_RED_YELLOW:
		red1_on();
 8000a72:	f000 fba9 	bl	80011c8 <red1_on>
		yellow1_off();
 8000a76:	f000 fbe3 	bl	8001240 <yellow1_off>
		green1_off();
 8000a7a:	f000 fc11 	bl	80012a0 <green1_off>

		red2_off();
 8000a7e:	f000 fbc7 	bl	8001210 <red2_off>
		yellow2_on();
 8000a82:	f000 fbe9 	bl	8001258 <yellow2_on>
		green2_off();
 8000a86:	f000 fc23 	bl	80012d0 <green2_off>

		if (isButton1Pressed() == 1) {
 8000a8a:	f7ff fb5f 	bl	800014c <isButton1Pressed>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d117      	bne.n	8000ac4 <fsm_automatic_run+0x134>
			status = MAN_RED;
 8000a94:	4b59      	ldr	r3, [pc, #356]	@ (8000bfc <fsm_automatic_run+0x26c>)
 8000a96:	220c      	movs	r2, #12
 8000a98:	601a      	str	r2, [r3, #0]
			timer1_flag = 1;
 8000a9a:	4b5c      	ldr	r3, [pc, #368]	@ (8000c0c <fsm_automatic_run+0x27c>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	601a      	str	r2, [r3, #0]
			duration_current = duration_red;
 8000aa0:	4b5b      	ldr	r3, [pc, #364]	@ (8000c10 <fsm_automatic_run+0x280>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a5b      	ldr	r2, [pc, #364]	@ (8000c14 <fsm_automatic_run+0x284>)
 8000aa6:	6013      	str	r3, [r2, #0]
			updateManualClock(duration_current);
 8000aa8:	4b5a      	ldr	r3, [pc, #360]	@ (8000c14 <fsm_automatic_run+0x284>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff fed5 	bl	800085c <updateManualClock>
			reset7Led();
 8000ab2:	f7ff fdf1 	bl	8000698 <reset7Led>
			clock_status = CLOCK_MAN;
 8000ab6:	4b52      	ldr	r3, [pc, #328]	@ (8000c00 <fsm_automatic_run+0x270>)
 8000ab8:	2216      	movs	r2, #22
 8000aba:	601a      	str	r2, [r3, #0]
			setTimer1(TIME_MAN_MODE);
 8000abc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ac0:	f000 ff1c 	bl	80018fc <setTimer1>
		}

		if (timer1_flag == 1) {
 8000ac4:	4b51      	ldr	r3, [pc, #324]	@ (8000c0c <fsm_automatic_run+0x27c>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	f040 808f 	bne.w	8000bec <fsm_automatic_run+0x25c>
			duration_road1 = 300;
 8000ace:	4b52      	ldr	r3, [pc, #328]	@ (8000c18 <fsm_automatic_run+0x288>)
 8000ad0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000ad4:	601a      	str	r2, [r3, #0]
			duration_road2 = 500;
 8000ad6:	4b51      	ldr	r3, [pc, #324]	@ (8000c1c <fsm_automatic_run+0x28c>)
 8000ad8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000adc:	601a      	str	r2, [r3, #0]
			status = AUTO_GREEN_RED;
 8000ade:	4b47      	ldr	r3, [pc, #284]	@ (8000bfc <fsm_automatic_run+0x26c>)
 8000ae0:	2204      	movs	r2, #4
 8000ae2:	601a      	str	r2, [r3, #0]
			clock_status = CLOCK_DISPLAY;
 8000ae4:	4b46      	ldr	r3, [pc, #280]	@ (8000c00 <fsm_automatic_run+0x270>)
 8000ae6:	2215      	movs	r2, #21
 8000ae8:	601a      	str	r2, [r3, #0]
			setTimer1(duration_green);
 8000aea:	4b46      	ldr	r3, [pc, #280]	@ (8000c04 <fsm_automatic_run+0x274>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4618      	mov	r0, r3
 8000af0:	f000 ff04 	bl	80018fc <setTimer1>
		}
		break;
 8000af4:	e07a      	b.n	8000bec <fsm_automatic_run+0x25c>
	case AUTO_GREEN_RED:
		red1_off();
 8000af6:	f000 fb73 	bl	80011e0 <red1_off>
		yellow1_off();
 8000afa:	f000 fba1 	bl	8001240 <yellow1_off>
		green1_on();
 8000afe:	f000 fbc3 	bl	8001288 <green1_on>

		red2_on();
 8000b02:	f000 fb79 	bl	80011f8 <red2_on>
		yellow2_off();
 8000b06:	f000 fbb3 	bl	8001270 <yellow2_off>
		green2_off();
 8000b0a:	f000 fbe1 	bl	80012d0 <green2_off>

		if (isButton1Pressed() == 1) {
 8000b0e:	f7ff fb1d 	bl	800014c <isButton1Pressed>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d117      	bne.n	8000b48 <fsm_automatic_run+0x1b8>
			status = MAN_RED;
 8000b18:	4b38      	ldr	r3, [pc, #224]	@ (8000bfc <fsm_automatic_run+0x26c>)
 8000b1a:	220c      	movs	r2, #12
 8000b1c:	601a      	str	r2, [r3, #0]
			timer1_flag = 1;
 8000b1e:	4b3b      	ldr	r3, [pc, #236]	@ (8000c0c <fsm_automatic_run+0x27c>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	601a      	str	r2, [r3, #0]
			duration_current = duration_red;
 8000b24:	4b3a      	ldr	r3, [pc, #232]	@ (8000c10 <fsm_automatic_run+0x280>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a3a      	ldr	r2, [pc, #232]	@ (8000c14 <fsm_automatic_run+0x284>)
 8000b2a:	6013      	str	r3, [r2, #0]
			updateManualClock(duration_current);
 8000b2c:	4b39      	ldr	r3, [pc, #228]	@ (8000c14 <fsm_automatic_run+0x284>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff fe93 	bl	800085c <updateManualClock>
			reset7Led();
 8000b36:	f7ff fdaf 	bl	8000698 <reset7Led>
			clock_status = CLOCK_MAN;
 8000b3a:	4b31      	ldr	r3, [pc, #196]	@ (8000c00 <fsm_automatic_run+0x270>)
 8000b3c:	2216      	movs	r2, #22
 8000b3e:	601a      	str	r2, [r3, #0]
			setTimer1(TIME_MAN_MODE);
 8000b40:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b44:	f000 feda 	bl	80018fc <setTimer1>
		}

		if (timer1_flag == 1) {
 8000b48:	4b30      	ldr	r3, [pc, #192]	@ (8000c0c <fsm_automatic_run+0x27c>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d14f      	bne.n	8000bf0 <fsm_automatic_run+0x260>
			duration_road1 = 200;
 8000b50:	4b31      	ldr	r3, [pc, #196]	@ (8000c18 <fsm_automatic_run+0x288>)
 8000b52:	22c8      	movs	r2, #200	@ 0xc8
 8000b54:	601a      	str	r2, [r3, #0]
			duration_road2 = 200;
 8000b56:	4b31      	ldr	r3, [pc, #196]	@ (8000c1c <fsm_automatic_run+0x28c>)
 8000b58:	22c8      	movs	r2, #200	@ 0xc8
 8000b5a:	601a      	str	r2, [r3, #0]
			status = AUTO_YELLOW_RED;
 8000b5c:	4b27      	ldr	r3, [pc, #156]	@ (8000bfc <fsm_automatic_run+0x26c>)
 8000b5e:	2205      	movs	r2, #5
 8000b60:	601a      	str	r2, [r3, #0]
			clock_status = CLOCK_DISPLAY;
 8000b62:	4b27      	ldr	r3, [pc, #156]	@ (8000c00 <fsm_automatic_run+0x270>)
 8000b64:	2215      	movs	r2, #21
 8000b66:	601a      	str	r2, [r3, #0]
			setTimer1(duration_yellow);
 8000b68:	4b2d      	ldr	r3, [pc, #180]	@ (8000c20 <fsm_automatic_run+0x290>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f000 fec5 	bl	80018fc <setTimer1>
		}
		break;
 8000b72:	e03d      	b.n	8000bf0 <fsm_automatic_run+0x260>
	case AUTO_YELLOW_RED:
		red1_off();
 8000b74:	f000 fb34 	bl	80011e0 <red1_off>
		yellow1_on();
 8000b78:	f000 fb56 	bl	8001228 <yellow1_on>
		green1_off();
 8000b7c:	f000 fb90 	bl	80012a0 <green1_off>

		red2_on();
 8000b80:	f000 fb3a 	bl	80011f8 <red2_on>
		yellow2_off();
 8000b84:	f000 fb74 	bl	8001270 <yellow2_off>
		green2_off();
 8000b88:	f000 fba2 	bl	80012d0 <green2_off>

		if (isButton1Pressed() == 1) {
 8000b8c:	f7ff fade 	bl	800014c <isButton1Pressed>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d10e      	bne.n	8000bb4 <fsm_automatic_run+0x224>
			timer1_flag = 1;
 8000b96:	4b1d      	ldr	r3, [pc, #116]	@ (8000c0c <fsm_automatic_run+0x27c>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	601a      	str	r2, [r3, #0]
			status = MAN_RED;
 8000b9c:	4b17      	ldr	r3, [pc, #92]	@ (8000bfc <fsm_automatic_run+0x26c>)
 8000b9e:	220c      	movs	r2, #12
 8000ba0:	601a      	str	r2, [r3, #0]
			clock_status = CLOCK_MAN;
 8000ba2:	4b17      	ldr	r3, [pc, #92]	@ (8000c00 <fsm_automatic_run+0x270>)
 8000ba4:	2216      	movs	r2, #22
 8000ba6:	601a      	str	r2, [r3, #0]
			reset7Led();
 8000ba8:	f7ff fd76 	bl	8000698 <reset7Led>
			setTimer1(TIME_MAN_MODE);
 8000bac:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000bb0:	f000 fea4 	bl	80018fc <setTimer1>
		}

		if (timer1_flag == 1) {
 8000bb4:	4b15      	ldr	r3, [pc, #84]	@ (8000c0c <fsm_automatic_run+0x27c>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d11b      	bne.n	8000bf4 <fsm_automatic_run+0x264>
			duration_road1 = 500;
 8000bbc:	4b16      	ldr	r3, [pc, #88]	@ (8000c18 <fsm_automatic_run+0x288>)
 8000bbe:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000bc2:	601a      	str	r2, [r3, #0]
			duration_road2 = 300;
 8000bc4:	4b15      	ldr	r3, [pc, #84]	@ (8000c1c <fsm_automatic_run+0x28c>)
 8000bc6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000bca:	601a      	str	r2, [r3, #0]
			status = AUTO_RED_GREEN;
 8000bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8000bfc <fsm_automatic_run+0x26c>)
 8000bce:	2202      	movs	r2, #2
 8000bd0:	601a      	str	r2, [r3, #0]
			clock_status = CLOCK_DISPLAY;
 8000bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8000c00 <fsm_automatic_run+0x270>)
 8000bd4:	2215      	movs	r2, #21
 8000bd6:	601a      	str	r2, [r3, #0]
			setTimer1(duration_green);
 8000bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8000c04 <fsm_automatic_run+0x274>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f000 fe8d 	bl	80018fc <setTimer1>
		}
		break;
 8000be2:	e007      	b.n	8000bf4 <fsm_automatic_run+0x264>
	default:
		break;
 8000be4:	bf00      	nop
 8000be6:	e006      	b.n	8000bf6 <fsm_automatic_run+0x266>
		break;
 8000be8:	bf00      	nop
 8000bea:	e004      	b.n	8000bf6 <fsm_automatic_run+0x266>
		break;
 8000bec:	bf00      	nop
 8000bee:	e002      	b.n	8000bf6 <fsm_automatic_run+0x266>
		break;
 8000bf0:	bf00      	nop
 8000bf2:	e000      	b.n	8000bf6 <fsm_automatic_run+0x266>
		break;
 8000bf4:	bf00      	nop
	}
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	200003ec 	.word	0x200003ec
 8000c00:	20000040 	.word	0x20000040
 8000c04:	20000058 	.word	0x20000058
 8000c08:	200003f0 	.word	0x200003f0
 8000c0c:	20000444 	.word	0x20000444
 8000c10:	20000050 	.word	0x20000050
 8000c14:	2000004c 	.word	0x2000004c
 8000c18:	20000044 	.word	0x20000044
 8000c1c:	20000048 	.word	0x20000048
 8000c20:	20000054 	.word	0x20000054

08000c24 <fsm_manual_run>:
#include "global.h"
#include "led.h"
#include "button.h"
#include "blinky_4led.h"

void fsm_manual_run() {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0

	switch (status) {
 8000c28:	4b75      	ldr	r3, [pc, #468]	@ (8000e00 <fsm_manual_run+0x1dc>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b0e      	cmp	r3, #14
 8000c2e:	f000 81d3 	beq.w	8000fd8 <fsm_manual_run+0x3b4>
 8000c32:	2b0e      	cmp	r3, #14
 8000c34:	f300 82ad 	bgt.w	8001192 <fsm_manual_run+0x56e>
 8000c38:	2b0c      	cmp	r3, #12
 8000c3a:	d003      	beq.n	8000c44 <fsm_manual_run+0x20>
 8000c3c:	2b0d      	cmp	r3, #13
 8000c3e:	f000 80f7 	beq.w	8000e30 <fsm_manual_run+0x20c>
				setTimer1(duration_green);  // Thiết lập lại bộ đếm thời gian
			}
			break;

		default:
			break;
 8000c42:	e2a6      	b.n	8001192 <fsm_manual_run+0x56e>
			red1_on();
 8000c44:	f000 fac0 	bl	80011c8 <red1_on>
			red2_on();
 8000c48:	f000 fad6 	bl	80011f8 <red2_on>
			yellow1_off();
 8000c4c:	f000 faf8 	bl	8001240 <yellow1_off>
			yellow2_off();
 8000c50:	f000 fb0e 	bl	8001270 <yellow2_off>
			green1_off();
 8000c54:	f000 fb24 	bl	80012a0 <green1_off>
			green2_off();
 8000c58:	f000 fb3a 	bl	80012d0 <green2_off>
			if (isButton1Pressed() == 1) {
 8000c5c:	f7ff fa76 	bl	800014c <isButton1Pressed>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d118      	bne.n	8000c98 <fsm_manual_run+0x74>
				duration_add = 0;
 8000c66:	4b67      	ldr	r3, [pc, #412]	@ (8000e04 <fsm_manual_run+0x1e0>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
				timer1_flag = 1;
 8000c6c:	4b66      	ldr	r3, [pc, #408]	@ (8000e08 <fsm_manual_run+0x1e4>)
 8000c6e:	2201      	movs	r2, #1
 8000c70:	601a      	str	r2, [r3, #0]
				status = MAN_GREEN;
 8000c72:	4b63      	ldr	r3, [pc, #396]	@ (8000e00 <fsm_manual_run+0x1dc>)
 8000c74:	220d      	movs	r2, #13
 8000c76:	601a      	str	r2, [r3, #0]
				clock_status = CLOCK_MAN;
 8000c78:	4b64      	ldr	r3, [pc, #400]	@ (8000e0c <fsm_manual_run+0x1e8>)
 8000c7a:	2216      	movs	r2, #22
 8000c7c:	601a      	str	r2, [r3, #0]
				duration_current = duration_green;
 8000c7e:	4b64      	ldr	r3, [pc, #400]	@ (8000e10 <fsm_manual_run+0x1ec>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a64      	ldr	r2, [pc, #400]	@ (8000e14 <fsm_manual_run+0x1f0>)
 8000c84:	6013      	str	r3, [r2, #0]
				updateManualClock(duration_current);
 8000c86:	4b63      	ldr	r3, [pc, #396]	@ (8000e14 <fsm_manual_run+0x1f0>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff fde6 	bl	800085c <updateManualClock>
				setTimer1(TIME_MAN_MODE);  // Thiết lập lại thời gian
 8000c90:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c94:	f000 fe32 	bl	80018fc <setTimer1>
			if (isButton2Pressed() == 1) {
 8000c98:	f7ff fa6a 	bl	8000170 <isButton2Pressed>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d119      	bne.n	8000cd6 <fsm_manual_run+0xb2>
				duration_add += 100;  // Cộng thêm 100 vào thời gian
 8000ca2:	4b58      	ldr	r3, [pc, #352]	@ (8000e04 <fsm_manual_run+0x1e0>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	3364      	adds	r3, #100	@ 0x64
 8000ca8:	4a56      	ldr	r2, [pc, #344]	@ (8000e04 <fsm_manual_run+0x1e0>)
 8000caa:	6013      	str	r3, [r2, #0]
				duration_red += 100;
 8000cac:	4b5a      	ldr	r3, [pc, #360]	@ (8000e18 <fsm_manual_run+0x1f4>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	3364      	adds	r3, #100	@ 0x64
 8000cb2:	4a59      	ldr	r2, [pc, #356]	@ (8000e18 <fsm_manual_run+0x1f4>)
 8000cb4:	6013      	str	r3, [r2, #0]
				duration_current = duration_red;
 8000cb6:	4b58      	ldr	r3, [pc, #352]	@ (8000e18 <fsm_manual_run+0x1f4>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a56      	ldr	r2, [pc, #344]	@ (8000e14 <fsm_manual_run+0x1f0>)
 8000cbc:	6013      	str	r3, [r2, #0]
				updateManualClock(duration_current);
 8000cbe:	4b55      	ldr	r3, [pc, #340]	@ (8000e14 <fsm_manual_run+0x1f0>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff fdca 	bl	800085c <updateManualClock>
				timer1_flag = 1;
 8000cc8:	4b4f      	ldr	r3, [pc, #316]	@ (8000e08 <fsm_manual_run+0x1e4>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	601a      	str	r2, [r3, #0]
				setTimer1(TIME_MAN_MODE);  // Thiết lập lại thời gian
 8000cce:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000cd2:	f000 fe13 	bl	80018fc <setTimer1>
			if (isButton3Pressed() == 1) {
 8000cd6:	f7ff fa5d 	bl	8000194 <isButton3Pressed>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d167      	bne.n	8000db0 <fsm_manual_run+0x18c>
				duration_red = ((duration_red / 100) % 99) * 100;
 8000ce0:	4b4d      	ldr	r3, [pc, #308]	@ (8000e18 <fsm_manual_run+0x1f4>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a4d      	ldr	r2, [pc, #308]	@ (8000e1c <fsm_manual_run+0x1f8>)
 8000ce6:	fb82 1203 	smull	r1, r2, r2, r3
 8000cea:	1152      	asrs	r2, r2, #5
 8000cec:	17db      	asrs	r3, r3, #31
 8000cee:	1ad2      	subs	r2, r2, r3
 8000cf0:	4b4b      	ldr	r3, [pc, #300]	@ (8000e20 <fsm_manual_run+0x1fc>)
 8000cf2:	fb83 1302 	smull	r1, r3, r3, r2
 8000cf6:	4413      	add	r3, r2
 8000cf8:	1199      	asrs	r1, r3, #6
 8000cfa:	17d3      	asrs	r3, r2, #31
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	460b      	mov	r3, r1
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	440b      	add	r3, r1
 8000d04:	0159      	lsls	r1, r3, #5
 8000d06:	440b      	add	r3, r1
 8000d08:	1ad1      	subs	r1, r2, r3
 8000d0a:	2364      	movs	r3, #100	@ 0x64
 8000d0c:	fb01 f303 	mul.w	r3, r1, r3
 8000d10:	4a41      	ldr	r2, [pc, #260]	@ (8000e18 <fsm_manual_run+0x1f4>)
 8000d12:	6013      	str	r3, [r2, #0]
				if (duration_red < 1000){
 8000d14:	4b40      	ldr	r3, [pc, #256]	@ (8000e18 <fsm_manual_run+0x1f4>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000d1c:	da14      	bge.n	8000d48 <fsm_manual_run+0x124>
					duration_yellow = (duration_red / 200) * 100;
 8000d1e:	4b3e      	ldr	r3, [pc, #248]	@ (8000e18 <fsm_manual_run+0x1f4>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a3e      	ldr	r2, [pc, #248]	@ (8000e1c <fsm_manual_run+0x1f8>)
 8000d24:	fb82 1203 	smull	r1, r2, r2, r3
 8000d28:	1192      	asrs	r2, r2, #6
 8000d2a:	17db      	asrs	r3, r3, #31
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	2264      	movs	r2, #100	@ 0x64
 8000d30:	fb02 f303 	mul.w	r3, r2, r3
 8000d34:	4a3b      	ldr	r2, [pc, #236]	@ (8000e24 <fsm_manual_run+0x200>)
 8000d36:	6013      	str	r3, [r2, #0]
					duration_green = duration_red - duration_yellow;
 8000d38:	4b37      	ldr	r3, [pc, #220]	@ (8000e18 <fsm_manual_run+0x1f4>)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4b39      	ldr	r3, [pc, #228]	@ (8000e24 <fsm_manual_run+0x200>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	4a33      	ldr	r2, [pc, #204]	@ (8000e10 <fsm_manual_run+0x1ec>)
 8000d44:	6013      	str	r3, [r2, #0]
 8000d46:	e013      	b.n	8000d70 <fsm_manual_run+0x14c>
					duration_yellow = (duration_red / 400) * 100;
 8000d48:	4b33      	ldr	r3, [pc, #204]	@ (8000e18 <fsm_manual_run+0x1f4>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a33      	ldr	r2, [pc, #204]	@ (8000e1c <fsm_manual_run+0x1f8>)
 8000d4e:	fb82 1203 	smull	r1, r2, r2, r3
 8000d52:	11d2      	asrs	r2, r2, #7
 8000d54:	17db      	asrs	r3, r3, #31
 8000d56:	1ad3      	subs	r3, r2, r3
 8000d58:	2264      	movs	r2, #100	@ 0x64
 8000d5a:	fb02 f303 	mul.w	r3, r2, r3
 8000d5e:	4a31      	ldr	r2, [pc, #196]	@ (8000e24 <fsm_manual_run+0x200>)
 8000d60:	6013      	str	r3, [r2, #0]
					duration_green = duration_red - duration_yellow;
 8000d62:	4b2d      	ldr	r3, [pc, #180]	@ (8000e18 <fsm_manual_run+0x1f4>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	4b2f      	ldr	r3, [pc, #188]	@ (8000e24 <fsm_manual_run+0x200>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	1ad3      	subs	r3, r2, r3
 8000d6c:	4a28      	ldr	r2, [pc, #160]	@ (8000e10 <fsm_manual_run+0x1ec>)
 8000d6e:	6013      	str	r3, [r2, #0]
				status = AUTO_RED_GREEN;
 8000d70:	4b23      	ldr	r3, [pc, #140]	@ (8000e00 <fsm_manual_run+0x1dc>)
 8000d72:	2202      	movs	r2, #2
 8000d74:	601a      	str	r2, [r3, #0]
				timer1_flag = 1;
 8000d76:	4b24      	ldr	r3, [pc, #144]	@ (8000e08 <fsm_manual_run+0x1e4>)
 8000d78:	2201      	movs	r2, #1
 8000d7a:	601a      	str	r2, [r3, #0]
				duration_road1 = duration_red;
 8000d7c:	4b26      	ldr	r3, [pc, #152]	@ (8000e18 <fsm_manual_run+0x1f4>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a29      	ldr	r2, [pc, #164]	@ (8000e28 <fsm_manual_run+0x204>)
 8000d82:	6013      	str	r3, [r2, #0]
				duration_road2 = duration_green;
 8000d84:	4b22      	ldr	r3, [pc, #136]	@ (8000e10 <fsm_manual_run+0x1ec>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a28      	ldr	r2, [pc, #160]	@ (8000e2c <fsm_manual_run+0x208>)
 8000d8a:	6013      	str	r3, [r2, #0]
				clock_status = CLOCK_DISPLAY;
 8000d8c:	4b1f      	ldr	r3, [pc, #124]	@ (8000e0c <fsm_manual_run+0x1e8>)
 8000d8e:	2215      	movs	r2, #21
 8000d90:	601a      	str	r2, [r3, #0]
				updateDisplayClock(duration_road1, duration_road2);
 8000d92:	4b25      	ldr	r3, [pc, #148]	@ (8000e28 <fsm_manual_run+0x204>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a25      	ldr	r2, [pc, #148]	@ (8000e2c <fsm_manual_run+0x208>)
 8000d98:	6812      	ldr	r2, [r2, #0]
 8000d9a:	4611      	mov	r1, r2
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff fd11 	bl	80007c4 <updateDisplayClock>
				reset7Led();
 8000da2:	f7ff fc79 	bl	8000698 <reset7Led>
				setTimer1(duration_green);  // Thiết lập lại thời gian
 8000da6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e10 <fsm_manual_run+0x1ec>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f000 fda6 	bl	80018fc <setTimer1>
			if (timer1_flag == 1) {
 8000db0:	4b15      	ldr	r3, [pc, #84]	@ (8000e08 <fsm_manual_run+0x1e4>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	f040 81ee 	bne.w	8001196 <fsm_manual_run+0x572>
				duration_red -= duration_add;
 8000dba:	4b17      	ldr	r3, [pc, #92]	@ (8000e18 <fsm_manual_run+0x1f4>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	4b11      	ldr	r3, [pc, #68]	@ (8000e04 <fsm_manual_run+0x1e0>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	1ad3      	subs	r3, r2, r3
 8000dc4:	4a14      	ldr	r2, [pc, #80]	@ (8000e18 <fsm_manual_run+0x1f4>)
 8000dc6:	6013      	str	r3, [r2, #0]
				status = AUTO_RED_GREEN;
 8000dc8:	4b0d      	ldr	r3, [pc, #52]	@ (8000e00 <fsm_manual_run+0x1dc>)
 8000dca:	2202      	movs	r2, #2
 8000dcc:	601a      	str	r2, [r3, #0]
				duration_road1 = duration_red;
 8000dce:	4b12      	ldr	r3, [pc, #72]	@ (8000e18 <fsm_manual_run+0x1f4>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a15      	ldr	r2, [pc, #84]	@ (8000e28 <fsm_manual_run+0x204>)
 8000dd4:	6013      	str	r3, [r2, #0]
				duration_road2 = duration_green;
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e10 <fsm_manual_run+0x1ec>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a14      	ldr	r2, [pc, #80]	@ (8000e2c <fsm_manual_run+0x208>)
 8000ddc:	6013      	str	r3, [r2, #0]
				clock_status = CLOCK_DISPLAY;
 8000dde:	4b0b      	ldr	r3, [pc, #44]	@ (8000e0c <fsm_manual_run+0x1e8>)
 8000de0:	2215      	movs	r2, #21
 8000de2:	601a      	str	r2, [r3, #0]
				updateDisplayClock(duration_road1, duration_road2);
 8000de4:	4b10      	ldr	r3, [pc, #64]	@ (8000e28 <fsm_manual_run+0x204>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a10      	ldr	r2, [pc, #64]	@ (8000e2c <fsm_manual_run+0x208>)
 8000dea:	6812      	ldr	r2, [r2, #0]
 8000dec:	4611      	mov	r1, r2
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff fce8 	bl	80007c4 <updateDisplayClock>
				setTimer1(duration_green);  // Thiết lập lại bộ đếm thời gian
 8000df4:	4b06      	ldr	r3, [pc, #24]	@ (8000e10 <fsm_manual_run+0x1ec>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f000 fd7f 	bl	80018fc <setTimer1>
			break;
 8000dfe:	e1ca      	b.n	8001196 <fsm_manual_run+0x572>
 8000e00:	200003ec 	.word	0x200003ec
 8000e04:	200003f0 	.word	0x200003f0
 8000e08:	20000444 	.word	0x20000444
 8000e0c:	20000040 	.word	0x20000040
 8000e10:	20000058 	.word	0x20000058
 8000e14:	2000004c 	.word	0x2000004c
 8000e18:	20000050 	.word	0x20000050
 8000e1c:	51eb851f 	.word	0x51eb851f
 8000e20:	a57eb503 	.word	0xa57eb503
 8000e24:	20000054 	.word	0x20000054
 8000e28:	20000044 	.word	0x20000044
 8000e2c:	20000048 	.word	0x20000048
			red1_off();
 8000e30:	f000 f9d6 	bl	80011e0 <red1_off>
			red2_off();
 8000e34:	f000 f9ec 	bl	8001210 <red2_off>
			yellow1_off();
 8000e38:	f000 fa02 	bl	8001240 <yellow1_off>
			yellow2_off();
 8000e3c:	f000 fa18 	bl	8001270 <yellow2_off>
			green1_on();
 8000e40:	f000 fa22 	bl	8001288 <green1_on>
			green2_on();
 8000e44:	f000 fa38 	bl	80012b8 <green2_on>
			if (isButton1Pressed() == 1) {
 8000e48:	f7ff f980 	bl	800014c <isButton1Pressed>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d118      	bne.n	8000e84 <fsm_manual_run+0x260>
				duration_add = 0;
 8000e52:	4ba1      	ldr	r3, [pc, #644]	@ (80010d8 <fsm_manual_run+0x4b4>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
				status = MAN_YELLOW;
 8000e58:	4ba0      	ldr	r3, [pc, #640]	@ (80010dc <fsm_manual_run+0x4b8>)
 8000e5a:	220e      	movs	r2, #14
 8000e5c:	601a      	str	r2, [r3, #0]
				clock_status = CLOCK_MAN;
 8000e5e:	4ba0      	ldr	r3, [pc, #640]	@ (80010e0 <fsm_manual_run+0x4bc>)
 8000e60:	2216      	movs	r2, #22
 8000e62:	601a      	str	r2, [r3, #0]
				timer1_flag = 1;
 8000e64:	4b9f      	ldr	r3, [pc, #636]	@ (80010e4 <fsm_manual_run+0x4c0>)
 8000e66:	2201      	movs	r2, #1
 8000e68:	601a      	str	r2, [r3, #0]
				duration_current = duration_yellow;
 8000e6a:	4b9f      	ldr	r3, [pc, #636]	@ (80010e8 <fsm_manual_run+0x4c4>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a9f      	ldr	r2, [pc, #636]	@ (80010ec <fsm_manual_run+0x4c8>)
 8000e70:	6013      	str	r3, [r2, #0]
				updateManualClock(duration_current);
 8000e72:	4b9e      	ldr	r3, [pc, #632]	@ (80010ec <fsm_manual_run+0x4c8>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff fcf0 	bl	800085c <updateManualClock>
				setTimer1(TIME_MAN_MODE);  // Thiết lập lại thời gian
 8000e7c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e80:	f000 fd3c 	bl	80018fc <setTimer1>
			if (isButton2Pressed() == 1){
 8000e84:	f7ff f974 	bl	8000170 <isButton2Pressed>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d119      	bne.n	8000ec2 <fsm_manual_run+0x29e>
				duration_add += 100;
 8000e8e:	4b92      	ldr	r3, [pc, #584]	@ (80010d8 <fsm_manual_run+0x4b4>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	3364      	adds	r3, #100	@ 0x64
 8000e94:	4a90      	ldr	r2, [pc, #576]	@ (80010d8 <fsm_manual_run+0x4b4>)
 8000e96:	6013      	str	r3, [r2, #0]
				duration_green += 100;
 8000e98:	4b95      	ldr	r3, [pc, #596]	@ (80010f0 <fsm_manual_run+0x4cc>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	3364      	adds	r3, #100	@ 0x64
 8000e9e:	4a94      	ldr	r2, [pc, #592]	@ (80010f0 <fsm_manual_run+0x4cc>)
 8000ea0:	6013      	str	r3, [r2, #0]
				duration_current = duration_green;
 8000ea2:	4b93      	ldr	r3, [pc, #588]	@ (80010f0 <fsm_manual_run+0x4cc>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a91      	ldr	r2, [pc, #580]	@ (80010ec <fsm_manual_run+0x4c8>)
 8000ea8:	6013      	str	r3, [r2, #0]
				updateManualClock(duration_current);
 8000eaa:	4b90      	ldr	r3, [pc, #576]	@ (80010ec <fsm_manual_run+0x4c8>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff fcd4 	bl	800085c <updateManualClock>
				timer1_flag = 1;
 8000eb4:	4b8b      	ldr	r3, [pc, #556]	@ (80010e4 <fsm_manual_run+0x4c0>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	601a      	str	r2, [r3, #0]
				setTimer1(TIME_MAN_MODE);
 8000eba:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ebe:	f000 fd1d 	bl	80018fc <setTimer1>
			if (isButton3Pressed() == 1){
 8000ec2:	f7ff f967 	bl	8000194 <isButton3Pressed>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d15a      	bne.n	8000f82 <fsm_manual_run+0x35e>
				duration_green = ((duration_green / 100) % 75) * 100;
 8000ecc:	4b88      	ldr	r3, [pc, #544]	@ (80010f0 <fsm_manual_run+0x4cc>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a88      	ldr	r2, [pc, #544]	@ (80010f4 <fsm_manual_run+0x4d0>)
 8000ed2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ed6:	1152      	asrs	r2, r2, #5
 8000ed8:	17db      	asrs	r3, r3, #31
 8000eda:	1ad1      	subs	r1, r2, r3
 8000edc:	4b86      	ldr	r3, [pc, #536]	@ (80010f8 <fsm_manual_run+0x4d4>)
 8000ede:	fb83 2301 	smull	r2, r3, r3, r1
 8000ee2:	10da      	asrs	r2, r3, #3
 8000ee4:	17cb      	asrs	r3, r1, #31
 8000ee6:	1ad2      	subs	r2, r2, r3
 8000ee8:	4613      	mov	r3, r2
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	4413      	add	r3, r2
 8000eee:	011a      	lsls	r2, r3, #4
 8000ef0:	1ad2      	subs	r2, r2, r3
 8000ef2:	1a8a      	subs	r2, r1, r2
 8000ef4:	2364      	movs	r3, #100	@ 0x64
 8000ef6:	fb02 f303 	mul.w	r3, r2, r3
 8000efa:	4a7d      	ldr	r2, [pc, #500]	@ (80010f0 <fsm_manual_run+0x4cc>)
 8000efc:	6013      	str	r3, [r2, #0]
				if (duration_green <= 500){
 8000efe:	4b7c      	ldr	r3, [pc, #496]	@ (80010f0 <fsm_manual_run+0x4cc>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000f06:	dc0b      	bgt.n	8000f20 <fsm_manual_run+0x2fc>
					duration_yellow = duration_green;
 8000f08:	4b79      	ldr	r3, [pc, #484]	@ (80010f0 <fsm_manual_run+0x4cc>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a76      	ldr	r2, [pc, #472]	@ (80010e8 <fsm_manual_run+0x4c4>)
 8000f0e:	6013      	str	r3, [r2, #0]
					duration_red = duration_green + duration_yellow;
 8000f10:	4b77      	ldr	r3, [pc, #476]	@ (80010f0 <fsm_manual_run+0x4cc>)
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	4b74      	ldr	r3, [pc, #464]	@ (80010e8 <fsm_manual_run+0x4c4>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4413      	add	r3, r2
 8000f1a:	4a78      	ldr	r2, [pc, #480]	@ (80010fc <fsm_manual_run+0x4d8>)
 8000f1c:	6013      	str	r3, [r2, #0]
 8000f1e:	e010      	b.n	8000f42 <fsm_manual_run+0x31e>
					duration_red = (duration_green * 4 / 3);
 8000f20:	4b73      	ldr	r3, [pc, #460]	@ (80010f0 <fsm_manual_run+0x4cc>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	4a76      	ldr	r2, [pc, #472]	@ (8001100 <fsm_manual_run+0x4dc>)
 8000f28:	fb82 1203 	smull	r1, r2, r2, r3
 8000f2c:	17db      	asrs	r3, r3, #31
 8000f2e:	1ad3      	subs	r3, r2, r3
 8000f30:	4a72      	ldr	r2, [pc, #456]	@ (80010fc <fsm_manual_run+0x4d8>)
 8000f32:	6013      	str	r3, [r2, #0]
					duration_yellow = duration_red - duration_green;
 8000f34:	4b71      	ldr	r3, [pc, #452]	@ (80010fc <fsm_manual_run+0x4d8>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	4b6d      	ldr	r3, [pc, #436]	@ (80010f0 <fsm_manual_run+0x4cc>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	4a6a      	ldr	r2, [pc, #424]	@ (80010e8 <fsm_manual_run+0x4c4>)
 8000f40:	6013      	str	r3, [r2, #0]
				status = AUTO_RED_GREEN;
 8000f42:	4b66      	ldr	r3, [pc, #408]	@ (80010dc <fsm_manual_run+0x4b8>)
 8000f44:	2202      	movs	r2, #2
 8000f46:	601a      	str	r2, [r3, #0]
				timer1_flag = 1;
 8000f48:	4b66      	ldr	r3, [pc, #408]	@ (80010e4 <fsm_manual_run+0x4c0>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	601a      	str	r2, [r3, #0]
				duration_road1 = duration_red;
 8000f4e:	4b6b      	ldr	r3, [pc, #428]	@ (80010fc <fsm_manual_run+0x4d8>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a6c      	ldr	r2, [pc, #432]	@ (8001104 <fsm_manual_run+0x4e0>)
 8000f54:	6013      	str	r3, [r2, #0]
				duration_road2 = duration_green;
 8000f56:	4b66      	ldr	r3, [pc, #408]	@ (80010f0 <fsm_manual_run+0x4cc>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a6b      	ldr	r2, [pc, #428]	@ (8001108 <fsm_manual_run+0x4e4>)
 8000f5c:	6013      	str	r3, [r2, #0]
				updateDisplayClock(duration_road1, duration_road2);
 8000f5e:	4b69      	ldr	r3, [pc, #420]	@ (8001104 <fsm_manual_run+0x4e0>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a69      	ldr	r2, [pc, #420]	@ (8001108 <fsm_manual_run+0x4e4>)
 8000f64:	6812      	ldr	r2, [r2, #0]
 8000f66:	4611      	mov	r1, r2
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff fc2b 	bl	80007c4 <updateDisplayClock>
				clock_status = CLOCK_DISPLAY;
 8000f6e:	4b5c      	ldr	r3, [pc, #368]	@ (80010e0 <fsm_manual_run+0x4bc>)
 8000f70:	2215      	movs	r2, #21
 8000f72:	601a      	str	r2, [r3, #0]
				reset7Led();
 8000f74:	f7ff fb90 	bl	8000698 <reset7Led>
				setTimer1(duration_green);  // Thiết lập lại thời gian
 8000f78:	4b5d      	ldr	r3, [pc, #372]	@ (80010f0 <fsm_manual_run+0x4cc>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f000 fcbd 	bl	80018fc <setTimer1>
			if (timer1_flag == 1) {
 8000f82:	4b58      	ldr	r3, [pc, #352]	@ (80010e4 <fsm_manual_run+0x4c0>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	f040 8107 	bne.w	800119a <fsm_manual_run+0x576>
				duration_green -= duration_add;
 8000f8c:	4b58      	ldr	r3, [pc, #352]	@ (80010f0 <fsm_manual_run+0x4cc>)
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	4b51      	ldr	r3, [pc, #324]	@ (80010d8 <fsm_manual_run+0x4b4>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	4a56      	ldr	r2, [pc, #344]	@ (80010f0 <fsm_manual_run+0x4cc>)
 8000f98:	6013      	str	r3, [r2, #0]
				status = AUTO_RED_GREEN;
 8000f9a:	4b50      	ldr	r3, [pc, #320]	@ (80010dc <fsm_manual_run+0x4b8>)
 8000f9c:	2202      	movs	r2, #2
 8000f9e:	601a      	str	r2, [r3, #0]
				timer1_flag = 1;
 8000fa0:	4b50      	ldr	r3, [pc, #320]	@ (80010e4 <fsm_manual_run+0x4c0>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	601a      	str	r2, [r3, #0]
				duration_road1 = duration_red;
 8000fa6:	4b55      	ldr	r3, [pc, #340]	@ (80010fc <fsm_manual_run+0x4d8>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a56      	ldr	r2, [pc, #344]	@ (8001104 <fsm_manual_run+0x4e0>)
 8000fac:	6013      	str	r3, [r2, #0]
				duration_road2 = duration_green;
 8000fae:	4b50      	ldr	r3, [pc, #320]	@ (80010f0 <fsm_manual_run+0x4cc>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a55      	ldr	r2, [pc, #340]	@ (8001108 <fsm_manual_run+0x4e4>)
 8000fb4:	6013      	str	r3, [r2, #0]
				updateDisplayClock(duration_road1, duration_road2);
 8000fb6:	4b53      	ldr	r3, [pc, #332]	@ (8001104 <fsm_manual_run+0x4e0>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a53      	ldr	r2, [pc, #332]	@ (8001108 <fsm_manual_run+0x4e4>)
 8000fbc:	6812      	ldr	r2, [r2, #0]
 8000fbe:	4611      	mov	r1, r2
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff fbff 	bl	80007c4 <updateDisplayClock>
				clock_status = CLOCK_DISPLAY;
 8000fc6:	4b46      	ldr	r3, [pc, #280]	@ (80010e0 <fsm_manual_run+0x4bc>)
 8000fc8:	2215      	movs	r2, #21
 8000fca:	601a      	str	r2, [r3, #0]
				setTimer1(duration_green);  // Thiết lập lại bộ đếm thời gian cho việc không làm gì sau khi nhấn nút 1
 8000fcc:	4b48      	ldr	r3, [pc, #288]	@ (80010f0 <fsm_manual_run+0x4cc>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f000 fc93 	bl	80018fc <setTimer1>
			break;
 8000fd6:	e0e0      	b.n	800119a <fsm_manual_run+0x576>
			red1_off();
 8000fd8:	f000 f902 	bl	80011e0 <red1_off>
			red2_off();
 8000fdc:	f000 f918 	bl	8001210 <red2_off>
			yellow1_on();
 8000fe0:	f000 f922 	bl	8001228 <yellow1_on>
			yellow2_on();
 8000fe4:	f000 f938 	bl	8001258 <yellow2_on>
			green1_off();
 8000fe8:	f000 f95a 	bl	80012a0 <green1_off>
			green2_off();
 8000fec:	f000 f970 	bl	80012d0 <green2_off>
			if (isButton1Pressed() == 1) {
 8000ff0:	f7ff f8ac 	bl	800014c <isButton1Pressed>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d11a      	bne.n	8001030 <fsm_manual_run+0x40c>
				status = MAN_RED;
 8000ffa:	4b38      	ldr	r3, [pc, #224]	@ (80010dc <fsm_manual_run+0x4b8>)
 8000ffc:	220c      	movs	r2, #12
 8000ffe:	601a      	str	r2, [r3, #0]
				duration_add = 0;
 8001000:	4b35      	ldr	r3, [pc, #212]	@ (80010d8 <fsm_manual_run+0x4b4>)
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
				clock_status = CLOCK_MAN;
 8001006:	4b36      	ldr	r3, [pc, #216]	@ (80010e0 <fsm_manual_run+0x4bc>)
 8001008:	2216      	movs	r2, #22
 800100a:	601a      	str	r2, [r3, #0]
				duration_current = duration_red;
 800100c:	4b3b      	ldr	r3, [pc, #236]	@ (80010fc <fsm_manual_run+0x4d8>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a36      	ldr	r2, [pc, #216]	@ (80010ec <fsm_manual_run+0x4c8>)
 8001012:	6013      	str	r3, [r2, #0]
				updateManualClock(duration_current);
 8001014:	4b35      	ldr	r3, [pc, #212]	@ (80010ec <fsm_manual_run+0x4c8>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fc1f 	bl	800085c <updateManualClock>
				reset7Led();
 800101e:	f7ff fb3b 	bl	8000698 <reset7Led>
				timer1_flag = 1;
 8001022:	4b30      	ldr	r3, [pc, #192]	@ (80010e4 <fsm_manual_run+0x4c0>)
 8001024:	2201      	movs	r2, #1
 8001026:	601a      	str	r2, [r3, #0]
				setTimer1(TIME_MAN_MODE);  // Thiết lập lại thời gian
 8001028:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800102c:	f000 fc66 	bl	80018fc <setTimer1>
			if (isButton2Pressed() == 1){
 8001030:	f7ff f89e 	bl	8000170 <isButton2Pressed>
 8001034:	4603      	mov	r3, r0
 8001036:	2b01      	cmp	r3, #1
 8001038:	d11c      	bne.n	8001074 <fsm_manual_run+0x450>
				clock_status = CLOCK_MAN;
 800103a:	4b29      	ldr	r3, [pc, #164]	@ (80010e0 <fsm_manual_run+0x4bc>)
 800103c:	2216      	movs	r2, #22
 800103e:	601a      	str	r2, [r3, #0]
				duration_add += 100;
 8001040:	4b25      	ldr	r3, [pc, #148]	@ (80010d8 <fsm_manual_run+0x4b4>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	3364      	adds	r3, #100	@ 0x64
 8001046:	4a24      	ldr	r2, [pc, #144]	@ (80010d8 <fsm_manual_run+0x4b4>)
 8001048:	6013      	str	r3, [r2, #0]
				duration_yellow += 100;
 800104a:	4b27      	ldr	r3, [pc, #156]	@ (80010e8 <fsm_manual_run+0x4c4>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	3364      	adds	r3, #100	@ 0x64
 8001050:	4a25      	ldr	r2, [pc, #148]	@ (80010e8 <fsm_manual_run+0x4c4>)
 8001052:	6013      	str	r3, [r2, #0]
				duration_current = duration_yellow;
 8001054:	4b24      	ldr	r3, [pc, #144]	@ (80010e8 <fsm_manual_run+0x4c4>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a24      	ldr	r2, [pc, #144]	@ (80010ec <fsm_manual_run+0x4c8>)
 800105a:	6013      	str	r3, [r2, #0]
				updateManualClock(duration_current);
 800105c:	4b23      	ldr	r3, [pc, #140]	@ (80010ec <fsm_manual_run+0x4c8>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fbfb 	bl	800085c <updateManualClock>
				timer1_flag = 1;
 8001066:	4b1f      	ldr	r3, [pc, #124]	@ (80010e4 <fsm_manual_run+0x4c0>)
 8001068:	2201      	movs	r2, #1
 800106a:	601a      	str	r2, [r3, #0]
				setTimer1(TIME_MAN_MODE);
 800106c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001070:	f000 fc44 	bl	80018fc <setTimer1>
			if (isButton3Pressed() == 1){
 8001074:	f7ff f88e 	bl	8000194 <isButton3Pressed>
 8001078:	4603      	mov	r3, r0
 800107a:	2b01      	cmp	r3, #1
 800107c:	d167      	bne.n	800114e <fsm_manual_run+0x52a>
				duration_yellow = ((duration_yellow % 100) % 24) * 100;
 800107e:	4b1a      	ldr	r3, [pc, #104]	@ (80010e8 <fsm_manual_run+0x4c4>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a1c      	ldr	r2, [pc, #112]	@ (80010f4 <fsm_manual_run+0x4d0>)
 8001084:	fb82 1203 	smull	r1, r2, r2, r3
 8001088:	1151      	asrs	r1, r2, #5
 800108a:	17da      	asrs	r2, r3, #31
 800108c:	1a8a      	subs	r2, r1, r2
 800108e:	2164      	movs	r1, #100	@ 0x64
 8001090:	fb01 f202 	mul.w	r2, r1, r2
 8001094:	1a9a      	subs	r2, r3, r2
 8001096:	4b1d      	ldr	r3, [pc, #116]	@ (800110c <fsm_manual_run+0x4e8>)
 8001098:	fb83 1302 	smull	r1, r3, r3, r2
 800109c:	1099      	asrs	r1, r3, #2
 800109e:	17d3      	asrs	r3, r2, #31
 80010a0:	1ac9      	subs	r1, r1, r3
 80010a2:	460b      	mov	r3, r1
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	440b      	add	r3, r1
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	1ad1      	subs	r1, r2, r3
 80010ac:	2364      	movs	r3, #100	@ 0x64
 80010ae:	fb01 f303 	mul.w	r3, r1, r3
 80010b2:	4a0d      	ldr	r2, [pc, #52]	@ (80010e8 <fsm_manual_run+0x4c4>)
 80010b4:	6013      	str	r3, [r2, #0]
				if (duration_yellow <= 400){
 80010b6:	4b0c      	ldr	r3, [pc, #48]	@ (80010e8 <fsm_manual_run+0x4c4>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80010be:	dc27      	bgt.n	8001110 <fsm_manual_run+0x4ec>
					duration_green = duration_yellow;
 80010c0:	4b09      	ldr	r3, [pc, #36]	@ (80010e8 <fsm_manual_run+0x4c4>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a0a      	ldr	r2, [pc, #40]	@ (80010f0 <fsm_manual_run+0x4cc>)
 80010c6:	6013      	str	r3, [r2, #0]
					duration_red = duration_green + duration_yellow;
 80010c8:	4b09      	ldr	r3, [pc, #36]	@ (80010f0 <fsm_manual_run+0x4cc>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b06      	ldr	r3, [pc, #24]	@ (80010e8 <fsm_manual_run+0x4c4>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4413      	add	r3, r2
 80010d2:	4a0a      	ldr	r2, [pc, #40]	@ (80010fc <fsm_manual_run+0x4d8>)
 80010d4:	6013      	str	r3, [r2, #0]
 80010d6:	e027      	b.n	8001128 <fsm_manual_run+0x504>
 80010d8:	200003f0 	.word	0x200003f0
 80010dc:	200003ec 	.word	0x200003ec
 80010e0:	20000040 	.word	0x20000040
 80010e4:	20000444 	.word	0x20000444
 80010e8:	20000054 	.word	0x20000054
 80010ec:	2000004c 	.word	0x2000004c
 80010f0:	20000058 	.word	0x20000058
 80010f4:	51eb851f 	.word	0x51eb851f
 80010f8:	1b4e81b5 	.word	0x1b4e81b5
 80010fc:	20000050 	.word	0x20000050
 8001100:	55555556 	.word	0x55555556
 8001104:	20000044 	.word	0x20000044
 8001108:	20000048 	.word	0x20000048
 800110c:	2aaaaaab 	.word	0x2aaaaaab
					duration_red = (duration_yellow * 4 / 1);
 8001110:	4b24      	ldr	r3, [pc, #144]	@ (80011a4 <fsm_manual_run+0x580>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	4a24      	ldr	r2, [pc, #144]	@ (80011a8 <fsm_manual_run+0x584>)
 8001118:	6013      	str	r3, [r2, #0]
					duration_green = duration_red - duration_yellow;
 800111a:	4b23      	ldr	r3, [pc, #140]	@ (80011a8 <fsm_manual_run+0x584>)
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	4b21      	ldr	r3, [pc, #132]	@ (80011a4 <fsm_manual_run+0x580>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	4a21      	ldr	r2, [pc, #132]	@ (80011ac <fsm_manual_run+0x588>)
 8001126:	6013      	str	r3, [r2, #0]
				status = AUTO_RED_GREEN;
 8001128:	4b21      	ldr	r3, [pc, #132]	@ (80011b0 <fsm_manual_run+0x58c>)
 800112a:	2202      	movs	r2, #2
 800112c:	601a      	str	r2, [r3, #0]
				timer1_flag = 1;
 800112e:	4b21      	ldr	r3, [pc, #132]	@ (80011b4 <fsm_manual_run+0x590>)
 8001130:	2201      	movs	r2, #1
 8001132:	601a      	str	r2, [r3, #0]
				setTimer1(duration_green);  // Thiết lập lại thời gian
 8001134:	4b1d      	ldr	r3, [pc, #116]	@ (80011ac <fsm_manual_run+0x588>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4618      	mov	r0, r3
 800113a:	f000 fbdf 	bl	80018fc <setTimer1>
				duration_road1 = duration_red;
 800113e:	4b1a      	ldr	r3, [pc, #104]	@ (80011a8 <fsm_manual_run+0x584>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a1d      	ldr	r2, [pc, #116]	@ (80011b8 <fsm_manual_run+0x594>)
 8001144:	6013      	str	r3, [r2, #0]
				duration_road2 = duration_green;
 8001146:	4b19      	ldr	r3, [pc, #100]	@ (80011ac <fsm_manual_run+0x588>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a1c      	ldr	r2, [pc, #112]	@ (80011bc <fsm_manual_run+0x598>)
 800114c:	6013      	str	r3, [r2, #0]
			if (timer1_flag == 1) {
 800114e:	4b19      	ldr	r3, [pc, #100]	@ (80011b4 <fsm_manual_run+0x590>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d123      	bne.n	800119e <fsm_manual_run+0x57a>
				duration_yellow -= duration_add;
 8001156:	4b13      	ldr	r3, [pc, #76]	@ (80011a4 <fsm_manual_run+0x580>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	4b19      	ldr	r3, [pc, #100]	@ (80011c0 <fsm_manual_run+0x59c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	4a10      	ldr	r2, [pc, #64]	@ (80011a4 <fsm_manual_run+0x580>)
 8001162:	6013      	str	r3, [r2, #0]
				status = AUTO_RED_GREEN;
 8001164:	4b12      	ldr	r3, [pc, #72]	@ (80011b0 <fsm_manual_run+0x58c>)
 8001166:	2202      	movs	r2, #2
 8001168:	601a      	str	r2, [r3, #0]
				timer1_flag = 1;
 800116a:	4b12      	ldr	r3, [pc, #72]	@ (80011b4 <fsm_manual_run+0x590>)
 800116c:	2201      	movs	r2, #1
 800116e:	601a      	str	r2, [r3, #0]
				duration_road1 = duration_red;
 8001170:	4b0d      	ldr	r3, [pc, #52]	@ (80011a8 <fsm_manual_run+0x584>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a10      	ldr	r2, [pc, #64]	@ (80011b8 <fsm_manual_run+0x594>)
 8001176:	6013      	str	r3, [r2, #0]
				duration_road2 = duration_green;
 8001178:	4b0c      	ldr	r3, [pc, #48]	@ (80011ac <fsm_manual_run+0x588>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a0f      	ldr	r2, [pc, #60]	@ (80011bc <fsm_manual_run+0x598>)
 800117e:	6013      	str	r3, [r2, #0]
				clock_status = CLOCK_DISPLAY;
 8001180:	4b10      	ldr	r3, [pc, #64]	@ (80011c4 <fsm_manual_run+0x5a0>)
 8001182:	2215      	movs	r2, #21
 8001184:	601a      	str	r2, [r3, #0]
				setTimer1(duration_green);  // Thiết lập lại bộ đếm thời gian
 8001186:	4b09      	ldr	r3, [pc, #36]	@ (80011ac <fsm_manual_run+0x588>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4618      	mov	r0, r3
 800118c:	f000 fbb6 	bl	80018fc <setTimer1>
			break;
 8001190:	e005      	b.n	800119e <fsm_manual_run+0x57a>
			break;
 8001192:	bf00      	nop
 8001194:	e004      	b.n	80011a0 <fsm_manual_run+0x57c>
			break;
 8001196:	bf00      	nop
 8001198:	e002      	b.n	80011a0 <fsm_manual_run+0x57c>
			break;
 800119a:	bf00      	nop
 800119c:	e000      	b.n	80011a0 <fsm_manual_run+0x57c>
			break;
 800119e:	bf00      	nop
	}
}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000054 	.word	0x20000054
 80011a8:	20000050 	.word	0x20000050
 80011ac:	20000058 	.word	0x20000058
 80011b0:	200003ec 	.word	0x200003ec
 80011b4:	20000444 	.word	0x20000444
 80011b8:	20000044 	.word	0x20000044
 80011bc:	20000048 	.word	0x20000048
 80011c0:	200003f0 	.word	0x200003f0
 80011c4:	20000040 	.word	0x20000040

080011c8 <red1_on>:
 *      Author: tangu
 */

#include "led.h"

void red1_on(){
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, GPIO_PIN_RESET);
 80011cc:	2200      	movs	r2, #0
 80011ce:	2120      	movs	r1, #32
 80011d0:	4802      	ldr	r0, [pc, #8]	@ (80011dc <red1_on+0x14>)
 80011d2:	f000 ffcc 	bl	800216e <HAL_GPIO_WritePin>
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40010800 	.word	0x40010800

080011e0 <red1_off>:
void red1_off(){
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, GPIO_PIN_SET);
 80011e4:	2201      	movs	r2, #1
 80011e6:	2120      	movs	r1, #32
 80011e8:	4802      	ldr	r0, [pc, #8]	@ (80011f4 <red1_off+0x14>)
 80011ea:	f000 ffc0 	bl	800216e <HAL_GPIO_WritePin>
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40010800 	.word	0x40010800

080011f8 <red2_on>:
void red2_on(){
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, GPIO_PIN_RESET);
 80011fc:	2200      	movs	r2, #0
 80011fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001202:	4802      	ldr	r0, [pc, #8]	@ (800120c <red2_on+0x14>)
 8001204:	f000 ffb3 	bl	800216e <HAL_GPIO_WritePin>
}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40010800 	.word	0x40010800

08001210 <red2_off>:
void red2_off(){
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, GPIO_PIN_SET);
 8001214:	2201      	movs	r2, #1
 8001216:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800121a:	4802      	ldr	r0, [pc, #8]	@ (8001224 <red2_off+0x14>)
 800121c:	f000 ffa7 	bl	800216e <HAL_GPIO_WritePin>
}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40010800 	.word	0x40010800

08001228 <yellow1_on>:

void yellow1_on(){
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, GPIO_PIN_RESET);
 800122c:	2200      	movs	r2, #0
 800122e:	2140      	movs	r1, #64	@ 0x40
 8001230:	4802      	ldr	r0, [pc, #8]	@ (800123c <yellow1_on+0x14>)
 8001232:	f000 ff9c 	bl	800216e <HAL_GPIO_WritePin>
}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40010800 	.word	0x40010800

08001240 <yellow1_off>:
void yellow1_off(){
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, GPIO_PIN_SET);
 8001244:	2201      	movs	r2, #1
 8001246:	2140      	movs	r1, #64	@ 0x40
 8001248:	4802      	ldr	r0, [pc, #8]	@ (8001254 <yellow1_off+0x14>)
 800124a:	f000 ff90 	bl	800216e <HAL_GPIO_WritePin>
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40010800 	.word	0x40010800

08001258 <yellow2_on>:
void yellow2_on(){
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, GPIO_PIN_RESET);
 800125c:	2200      	movs	r2, #0
 800125e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001262:	4802      	ldr	r0, [pc, #8]	@ (800126c <yellow2_on+0x14>)
 8001264:	f000 ff83 	bl	800216e <HAL_GPIO_WritePin>
}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40010800 	.word	0x40010800

08001270 <yellow2_off>:
void yellow2_off(){
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, GPIO_PIN_SET);
 8001274:	2201      	movs	r2, #1
 8001276:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800127a:	4802      	ldr	r0, [pc, #8]	@ (8001284 <yellow2_off+0x14>)
 800127c:	f000 ff77 	bl	800216e <HAL_GPIO_WritePin>
}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40010800 	.word	0x40010800

08001288 <green1_on>:

void green1_on(){
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, GPIO_PIN_RESET);
 800128c:	2200      	movs	r2, #0
 800128e:	2180      	movs	r1, #128	@ 0x80
 8001290:	4802      	ldr	r0, [pc, #8]	@ (800129c <green1_on+0x14>)
 8001292:	f000 ff6c 	bl	800216e <HAL_GPIO_WritePin>
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40010800 	.word	0x40010800

080012a0 <green1_off>:
void green1_off(){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, GPIO_PIN_SET);
 80012a4:	2201      	movs	r2, #1
 80012a6:	2180      	movs	r1, #128	@ 0x80
 80012a8:	4802      	ldr	r0, [pc, #8]	@ (80012b4 <green1_off+0x14>)
 80012aa:	f000 ff60 	bl	800216e <HAL_GPIO_WritePin>
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40010800 	.word	0x40010800

080012b8 <green2_on>:
void green2_on(){
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, GPIO_PIN_RESET);
 80012bc:	2200      	movs	r2, #0
 80012be:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012c2:	4802      	ldr	r0, [pc, #8]	@ (80012cc <green2_on+0x14>)
 80012c4:	f000 ff53 	bl	800216e <HAL_GPIO_WritePin>
}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40010800 	.word	0x40010800

080012d0 <green2_off>:
void green2_off(){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, GPIO_PIN_SET);
 80012d4:	2201      	movs	r2, #1
 80012d6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012da:	4802      	ldr	r0, [pc, #8]	@ (80012e4 <green2_off+0x14>)
 80012dc:	f000 ff47 	bl	800216e <HAL_GPIO_WritePin>
}
 80012e0:	bf00      	nop
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40010800 	.word	0x40010800

080012e8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80012ec:	f000 fc3c 	bl	8001b68 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80012f0:	f000 f832 	bl	8001358 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80012f4:	f000 f8b8 	bl	8001468 <MX_GPIO_Init>
	MX_TIM2_Init();
 80012f8:	f000 f86a 	bl	80013d0 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 80012fc:	4811      	ldr	r0, [pc, #68]	@ (8001344 <main+0x5c>)
 80012fe:	f001 fb99 	bl	8002a34 <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	status = INIT;
 8001302:	4b11      	ldr	r3, [pc, #68]	@ (8001348 <main+0x60>)
 8001304:	2201      	movs	r2, #1
 8001306:	601a      	str	r2, [r3, #0]
	SCH_Add_Task(fsm_automatic_run,200, 100);
 8001308:	2264      	movs	r2, #100	@ 0x64
 800130a:	21c8      	movs	r1, #200	@ 0xc8
 800130c:	480f      	ldr	r0, [pc, #60]	@ (800134c <main+0x64>)
 800130e:	f7ff f8b7 	bl	8000480 <SCH_Add_Task>
	SCH_Add_Task(fsm_manual_run, 300, 500);
 8001312:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001316:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800131a:	480d      	ldr	r0, [pc, #52]	@ (8001350 <main+0x68>)
 800131c:	f7ff f8b0 	bl	8000480 <SCH_Add_Task>
	SCH_Add_Task(displayClock, 10, 100);
 8001320:	2264      	movs	r2, #100	@ 0x64
 8001322:	210a      	movs	r1, #10
 8001324:	480b      	ldr	r0, [pc, #44]	@ (8001354 <main+0x6c>)
 8001326:	f7ff f8ab 	bl	8000480 <SCH_Add_Task>
	setTimer2(15);
 800132a:	200f      	movs	r0, #15
 800132c:	f000 fafa 	bl	8001924 <setTimer2>
	setTimer3(100);
 8001330:	2064      	movs	r0, #100	@ 0x64
 8001332:	f000 fb0b 	bl	800194c <setTimer3>
	while (1) {
//		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin));
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		SCH_Dispatch_Tasks();
 8001336:	f7ff f8f5 	bl	8000524 <SCH_Dispatch_Tasks>
//		fsm_automatic_run();
//		fsm_manual_run();
//		displayClock();
		realTimeClock();
 800133a:	f7ff fac3 	bl	80008c4 <realTimeClock>
		SCH_Dispatch_Tasks();
 800133e:	bf00      	nop
 8001340:	e7f9      	b.n	8001336 <main+0x4e>
 8001342:	bf00      	nop
 8001344:	200003f8 	.word	0x200003f8
 8001348:	200003ec 	.word	0x200003ec
 800134c:	08000991 	.word	0x08000991
 8001350:	08000c25 	.word	0x08000c25
 8001354:	08000935 	.word	0x08000935

08001358 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001358:	b580      	push	{r7, lr}
 800135a:	b090      	sub	sp, #64	@ 0x40
 800135c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800135e:	f107 0318 	add.w	r3, r7, #24
 8001362:	2228      	movs	r2, #40	@ 0x28
 8001364:	2100      	movs	r1, #0
 8001366:	4618      	mov	r0, r3
 8001368:	f001 fef0 	bl	800314c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800136c:	1d3b      	adds	r3, r7, #4
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
 8001378:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800137a:	2302      	movs	r3, #2
 800137c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800137e:	2301      	movs	r3, #1
 8001380:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001382:	2310      	movs	r3, #16
 8001384:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001386:	2300      	movs	r3, #0
 8001388:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800138a:	f107 0318 	add.w	r3, r7, #24
 800138e:	4618      	mov	r0, r3
 8001390:	f000 ff22 	bl	80021d8 <HAL_RCC_OscConfig>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <SystemClock_Config+0x46>
		Error_Handler();
 800139a:	f000 f8e3 	bl	8001564 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800139e:	230f      	movs	r3, #15
 80013a0:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013aa:	2300      	movs	r3, #0
 80013ac:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	2100      	movs	r1, #0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f001 f990 	bl	80026dc <HAL_RCC_ClockConfig>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <SystemClock_Config+0x6e>
		Error_Handler();
 80013c2:	f000 f8cf 	bl	8001564 <Error_Handler>
	}
}
 80013c6:	bf00      	nop
 80013c8:	3740      	adds	r7, #64	@ 0x40
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80013d6:	f107 0308 	add.w	r3, r7, #8
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80013e4:	463b      	mov	r3, r7
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80013ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001464 <MX_TIM2_Init+0x94>)
 80013ee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013f2:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 7999;
 80013f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001464 <MX_TIM2_Init+0x94>)
 80013f6:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80013fa:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fc:	4b19      	ldr	r3, [pc, #100]	@ (8001464 <MX_TIM2_Init+0x94>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 9;
 8001402:	4b18      	ldr	r3, [pc, #96]	@ (8001464 <MX_TIM2_Init+0x94>)
 8001404:	2209      	movs	r2, #9
 8001406:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001408:	4b16      	ldr	r3, [pc, #88]	@ (8001464 <MX_TIM2_Init+0x94>)
 800140a:	2200      	movs	r2, #0
 800140c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800140e:	4b15      	ldr	r3, [pc, #84]	@ (8001464 <MX_TIM2_Init+0x94>)
 8001410:	2200      	movs	r2, #0
 8001412:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001414:	4813      	ldr	r0, [pc, #76]	@ (8001464 <MX_TIM2_Init+0x94>)
 8001416:	f001 fabd 	bl	8002994 <HAL_TIM_Base_Init>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM2_Init+0x54>
		Error_Handler();
 8001420:	f000 f8a0 	bl	8001564 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001424:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001428:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800142a:	f107 0308 	add.w	r3, r7, #8
 800142e:	4619      	mov	r1, r3
 8001430:	480c      	ldr	r0, [pc, #48]	@ (8001464 <MX_TIM2_Init+0x94>)
 8001432:	f001 fc3b 	bl	8002cac <HAL_TIM_ConfigClockSource>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM2_Init+0x70>
		Error_Handler();
 800143c:	f000 f892 	bl	8001564 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001440:	2300      	movs	r3, #0
 8001442:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001444:	2300      	movs	r3, #0
 8001446:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001448:	463b      	mov	r3, r7
 800144a:	4619      	mov	r1, r3
 800144c:	4805      	ldr	r0, [pc, #20]	@ (8001464 <MX_TIM2_Init+0x94>)
 800144e:	f001 fe13 	bl	8003078 <HAL_TIMEx_MasterConfigSynchronization>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8001458:	f000 f884 	bl	8001564 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 800145c:	bf00      	nop
 800145e:	3718      	adds	r7, #24
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	200003f8 	.word	0x200003f8

08001468 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800146e:	f107 0308 	add.w	r3, r7, #8
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800147c:	4b2d      	ldr	r3, [pc, #180]	@ (8001534 <MX_GPIO_Init+0xcc>)
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	4a2c      	ldr	r2, [pc, #176]	@ (8001534 <MX_GPIO_Init+0xcc>)
 8001482:	f043 0304 	orr.w	r3, r3, #4
 8001486:	6193      	str	r3, [r2, #24]
 8001488:	4b2a      	ldr	r3, [pc, #168]	@ (8001534 <MX_GPIO_Init+0xcc>)
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	f003 0304 	and.w	r3, r3, #4
 8001490:	607b      	str	r3, [r7, #4]
 8001492:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001494:	4b27      	ldr	r3, [pc, #156]	@ (8001534 <MX_GPIO_Init+0xcc>)
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	4a26      	ldr	r2, [pc, #152]	@ (8001534 <MX_GPIO_Init+0xcc>)
 800149a:	f043 0308 	orr.w	r3, r3, #8
 800149e:	6193      	str	r3, [r2, #24]
 80014a0:	4b24      	ldr	r3, [pc, #144]	@ (8001534 <MX_GPIO_Init+0xcc>)
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	f003 0308 	and.w	r3, r3, #8
 80014a8:	603b      	str	r3, [r7, #0]
 80014aa:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 80014ac:	2200      	movs	r2, #0
 80014ae:	21fe      	movs	r1, #254	@ 0xfe
 80014b0:	4821      	ldr	r0, [pc, #132]	@ (8001538 <MX_GPIO_Init+0xd0>)
 80014b2:	f000 fe5c 	bl	800216e <HAL_GPIO_WritePin>
	EN0_Pin | EN1_Pin | EN2_Pin | EN3_Pin | RED1_Pin | YELLOW1_Pin | GREEN1_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 80014b6:	2200      	movs	r2, #0
 80014b8:	217f      	movs	r1, #127	@ 0x7f
 80014ba:	4820      	ldr	r0, [pc, #128]	@ (800153c <MX_GPIO_Init+0xd4>)
 80014bc:	f000 fe57 	bl	800216e <HAL_GPIO_WritePin>
	SEG0_Pin | SEG1_Pin | SEG2_Pin | SEG3_Pin | SEG4_Pin | SEG5_Pin | SEG6_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin
	 RED1_Pin YELLOW1_Pin GREEN1_Pin */
	GPIO_InitStruct.Pin = EN0_Pin | EN1_Pin | EN2_Pin | EN3_Pin | RED1_Pin
 80014c0:	23fe      	movs	r3, #254	@ 0xfe
 80014c2:	60bb      	str	r3, [r7, #8]
			| YELLOW1_Pin | GREEN1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c4:	2301      	movs	r3, #1
 80014c6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014cc:	2302      	movs	r3, #2
 80014ce:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d0:	f107 0308 	add.w	r3, r7, #8
 80014d4:	4619      	mov	r1, r3
 80014d6:	4818      	ldr	r0, [pc, #96]	@ (8001538 <MX_GPIO_Init+0xd0>)
 80014d8:	f000 fcb6 	bl	8001e48 <HAL_GPIO_Init>

	/*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin SEG3_Pin
	 SEG4_Pin SEG5_Pin SEG6_Pin */
	GPIO_InitStruct.Pin = SEG0_Pin | SEG1_Pin | SEG2_Pin | SEG3_Pin | SEG4_Pin
 80014dc:	237f      	movs	r3, #127	@ 0x7f
 80014de:	60bb      	str	r3, [r7, #8]
			| SEG5_Pin | SEG6_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e0:	2301      	movs	r3, #1
 80014e2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e8:	2302      	movs	r3, #2
 80014ea:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ec:	f107 0308 	add.w	r3, r7, #8
 80014f0:	4619      	mov	r1, r3
 80014f2:	4812      	ldr	r0, [pc, #72]	@ (800153c <MX_GPIO_Init+0xd4>)
 80014f4:	f000 fca8 	bl	8001e48 <HAL_GPIO_Init>

	/*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
	GPIO_InitStruct.Pin = BUTTON1_Pin | BUTTON2_Pin | BUTTON3_Pin;
 80014f8:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80014fc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001502:	2301      	movs	r3, #1
 8001504:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001506:	f107 0308 	add.w	r3, r7, #8
 800150a:	4619      	mov	r1, r3
 800150c:	480b      	ldr	r0, [pc, #44]	@ (800153c <MX_GPIO_Init+0xd4>)
 800150e:	f000 fc9b 	bl	8001e48 <HAL_GPIO_Init>

	/*Configure GPIO pins : RED2_Pin YELLOW2_Pin GREEN2_Pin */
	GPIO_InitStruct.Pin = RED2_Pin | YELLOW2_Pin | GREEN2_Pin;
 8001512:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001516:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001518:	2300      	movs	r3, #0
 800151a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800151c:	2301      	movs	r3, #1
 800151e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001520:	f107 0308 	add.w	r3, r7, #8
 8001524:	4619      	mov	r1, r3
 8001526:	4804      	ldr	r0, [pc, #16]	@ (8001538 <MX_GPIO_Init+0xd0>)
 8001528:	f000 fc8e 	bl	8001e48 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800152c:	bf00      	nop
 800152e:	3718      	adds	r7, #24
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40021000 	.word	0x40021000
 8001538:	40010800 	.word	0x40010800
 800153c:	40010c00 	.word	0x40010c00

08001540 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
	timerRun();
 8001548:	f000 fa14 	bl	8001974 <timerRun>
	getKeyInput1();
 800154c:	f7fe fe58 	bl	8000200 <getKeyInput1>
	getKeyInput2();
 8001550:	f7fe fe92 	bl	8000278 <getKeyInput2>
	getKeyInput3();
 8001554:	f7fe fecc 	bl	80002f0 <getKeyInput3>
	SCH_Update();
 8001558:	f7fe ff06 	bl	8000368 <SCH_Update>
}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001568:	b672      	cpsid	i
}
 800156a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800156c:	bf00      	nop
 800156e:	e7fd      	b.n	800156c <Error_Handler+0x8>

08001570 <display7SEG>:
 *      Author: tangu
 */

#include "seven_segment.h"

void display7SEG(int num){
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
	const int led_on = 0;
 8001578:	2300      	movs	r3, #0
 800157a:	60fb      	str	r3, [r7, #12]
	const int led_off = 1;
 800157c:	2301      	movs	r3, #1
 800157e:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, led_off);
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	b2db      	uxtb	r3, r3
 8001584:	461a      	mov	r2, r3
 8001586:	2101      	movs	r1, #1
 8001588:	48a9      	ldr	r0, [pc, #676]	@ (8001830 <display7SEG+0x2c0>)
 800158a:	f000 fdf0 	bl	800216e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, led_off);
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	b2db      	uxtb	r3, r3
 8001592:	461a      	mov	r2, r3
 8001594:	2102      	movs	r1, #2
 8001596:	48a6      	ldr	r0, [pc, #664]	@ (8001830 <display7SEG+0x2c0>)
 8001598:	f000 fde9 	bl	800216e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, led_off);
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	461a      	mov	r2, r3
 80015a2:	2104      	movs	r1, #4
 80015a4:	48a2      	ldr	r0, [pc, #648]	@ (8001830 <display7SEG+0x2c0>)
 80015a6:	f000 fde2 	bl	800216e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, led_off);
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	461a      	mov	r2, r3
 80015b0:	2108      	movs	r1, #8
 80015b2:	489f      	ldr	r0, [pc, #636]	@ (8001830 <display7SEG+0x2c0>)
 80015b4:	f000 fddb 	bl	800216e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, led_off);
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	461a      	mov	r2, r3
 80015be:	2110      	movs	r1, #16
 80015c0:	489b      	ldr	r0, [pc, #620]	@ (8001830 <display7SEG+0x2c0>)
 80015c2:	f000 fdd4 	bl	800216e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, led_off);
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	461a      	mov	r2, r3
 80015cc:	2120      	movs	r1, #32
 80015ce:	4898      	ldr	r0, [pc, #608]	@ (8001830 <display7SEG+0x2c0>)
 80015d0:	f000 fdcd 	bl	800216e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, led_off);
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	461a      	mov	r2, r3
 80015da:	2140      	movs	r1, #64	@ 0x40
 80015dc:	4894      	ldr	r0, [pc, #592]	@ (8001830 <display7SEG+0x2c0>)
 80015de:	f000 fdc6 	bl	800216e <HAL_GPIO_WritePin>
	switch (num) {
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b09      	cmp	r3, #9
 80015e6:	f200 8182 	bhi.w	80018ee <display7SEG+0x37e>
 80015ea:	a201      	add	r2, pc, #4	@ (adr r2, 80015f0 <display7SEG+0x80>)
 80015ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f0:	08001619 	.word	0x08001619
 80015f4:	0800167d 	.word	0x0800167d
 80015f8:	0800169b 	.word	0x0800169b
 80015fc:	080016e3 	.word	0x080016e3
 8001600:	0800172b 	.word	0x0800172b
 8001604:	08001765 	.word	0x08001765
 8001608:	080017ad 	.word	0x080017ad
 800160c:	08001803 	.word	0x08001803
 8001610:	08001835 	.word	0x08001835
 8001614:	08001899 	.word	0x08001899
		case 0:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, led_on);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	b2db      	uxtb	r3, r3
 800161c:	461a      	mov	r2, r3
 800161e:	2101      	movs	r1, #1
 8001620:	4883      	ldr	r0, [pc, #524]	@ (8001830 <display7SEG+0x2c0>)
 8001622:	f000 fda4 	bl	800216e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, led_on);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	b2db      	uxtb	r3, r3
 800162a:	461a      	mov	r2, r3
 800162c:	2102      	movs	r1, #2
 800162e:	4880      	ldr	r0, [pc, #512]	@ (8001830 <display7SEG+0x2c0>)
 8001630:	f000 fd9d 	bl	800216e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, led_on);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	b2db      	uxtb	r3, r3
 8001638:	461a      	mov	r2, r3
 800163a:	2104      	movs	r1, #4
 800163c:	487c      	ldr	r0, [pc, #496]	@ (8001830 <display7SEG+0x2c0>)
 800163e:	f000 fd96 	bl	800216e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, led_on);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	b2db      	uxtb	r3, r3
 8001646:	461a      	mov	r2, r3
 8001648:	2108      	movs	r1, #8
 800164a:	4879      	ldr	r0, [pc, #484]	@ (8001830 <display7SEG+0x2c0>)
 800164c:	f000 fd8f 	bl	800216e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, led_on);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	b2db      	uxtb	r3, r3
 8001654:	461a      	mov	r2, r3
 8001656:	2110      	movs	r1, #16
 8001658:	4875      	ldr	r0, [pc, #468]	@ (8001830 <display7SEG+0x2c0>)
 800165a:	f000 fd88 	bl	800216e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, led_on);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	b2db      	uxtb	r3, r3
 8001662:	461a      	mov	r2, r3
 8001664:	2120      	movs	r1, #32
 8001666:	4872      	ldr	r0, [pc, #456]	@ (8001830 <display7SEG+0x2c0>)
 8001668:	f000 fd81 	bl	800216e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, led_off);
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	b2db      	uxtb	r3, r3
 8001670:	461a      	mov	r2, r3
 8001672:	2140      	movs	r1, #64	@ 0x40
 8001674:	486e      	ldr	r0, [pc, #440]	@ (8001830 <display7SEG+0x2c0>)
 8001676:	f000 fd7a 	bl	800216e <HAL_GPIO_WritePin>
			break;
 800167a:	e139      	b.n	80018f0 <display7SEG+0x380>
		case 1:
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, led_on);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	b2db      	uxtb	r3, r3
 8001680:	461a      	mov	r2, r3
 8001682:	2102      	movs	r1, #2
 8001684:	486a      	ldr	r0, [pc, #424]	@ (8001830 <display7SEG+0x2c0>)
 8001686:	f000 fd72 	bl	800216e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, led_on);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	b2db      	uxtb	r3, r3
 800168e:	461a      	mov	r2, r3
 8001690:	2104      	movs	r1, #4
 8001692:	4867      	ldr	r0, [pc, #412]	@ (8001830 <display7SEG+0x2c0>)
 8001694:	f000 fd6b 	bl	800216e <HAL_GPIO_WritePin>
			break;
 8001698:	e12a      	b.n	80018f0 <display7SEG+0x380>
		case 2:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, led_on);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	b2db      	uxtb	r3, r3
 800169e:	461a      	mov	r2, r3
 80016a0:	2101      	movs	r1, #1
 80016a2:	4863      	ldr	r0, [pc, #396]	@ (8001830 <display7SEG+0x2c0>)
 80016a4:	f000 fd63 	bl	800216e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, led_on);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	461a      	mov	r2, r3
 80016ae:	2102      	movs	r1, #2
 80016b0:	485f      	ldr	r0, [pc, #380]	@ (8001830 <display7SEG+0x2c0>)
 80016b2:	f000 fd5c 	bl	800216e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, led_on);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	461a      	mov	r2, r3
 80016bc:	2108      	movs	r1, #8
 80016be:	485c      	ldr	r0, [pc, #368]	@ (8001830 <display7SEG+0x2c0>)
 80016c0:	f000 fd55 	bl	800216e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, led_on);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	461a      	mov	r2, r3
 80016ca:	2110      	movs	r1, #16
 80016cc:	4858      	ldr	r0, [pc, #352]	@ (8001830 <display7SEG+0x2c0>)
 80016ce:	f000 fd4e 	bl	800216e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, led_on);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	461a      	mov	r2, r3
 80016d8:	2140      	movs	r1, #64	@ 0x40
 80016da:	4855      	ldr	r0, [pc, #340]	@ (8001830 <display7SEG+0x2c0>)
 80016dc:	f000 fd47 	bl	800216e <HAL_GPIO_WritePin>
			break;
 80016e0:	e106      	b.n	80018f0 <display7SEG+0x380>
		case 3:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, led_on);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	461a      	mov	r2, r3
 80016e8:	2101      	movs	r1, #1
 80016ea:	4851      	ldr	r0, [pc, #324]	@ (8001830 <display7SEG+0x2c0>)
 80016ec:	f000 fd3f 	bl	800216e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, led_on);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	461a      	mov	r2, r3
 80016f6:	2102      	movs	r1, #2
 80016f8:	484d      	ldr	r0, [pc, #308]	@ (8001830 <display7SEG+0x2c0>)
 80016fa:	f000 fd38 	bl	800216e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, led_on);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	b2db      	uxtb	r3, r3
 8001702:	461a      	mov	r2, r3
 8001704:	2104      	movs	r1, #4
 8001706:	484a      	ldr	r0, [pc, #296]	@ (8001830 <display7SEG+0x2c0>)
 8001708:	f000 fd31 	bl	800216e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, led_on);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	b2db      	uxtb	r3, r3
 8001710:	461a      	mov	r2, r3
 8001712:	2108      	movs	r1, #8
 8001714:	4846      	ldr	r0, [pc, #280]	@ (8001830 <display7SEG+0x2c0>)
 8001716:	f000 fd2a 	bl	800216e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, led_on);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	b2db      	uxtb	r3, r3
 800171e:	461a      	mov	r2, r3
 8001720:	2140      	movs	r1, #64	@ 0x40
 8001722:	4843      	ldr	r0, [pc, #268]	@ (8001830 <display7SEG+0x2c0>)
 8001724:	f000 fd23 	bl	800216e <HAL_GPIO_WritePin>
			break;
 8001728:	e0e2      	b.n	80018f0 <display7SEG+0x380>
		case 4:
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, led_on);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	b2db      	uxtb	r3, r3
 800172e:	461a      	mov	r2, r3
 8001730:	2102      	movs	r1, #2
 8001732:	483f      	ldr	r0, [pc, #252]	@ (8001830 <display7SEG+0x2c0>)
 8001734:	f000 fd1b 	bl	800216e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, led_on);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	b2db      	uxtb	r3, r3
 800173c:	461a      	mov	r2, r3
 800173e:	2104      	movs	r1, #4
 8001740:	483b      	ldr	r0, [pc, #236]	@ (8001830 <display7SEG+0x2c0>)
 8001742:	f000 fd14 	bl	800216e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, led_on);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	b2db      	uxtb	r3, r3
 800174a:	461a      	mov	r2, r3
 800174c:	2120      	movs	r1, #32
 800174e:	4838      	ldr	r0, [pc, #224]	@ (8001830 <display7SEG+0x2c0>)
 8001750:	f000 fd0d 	bl	800216e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, led_on);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	b2db      	uxtb	r3, r3
 8001758:	461a      	mov	r2, r3
 800175a:	2140      	movs	r1, #64	@ 0x40
 800175c:	4834      	ldr	r0, [pc, #208]	@ (8001830 <display7SEG+0x2c0>)
 800175e:	f000 fd06 	bl	800216e <HAL_GPIO_WritePin>
			break;
 8001762:	e0c5      	b.n	80018f0 <display7SEG+0x380>
		case 5:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, led_on);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	b2db      	uxtb	r3, r3
 8001768:	461a      	mov	r2, r3
 800176a:	2101      	movs	r1, #1
 800176c:	4830      	ldr	r0, [pc, #192]	@ (8001830 <display7SEG+0x2c0>)
 800176e:	f000 fcfe 	bl	800216e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, led_on);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	b2db      	uxtb	r3, r3
 8001776:	461a      	mov	r2, r3
 8001778:	2104      	movs	r1, #4
 800177a:	482d      	ldr	r0, [pc, #180]	@ (8001830 <display7SEG+0x2c0>)
 800177c:	f000 fcf7 	bl	800216e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, led_on);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	b2db      	uxtb	r3, r3
 8001784:	461a      	mov	r2, r3
 8001786:	2108      	movs	r1, #8
 8001788:	4829      	ldr	r0, [pc, #164]	@ (8001830 <display7SEG+0x2c0>)
 800178a:	f000 fcf0 	bl	800216e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, led_on);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	b2db      	uxtb	r3, r3
 8001792:	461a      	mov	r2, r3
 8001794:	2120      	movs	r1, #32
 8001796:	4826      	ldr	r0, [pc, #152]	@ (8001830 <display7SEG+0x2c0>)
 8001798:	f000 fce9 	bl	800216e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, led_on);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	461a      	mov	r2, r3
 80017a2:	2140      	movs	r1, #64	@ 0x40
 80017a4:	4822      	ldr	r0, [pc, #136]	@ (8001830 <display7SEG+0x2c0>)
 80017a6:	f000 fce2 	bl	800216e <HAL_GPIO_WritePin>
			break;
 80017aa:	e0a1      	b.n	80018f0 <display7SEG+0x380>
		case 6:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, led_on);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	461a      	mov	r2, r3
 80017b2:	2101      	movs	r1, #1
 80017b4:	481e      	ldr	r0, [pc, #120]	@ (8001830 <display7SEG+0x2c0>)
 80017b6:	f000 fcda 	bl	800216e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, led_on);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	461a      	mov	r2, r3
 80017c0:	2104      	movs	r1, #4
 80017c2:	481b      	ldr	r0, [pc, #108]	@ (8001830 <display7SEG+0x2c0>)
 80017c4:	f000 fcd3 	bl	800216e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, led_on);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	461a      	mov	r2, r3
 80017ce:	2108      	movs	r1, #8
 80017d0:	4817      	ldr	r0, [pc, #92]	@ (8001830 <display7SEG+0x2c0>)
 80017d2:	f000 fccc 	bl	800216e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, led_on);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	461a      	mov	r2, r3
 80017dc:	2110      	movs	r1, #16
 80017de:	4814      	ldr	r0, [pc, #80]	@ (8001830 <display7SEG+0x2c0>)
 80017e0:	f000 fcc5 	bl	800216e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, led_on);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	461a      	mov	r2, r3
 80017ea:	2120      	movs	r1, #32
 80017ec:	4810      	ldr	r0, [pc, #64]	@ (8001830 <display7SEG+0x2c0>)
 80017ee:	f000 fcbe 	bl	800216e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, led_on);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	461a      	mov	r2, r3
 80017f8:	2140      	movs	r1, #64	@ 0x40
 80017fa:	480d      	ldr	r0, [pc, #52]	@ (8001830 <display7SEG+0x2c0>)
 80017fc:	f000 fcb7 	bl	800216e <HAL_GPIO_WritePin>
			break;
 8001800:	e076      	b.n	80018f0 <display7SEG+0x380>
		case 7:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, led_on);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	b2db      	uxtb	r3, r3
 8001806:	461a      	mov	r2, r3
 8001808:	2101      	movs	r1, #1
 800180a:	4809      	ldr	r0, [pc, #36]	@ (8001830 <display7SEG+0x2c0>)
 800180c:	f000 fcaf 	bl	800216e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, led_on);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	b2db      	uxtb	r3, r3
 8001814:	461a      	mov	r2, r3
 8001816:	2102      	movs	r1, #2
 8001818:	4805      	ldr	r0, [pc, #20]	@ (8001830 <display7SEG+0x2c0>)
 800181a:	f000 fca8 	bl	800216e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, led_on);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	b2db      	uxtb	r3, r3
 8001822:	461a      	mov	r2, r3
 8001824:	2104      	movs	r1, #4
 8001826:	4802      	ldr	r0, [pc, #8]	@ (8001830 <display7SEG+0x2c0>)
 8001828:	f000 fca1 	bl	800216e <HAL_GPIO_WritePin>
			break;
 800182c:	e060      	b.n	80018f0 <display7SEG+0x380>
 800182e:	bf00      	nop
 8001830:	40010c00 	.word	0x40010c00
		case 8:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, led_on);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	b2db      	uxtb	r3, r3
 8001838:	461a      	mov	r2, r3
 800183a:	2101      	movs	r1, #1
 800183c:	482e      	ldr	r0, [pc, #184]	@ (80018f8 <display7SEG+0x388>)
 800183e:	f000 fc96 	bl	800216e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, led_on);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	b2db      	uxtb	r3, r3
 8001846:	461a      	mov	r2, r3
 8001848:	2102      	movs	r1, #2
 800184a:	482b      	ldr	r0, [pc, #172]	@ (80018f8 <display7SEG+0x388>)
 800184c:	f000 fc8f 	bl	800216e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, led_on);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	b2db      	uxtb	r3, r3
 8001854:	461a      	mov	r2, r3
 8001856:	2104      	movs	r1, #4
 8001858:	4827      	ldr	r0, [pc, #156]	@ (80018f8 <display7SEG+0x388>)
 800185a:	f000 fc88 	bl	800216e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, led_on);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	b2db      	uxtb	r3, r3
 8001862:	461a      	mov	r2, r3
 8001864:	2108      	movs	r1, #8
 8001866:	4824      	ldr	r0, [pc, #144]	@ (80018f8 <display7SEG+0x388>)
 8001868:	f000 fc81 	bl	800216e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, led_on);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	b2db      	uxtb	r3, r3
 8001870:	461a      	mov	r2, r3
 8001872:	2110      	movs	r1, #16
 8001874:	4820      	ldr	r0, [pc, #128]	@ (80018f8 <display7SEG+0x388>)
 8001876:	f000 fc7a 	bl	800216e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, led_on);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	b2db      	uxtb	r3, r3
 800187e:	461a      	mov	r2, r3
 8001880:	2120      	movs	r1, #32
 8001882:	481d      	ldr	r0, [pc, #116]	@ (80018f8 <display7SEG+0x388>)
 8001884:	f000 fc73 	bl	800216e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, led_on);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	b2db      	uxtb	r3, r3
 800188c:	461a      	mov	r2, r3
 800188e:	2140      	movs	r1, #64	@ 0x40
 8001890:	4819      	ldr	r0, [pc, #100]	@ (80018f8 <display7SEG+0x388>)
 8001892:	f000 fc6c 	bl	800216e <HAL_GPIO_WritePin>
			break;
 8001896:	e02b      	b.n	80018f0 <display7SEG+0x380>
		case 9:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, led_on);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	b2db      	uxtb	r3, r3
 800189c:	461a      	mov	r2, r3
 800189e:	2101      	movs	r1, #1
 80018a0:	4815      	ldr	r0, [pc, #84]	@ (80018f8 <display7SEG+0x388>)
 80018a2:	f000 fc64 	bl	800216e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, led_on);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	461a      	mov	r2, r3
 80018ac:	2102      	movs	r1, #2
 80018ae:	4812      	ldr	r0, [pc, #72]	@ (80018f8 <display7SEG+0x388>)
 80018b0:	f000 fc5d 	bl	800216e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, led_on);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	461a      	mov	r2, r3
 80018ba:	2104      	movs	r1, #4
 80018bc:	480e      	ldr	r0, [pc, #56]	@ (80018f8 <display7SEG+0x388>)
 80018be:	f000 fc56 	bl	800216e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, led_on);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	461a      	mov	r2, r3
 80018c8:	2108      	movs	r1, #8
 80018ca:	480b      	ldr	r0, [pc, #44]	@ (80018f8 <display7SEG+0x388>)
 80018cc:	f000 fc4f 	bl	800216e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, led_on);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	461a      	mov	r2, r3
 80018d6:	2120      	movs	r1, #32
 80018d8:	4807      	ldr	r0, [pc, #28]	@ (80018f8 <display7SEG+0x388>)
 80018da:	f000 fc48 	bl	800216e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, led_on);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	461a      	mov	r2, r3
 80018e4:	2140      	movs	r1, #64	@ 0x40
 80018e6:	4804      	ldr	r0, [pc, #16]	@ (80018f8 <display7SEG+0x388>)
 80018e8:	f000 fc41 	bl	800216e <HAL_GPIO_WritePin>
			break;
 80018ec:	e000      	b.n	80018f0 <display7SEG+0x380>
		default:
			break;
 80018ee:	bf00      	nop
	}
}
 80018f0:	bf00      	nop
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40010c00 	.word	0x40010c00

080018fc <setTimer1>:
int timer2_counter = 0;
int timer2_flag = 0;
int timer3_counter = 0;
int timer3_flag = 0;

void setTimer1(int duration){
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 8001904:	4a05      	ldr	r2, [pc, #20]	@ (800191c <setTimer1+0x20>)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800190a:	4b05      	ldr	r3, [pc, #20]	@ (8001920 <setTimer1+0x24>)
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	bc80      	pop	{r7}
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	20000440 	.word	0x20000440
 8001920:	20000444 	.word	0x20000444

08001924 <setTimer2>:

void setTimer2(int duration){
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 800192c:	4a05      	ldr	r2, [pc, #20]	@ (8001944 <setTimer2+0x20>)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001932:	4b05      	ldr	r3, [pc, #20]	@ (8001948 <setTimer2+0x24>)
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	20000448 	.word	0x20000448
 8001948:	2000044c 	.word	0x2000044c

0800194c <setTimer3>:

void setTimer3(int duration){
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 8001954:	4a05      	ldr	r2, [pc, #20]	@ (800196c <setTimer3+0x20>)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 800195a:	4b05      	ldr	r3, [pc, #20]	@ (8001970 <setTimer3+0x24>)
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	bc80      	pop	{r7}
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	20000450 	.word	0x20000450
 8001970:	20000454 	.word	0x20000454

08001974 <timerRun>:

void timerRun(){
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
	if (timer1_counter > 0){
 8001978:	4b19      	ldr	r3, [pc, #100]	@ (80019e0 <timerRun+0x6c>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	dd0b      	ble.n	8001998 <timerRun+0x24>
		timer1_counter--;
 8001980:	4b17      	ldr	r3, [pc, #92]	@ (80019e0 <timerRun+0x6c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	3b01      	subs	r3, #1
 8001986:	4a16      	ldr	r2, [pc, #88]	@ (80019e0 <timerRun+0x6c>)
 8001988:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0){
 800198a:	4b15      	ldr	r3, [pc, #84]	@ (80019e0 <timerRun+0x6c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2b00      	cmp	r3, #0
 8001990:	dc02      	bgt.n	8001998 <timerRun+0x24>
			timer1_flag = 1;
 8001992:	4b14      	ldr	r3, [pc, #80]	@ (80019e4 <timerRun+0x70>)
 8001994:	2201      	movs	r2, #1
 8001996:	601a      	str	r2, [r3, #0]
		}
	}

	if (timer2_counter > 0){
 8001998:	4b13      	ldr	r3, [pc, #76]	@ (80019e8 <timerRun+0x74>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	dd0b      	ble.n	80019b8 <timerRun+0x44>
		timer2_counter--;
 80019a0:	4b11      	ldr	r3, [pc, #68]	@ (80019e8 <timerRun+0x74>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	3b01      	subs	r3, #1
 80019a6:	4a10      	ldr	r2, [pc, #64]	@ (80019e8 <timerRun+0x74>)
 80019a8:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0){
 80019aa:	4b0f      	ldr	r3, [pc, #60]	@ (80019e8 <timerRun+0x74>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	dc02      	bgt.n	80019b8 <timerRun+0x44>
			timer2_flag = 1;
 80019b2:	4b0e      	ldr	r3, [pc, #56]	@ (80019ec <timerRun+0x78>)
 80019b4:	2201      	movs	r2, #1
 80019b6:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer3_counter > 0){
 80019b8:	4b0d      	ldr	r3, [pc, #52]	@ (80019f0 <timerRun+0x7c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	dd0b      	ble.n	80019d8 <timerRun+0x64>
		timer3_counter--;
 80019c0:	4b0b      	ldr	r3, [pc, #44]	@ (80019f0 <timerRun+0x7c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	3b01      	subs	r3, #1
 80019c6:	4a0a      	ldr	r2, [pc, #40]	@ (80019f0 <timerRun+0x7c>)
 80019c8:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0){
 80019ca:	4b09      	ldr	r3, [pc, #36]	@ (80019f0 <timerRun+0x7c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	dc02      	bgt.n	80019d8 <timerRun+0x64>
			timer3_flag = 1;
 80019d2:	4b08      	ldr	r3, [pc, #32]	@ (80019f4 <timerRun+0x80>)
 80019d4:	2201      	movs	r2, #1
 80019d6:	601a      	str	r2, [r3, #0]
		}
	}
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr
 80019e0:	20000440 	.word	0x20000440
 80019e4:	20000444 	.word	0x20000444
 80019e8:	20000448 	.word	0x20000448
 80019ec:	2000044c 	.word	0x2000044c
 80019f0:	20000450 	.word	0x20000450
 80019f4:	20000454 	.word	0x20000454

080019f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019fe:	4b15      	ldr	r3, [pc, #84]	@ (8001a54 <HAL_MspInit+0x5c>)
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	4a14      	ldr	r2, [pc, #80]	@ (8001a54 <HAL_MspInit+0x5c>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	6193      	str	r3, [r2, #24]
 8001a0a:	4b12      	ldr	r3, [pc, #72]	@ (8001a54 <HAL_MspInit+0x5c>)
 8001a0c:	699b      	ldr	r3, [r3, #24]
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	60bb      	str	r3, [r7, #8]
 8001a14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a16:	4b0f      	ldr	r3, [pc, #60]	@ (8001a54 <HAL_MspInit+0x5c>)
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	4a0e      	ldr	r2, [pc, #56]	@ (8001a54 <HAL_MspInit+0x5c>)
 8001a1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a20:	61d3      	str	r3, [r2, #28]
 8001a22:	4b0c      	ldr	r3, [pc, #48]	@ (8001a54 <HAL_MspInit+0x5c>)
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a2a:	607b      	str	r3, [r7, #4]
 8001a2c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a58 <HAL_MspInit+0x60>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	4a04      	ldr	r2, [pc, #16]	@ (8001a58 <HAL_MspInit+0x60>)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	3714      	adds	r7, #20
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bc80      	pop	{r7}
 8001a52:	4770      	bx	lr
 8001a54:	40021000 	.word	0x40021000
 8001a58:	40010000 	.word	0x40010000

08001a5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a6c:	d113      	bne.n	8001a96 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa0 <HAL_TIM_Base_MspInit+0x44>)
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	4a0b      	ldr	r2, [pc, #44]	@ (8001aa0 <HAL_TIM_Base_MspInit+0x44>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	61d3      	str	r3, [r2, #28]
 8001a7a:	4b09      	ldr	r3, [pc, #36]	@ (8001aa0 <HAL_TIM_Base_MspInit+0x44>)
 8001a7c:	69db      	ldr	r3, [r3, #28]
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a86:	2200      	movs	r2, #0
 8001a88:	2100      	movs	r1, #0
 8001a8a:	201c      	movs	r0, #28
 8001a8c:	f000 f9a5 	bl	8001dda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a90:	201c      	movs	r0, #28
 8001a92:	f000 f9be 	bl	8001e12 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001a96:	bf00      	nop
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40021000 	.word	0x40021000

08001aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001aa8:	bf00      	nop
 8001aaa:	e7fd      	b.n	8001aa8 <NMI_Handler+0x4>

08001aac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ab0:	bf00      	nop
 8001ab2:	e7fd      	b.n	8001ab0 <HardFault_Handler+0x4>

08001ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ab8:	bf00      	nop
 8001aba:	e7fd      	b.n	8001ab8 <MemManage_Handler+0x4>

08001abc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ac0:	bf00      	nop
 8001ac2:	e7fd      	b.n	8001ac0 <BusFault_Handler+0x4>

08001ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ac8:	bf00      	nop
 8001aca:	e7fd      	b.n	8001ac8 <UsageFault_Handler+0x4>

08001acc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr

08001ad8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr

08001ae4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr

08001af0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001af4:	f000 f87e 	bl	8001bf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001af8:	bf00      	nop
 8001afa:	bd80      	pop	{r7, pc}

08001afc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b00:	4802      	ldr	r0, [pc, #8]	@ (8001b0c <TIM2_IRQHandler+0x10>)
 8001b02:	f000 ffe3 	bl	8002acc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	200003f8 	.word	0x200003f8

08001b10 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr

08001b1c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b1c:	f7ff fff8 	bl	8001b10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b20:	480b      	ldr	r0, [pc, #44]	@ (8001b50 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b22:	490c      	ldr	r1, [pc, #48]	@ (8001b54 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b24:	4a0c      	ldr	r2, [pc, #48]	@ (8001b58 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b28:	e002      	b.n	8001b30 <LoopCopyDataInit>

08001b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b2e:	3304      	adds	r3, #4

08001b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b34:	d3f9      	bcc.n	8001b2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b36:	4a09      	ldr	r2, [pc, #36]	@ (8001b5c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b38:	4c09      	ldr	r4, [pc, #36]	@ (8001b60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b3c:	e001      	b.n	8001b42 <LoopFillZerobss>

08001b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b40:	3204      	adds	r2, #4

08001b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b44:	d3fb      	bcc.n	8001b3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b46:	f001 fb09 	bl	800315c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b4a:	f7ff fbcd 	bl	80012e8 <main>
  bx lr
 8001b4e:	4770      	bx	lr
  ldr r0, =_sdata
 8001b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b54:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001b58:	080031e8 	.word	0x080031e8
  ldr r2, =_sbss
 8001b5c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001b60:	2000045c 	.word	0x2000045c

08001b64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b64:	e7fe      	b.n	8001b64 <ADC1_2_IRQHandler>
	...

08001b68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b6c:	4b08      	ldr	r3, [pc, #32]	@ (8001b90 <HAL_Init+0x28>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a07      	ldr	r2, [pc, #28]	@ (8001b90 <HAL_Init+0x28>)
 8001b72:	f043 0310 	orr.w	r3, r3, #16
 8001b76:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b78:	2003      	movs	r0, #3
 8001b7a:	f000 f923 	bl	8001dc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b7e:	200f      	movs	r0, #15
 8001b80:	f000 f808 	bl	8001b94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b84:	f7ff ff38 	bl	80019f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40022000 	.word	0x40022000

08001b94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b9c:	4b12      	ldr	r3, [pc, #72]	@ (8001be8 <HAL_InitTick+0x54>)
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	4b12      	ldr	r3, [pc, #72]	@ (8001bec <HAL_InitTick+0x58>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001baa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f000 f93b 	bl	8001e2e <HAL_SYSTICK_Config>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e00e      	b.n	8001be0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b0f      	cmp	r3, #15
 8001bc6:	d80a      	bhi.n	8001bde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bc8:	2200      	movs	r2, #0
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd0:	f000 f903 	bl	8001dda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bd4:	4a06      	ldr	r2, [pc, #24]	@ (8001bf0 <HAL_InitTick+0x5c>)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	e000      	b.n	8001be0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	2000006c 	.word	0x2000006c
 8001bec:	20000074 	.word	0x20000074
 8001bf0:	20000070 	.word	0x20000070

08001bf4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bf8:	4b05      	ldr	r3, [pc, #20]	@ (8001c10 <HAL_IncTick+0x1c>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4b05      	ldr	r3, [pc, #20]	@ (8001c14 <HAL_IncTick+0x20>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4413      	add	r3, r2
 8001c04:	4a03      	ldr	r2, [pc, #12]	@ (8001c14 <HAL_IncTick+0x20>)
 8001c06:	6013      	str	r3, [r2, #0]
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr
 8001c10:	20000074 	.word	0x20000074
 8001c14:	20000458 	.word	0x20000458

08001c18 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c1c:	4b02      	ldr	r3, [pc, #8]	@ (8001c28 <HAL_GetTick+0x10>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr
 8001c28:	20000458 	.word	0x20000458

08001c2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c70 <__NVIC_SetPriorityGrouping+0x44>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c42:	68ba      	ldr	r2, [r7, #8]
 8001c44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c48:	4013      	ands	r3, r2
 8001c4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c5e:	4a04      	ldr	r2, [pc, #16]	@ (8001c70 <__NVIC_SetPriorityGrouping+0x44>)
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	60d3      	str	r3, [r2, #12]
}
 8001c64:	bf00      	nop
 8001c66:	3714      	adds	r7, #20
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc80      	pop	{r7}
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c78:	4b04      	ldr	r3, [pc, #16]	@ (8001c8c <__NVIC_GetPriorityGrouping+0x18>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	0a1b      	lsrs	r3, r3, #8
 8001c7e:	f003 0307 	and.w	r3, r3, #7
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bc80      	pop	{r7}
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	db0b      	blt.n	8001cba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ca2:	79fb      	ldrb	r3, [r7, #7]
 8001ca4:	f003 021f 	and.w	r2, r3, #31
 8001ca8:	4906      	ldr	r1, [pc, #24]	@ (8001cc4 <__NVIC_EnableIRQ+0x34>)
 8001caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cae:	095b      	lsrs	r3, r3, #5
 8001cb0:	2001      	movs	r0, #1
 8001cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr
 8001cc4:	e000e100 	.word	0xe000e100

08001cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	6039      	str	r1, [r7, #0]
 8001cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	db0a      	blt.n	8001cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	b2da      	uxtb	r2, r3
 8001ce0:	490c      	ldr	r1, [pc, #48]	@ (8001d14 <__NVIC_SetPriority+0x4c>)
 8001ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce6:	0112      	lsls	r2, r2, #4
 8001ce8:	b2d2      	uxtb	r2, r2
 8001cea:	440b      	add	r3, r1
 8001cec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cf0:	e00a      	b.n	8001d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	4908      	ldr	r1, [pc, #32]	@ (8001d18 <__NVIC_SetPriority+0x50>)
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	f003 030f 	and.w	r3, r3, #15
 8001cfe:	3b04      	subs	r3, #4
 8001d00:	0112      	lsls	r2, r2, #4
 8001d02:	b2d2      	uxtb	r2, r2
 8001d04:	440b      	add	r3, r1
 8001d06:	761a      	strb	r2, [r3, #24]
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bc80      	pop	{r7}
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	e000e100 	.word	0xe000e100
 8001d18:	e000ed00 	.word	0xe000ed00

08001d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b089      	sub	sp, #36	@ 0x24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	f1c3 0307 	rsb	r3, r3, #7
 8001d36:	2b04      	cmp	r3, #4
 8001d38:	bf28      	it	cs
 8001d3a:	2304      	movcs	r3, #4
 8001d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	3304      	adds	r3, #4
 8001d42:	2b06      	cmp	r3, #6
 8001d44:	d902      	bls.n	8001d4c <NVIC_EncodePriority+0x30>
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	3b03      	subs	r3, #3
 8001d4a:	e000      	b.n	8001d4e <NVIC_EncodePriority+0x32>
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d50:	f04f 32ff 	mov.w	r2, #4294967295
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	43da      	mvns	r2, r3
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	401a      	ands	r2, r3
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d64:	f04f 31ff 	mov.w	r1, #4294967295
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6e:	43d9      	mvns	r1, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d74:	4313      	orrs	r3, r2
         );
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3724      	adds	r7, #36	@ 0x24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr

08001d80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d90:	d301      	bcc.n	8001d96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d92:	2301      	movs	r3, #1
 8001d94:	e00f      	b.n	8001db6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d96:	4a0a      	ldr	r2, [pc, #40]	@ (8001dc0 <SysTick_Config+0x40>)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d9e:	210f      	movs	r1, #15
 8001da0:	f04f 30ff 	mov.w	r0, #4294967295
 8001da4:	f7ff ff90 	bl	8001cc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001da8:	4b05      	ldr	r3, [pc, #20]	@ (8001dc0 <SysTick_Config+0x40>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dae:	4b04      	ldr	r3, [pc, #16]	@ (8001dc0 <SysTick_Config+0x40>)
 8001db0:	2207      	movs	r2, #7
 8001db2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	e000e010 	.word	0xe000e010

08001dc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f7ff ff2d 	bl	8001c2c <__NVIC_SetPriorityGrouping>
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b086      	sub	sp, #24
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	4603      	mov	r3, r0
 8001de2:	60b9      	str	r1, [r7, #8]
 8001de4:	607a      	str	r2, [r7, #4]
 8001de6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dec:	f7ff ff42 	bl	8001c74 <__NVIC_GetPriorityGrouping>
 8001df0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	68b9      	ldr	r1, [r7, #8]
 8001df6:	6978      	ldr	r0, [r7, #20]
 8001df8:	f7ff ff90 	bl	8001d1c <NVIC_EncodePriority>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e02:	4611      	mov	r1, r2
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff ff5f 	bl	8001cc8 <__NVIC_SetPriority>
}
 8001e0a:	bf00      	nop
 8001e0c:	3718      	adds	r7, #24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b082      	sub	sp, #8
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	4603      	mov	r3, r0
 8001e1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff ff35 	bl	8001c90 <__NVIC_EnableIRQ>
}
 8001e26:	bf00      	nop
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b082      	sub	sp, #8
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f7ff ffa2 	bl	8001d80 <SysTick_Config>
 8001e3c:	4603      	mov	r3, r0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
	...

08001e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b08b      	sub	sp, #44	@ 0x2c
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e52:	2300      	movs	r3, #0
 8001e54:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e56:	2300      	movs	r3, #0
 8001e58:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e5a:	e161      	b.n	8002120 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	69fa      	ldr	r2, [r7, #28]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	f040 8150 	bne.w	800211a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	4a97      	ldr	r2, [pc, #604]	@ (80020dc <HAL_GPIO_Init+0x294>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d05e      	beq.n	8001f42 <HAL_GPIO_Init+0xfa>
 8001e84:	4a95      	ldr	r2, [pc, #596]	@ (80020dc <HAL_GPIO_Init+0x294>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d875      	bhi.n	8001f76 <HAL_GPIO_Init+0x12e>
 8001e8a:	4a95      	ldr	r2, [pc, #596]	@ (80020e0 <HAL_GPIO_Init+0x298>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d058      	beq.n	8001f42 <HAL_GPIO_Init+0xfa>
 8001e90:	4a93      	ldr	r2, [pc, #588]	@ (80020e0 <HAL_GPIO_Init+0x298>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d86f      	bhi.n	8001f76 <HAL_GPIO_Init+0x12e>
 8001e96:	4a93      	ldr	r2, [pc, #588]	@ (80020e4 <HAL_GPIO_Init+0x29c>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d052      	beq.n	8001f42 <HAL_GPIO_Init+0xfa>
 8001e9c:	4a91      	ldr	r2, [pc, #580]	@ (80020e4 <HAL_GPIO_Init+0x29c>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d869      	bhi.n	8001f76 <HAL_GPIO_Init+0x12e>
 8001ea2:	4a91      	ldr	r2, [pc, #580]	@ (80020e8 <HAL_GPIO_Init+0x2a0>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d04c      	beq.n	8001f42 <HAL_GPIO_Init+0xfa>
 8001ea8:	4a8f      	ldr	r2, [pc, #572]	@ (80020e8 <HAL_GPIO_Init+0x2a0>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d863      	bhi.n	8001f76 <HAL_GPIO_Init+0x12e>
 8001eae:	4a8f      	ldr	r2, [pc, #572]	@ (80020ec <HAL_GPIO_Init+0x2a4>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d046      	beq.n	8001f42 <HAL_GPIO_Init+0xfa>
 8001eb4:	4a8d      	ldr	r2, [pc, #564]	@ (80020ec <HAL_GPIO_Init+0x2a4>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d85d      	bhi.n	8001f76 <HAL_GPIO_Init+0x12e>
 8001eba:	2b12      	cmp	r3, #18
 8001ebc:	d82a      	bhi.n	8001f14 <HAL_GPIO_Init+0xcc>
 8001ebe:	2b12      	cmp	r3, #18
 8001ec0:	d859      	bhi.n	8001f76 <HAL_GPIO_Init+0x12e>
 8001ec2:	a201      	add	r2, pc, #4	@ (adr r2, 8001ec8 <HAL_GPIO_Init+0x80>)
 8001ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec8:	08001f43 	.word	0x08001f43
 8001ecc:	08001f1d 	.word	0x08001f1d
 8001ed0:	08001f2f 	.word	0x08001f2f
 8001ed4:	08001f71 	.word	0x08001f71
 8001ed8:	08001f77 	.word	0x08001f77
 8001edc:	08001f77 	.word	0x08001f77
 8001ee0:	08001f77 	.word	0x08001f77
 8001ee4:	08001f77 	.word	0x08001f77
 8001ee8:	08001f77 	.word	0x08001f77
 8001eec:	08001f77 	.word	0x08001f77
 8001ef0:	08001f77 	.word	0x08001f77
 8001ef4:	08001f77 	.word	0x08001f77
 8001ef8:	08001f77 	.word	0x08001f77
 8001efc:	08001f77 	.word	0x08001f77
 8001f00:	08001f77 	.word	0x08001f77
 8001f04:	08001f77 	.word	0x08001f77
 8001f08:	08001f77 	.word	0x08001f77
 8001f0c:	08001f25 	.word	0x08001f25
 8001f10:	08001f39 	.word	0x08001f39
 8001f14:	4a76      	ldr	r2, [pc, #472]	@ (80020f0 <HAL_GPIO_Init+0x2a8>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d013      	beq.n	8001f42 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f1a:	e02c      	b.n	8001f76 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	623b      	str	r3, [r7, #32]
          break;
 8001f22:	e029      	b.n	8001f78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	3304      	adds	r3, #4
 8001f2a:	623b      	str	r3, [r7, #32]
          break;
 8001f2c:	e024      	b.n	8001f78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	3308      	adds	r3, #8
 8001f34:	623b      	str	r3, [r7, #32]
          break;
 8001f36:	e01f      	b.n	8001f78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	330c      	adds	r3, #12
 8001f3e:	623b      	str	r3, [r7, #32]
          break;
 8001f40:	e01a      	b.n	8001f78 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d102      	bne.n	8001f50 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f4a:	2304      	movs	r3, #4
 8001f4c:	623b      	str	r3, [r7, #32]
          break;
 8001f4e:	e013      	b.n	8001f78 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d105      	bne.n	8001f64 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f58:	2308      	movs	r3, #8
 8001f5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	69fa      	ldr	r2, [r7, #28]
 8001f60:	611a      	str	r2, [r3, #16]
          break;
 8001f62:	e009      	b.n	8001f78 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f64:	2308      	movs	r3, #8
 8001f66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69fa      	ldr	r2, [r7, #28]
 8001f6c:	615a      	str	r2, [r3, #20]
          break;
 8001f6e:	e003      	b.n	8001f78 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f70:	2300      	movs	r3, #0
 8001f72:	623b      	str	r3, [r7, #32]
          break;
 8001f74:	e000      	b.n	8001f78 <HAL_GPIO_Init+0x130>
          break;
 8001f76:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	2bff      	cmp	r3, #255	@ 0xff
 8001f7c:	d801      	bhi.n	8001f82 <HAL_GPIO_Init+0x13a>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	e001      	b.n	8001f86 <HAL_GPIO_Init+0x13e>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	3304      	adds	r3, #4
 8001f86:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	2bff      	cmp	r3, #255	@ 0xff
 8001f8c:	d802      	bhi.n	8001f94 <HAL_GPIO_Init+0x14c>
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	e002      	b.n	8001f9a <HAL_GPIO_Init+0x152>
 8001f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f96:	3b08      	subs	r3, #8
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	210f      	movs	r1, #15
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	401a      	ands	r2, r3
 8001fac:	6a39      	ldr	r1, [r7, #32]
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb4:	431a      	orrs	r2, r3
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f000 80a9 	beq.w	800211a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fc8:	4b4a      	ldr	r3, [pc, #296]	@ (80020f4 <HAL_GPIO_Init+0x2ac>)
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	4a49      	ldr	r2, [pc, #292]	@ (80020f4 <HAL_GPIO_Init+0x2ac>)
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	6193      	str	r3, [r2, #24]
 8001fd4:	4b47      	ldr	r3, [pc, #284]	@ (80020f4 <HAL_GPIO_Init+0x2ac>)
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	60bb      	str	r3, [r7, #8]
 8001fde:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fe0:	4a45      	ldr	r2, [pc, #276]	@ (80020f8 <HAL_GPIO_Init+0x2b0>)
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe4:	089b      	lsrs	r3, r3, #2
 8001fe6:	3302      	adds	r3, #2
 8001fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff0:	f003 0303 	and.w	r3, r3, #3
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	220f      	movs	r2, #15
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	4013      	ands	r3, r2
 8002002:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a3d      	ldr	r2, [pc, #244]	@ (80020fc <HAL_GPIO_Init+0x2b4>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d00d      	beq.n	8002028 <HAL_GPIO_Init+0x1e0>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a3c      	ldr	r2, [pc, #240]	@ (8002100 <HAL_GPIO_Init+0x2b8>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d007      	beq.n	8002024 <HAL_GPIO_Init+0x1dc>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a3b      	ldr	r2, [pc, #236]	@ (8002104 <HAL_GPIO_Init+0x2bc>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d101      	bne.n	8002020 <HAL_GPIO_Init+0x1d8>
 800201c:	2302      	movs	r3, #2
 800201e:	e004      	b.n	800202a <HAL_GPIO_Init+0x1e2>
 8002020:	2303      	movs	r3, #3
 8002022:	e002      	b.n	800202a <HAL_GPIO_Init+0x1e2>
 8002024:	2301      	movs	r3, #1
 8002026:	e000      	b.n	800202a <HAL_GPIO_Init+0x1e2>
 8002028:	2300      	movs	r3, #0
 800202a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800202c:	f002 0203 	and.w	r2, r2, #3
 8002030:	0092      	lsls	r2, r2, #2
 8002032:	4093      	lsls	r3, r2
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	4313      	orrs	r3, r2
 8002038:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800203a:	492f      	ldr	r1, [pc, #188]	@ (80020f8 <HAL_GPIO_Init+0x2b0>)
 800203c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800203e:	089b      	lsrs	r3, r3, #2
 8002040:	3302      	adds	r3, #2
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d006      	beq.n	8002062 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002054:	4b2c      	ldr	r3, [pc, #176]	@ (8002108 <HAL_GPIO_Init+0x2c0>)
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	492b      	ldr	r1, [pc, #172]	@ (8002108 <HAL_GPIO_Init+0x2c0>)
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	608b      	str	r3, [r1, #8]
 8002060:	e006      	b.n	8002070 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002062:	4b29      	ldr	r3, [pc, #164]	@ (8002108 <HAL_GPIO_Init+0x2c0>)
 8002064:	689a      	ldr	r2, [r3, #8]
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	43db      	mvns	r3, r3
 800206a:	4927      	ldr	r1, [pc, #156]	@ (8002108 <HAL_GPIO_Init+0x2c0>)
 800206c:	4013      	ands	r3, r2
 800206e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d006      	beq.n	800208a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800207c:	4b22      	ldr	r3, [pc, #136]	@ (8002108 <HAL_GPIO_Init+0x2c0>)
 800207e:	68da      	ldr	r2, [r3, #12]
 8002080:	4921      	ldr	r1, [pc, #132]	@ (8002108 <HAL_GPIO_Init+0x2c0>)
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	4313      	orrs	r3, r2
 8002086:	60cb      	str	r3, [r1, #12]
 8002088:	e006      	b.n	8002098 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800208a:	4b1f      	ldr	r3, [pc, #124]	@ (8002108 <HAL_GPIO_Init+0x2c0>)
 800208c:	68da      	ldr	r2, [r3, #12]
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	43db      	mvns	r3, r3
 8002092:	491d      	ldr	r1, [pc, #116]	@ (8002108 <HAL_GPIO_Init+0x2c0>)
 8002094:	4013      	ands	r3, r2
 8002096:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d006      	beq.n	80020b2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020a4:	4b18      	ldr	r3, [pc, #96]	@ (8002108 <HAL_GPIO_Init+0x2c0>)
 80020a6:	685a      	ldr	r2, [r3, #4]
 80020a8:	4917      	ldr	r1, [pc, #92]	@ (8002108 <HAL_GPIO_Init+0x2c0>)
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	604b      	str	r3, [r1, #4]
 80020b0:	e006      	b.n	80020c0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020b2:	4b15      	ldr	r3, [pc, #84]	@ (8002108 <HAL_GPIO_Init+0x2c0>)
 80020b4:	685a      	ldr	r2, [r3, #4]
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	43db      	mvns	r3, r3
 80020ba:	4913      	ldr	r1, [pc, #76]	@ (8002108 <HAL_GPIO_Init+0x2c0>)
 80020bc:	4013      	ands	r3, r2
 80020be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d01f      	beq.n	800210c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002108 <HAL_GPIO_Init+0x2c0>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	490d      	ldr	r1, [pc, #52]	@ (8002108 <HAL_GPIO_Init+0x2c0>)
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	600b      	str	r3, [r1, #0]
 80020d8:	e01f      	b.n	800211a <HAL_GPIO_Init+0x2d2>
 80020da:	bf00      	nop
 80020dc:	10320000 	.word	0x10320000
 80020e0:	10310000 	.word	0x10310000
 80020e4:	10220000 	.word	0x10220000
 80020e8:	10210000 	.word	0x10210000
 80020ec:	10120000 	.word	0x10120000
 80020f0:	10110000 	.word	0x10110000
 80020f4:	40021000 	.word	0x40021000
 80020f8:	40010000 	.word	0x40010000
 80020fc:	40010800 	.word	0x40010800
 8002100:	40010c00 	.word	0x40010c00
 8002104:	40011000 	.word	0x40011000
 8002108:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800210c:	4b0b      	ldr	r3, [pc, #44]	@ (800213c <HAL_GPIO_Init+0x2f4>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	43db      	mvns	r3, r3
 8002114:	4909      	ldr	r1, [pc, #36]	@ (800213c <HAL_GPIO_Init+0x2f4>)
 8002116:	4013      	ands	r3, r2
 8002118:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800211a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211c:	3301      	adds	r3, #1
 800211e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002126:	fa22 f303 	lsr.w	r3, r2, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	f47f ae96 	bne.w	8001e5c <HAL_GPIO_Init+0x14>
  }
}
 8002130:	bf00      	nop
 8002132:	bf00      	nop
 8002134:	372c      	adds	r7, #44	@ 0x2c
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr
 800213c:	40010400 	.word	0x40010400

08002140 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	460b      	mov	r3, r1
 800214a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	887b      	ldrh	r3, [r7, #2]
 8002152:	4013      	ands	r3, r2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d002      	beq.n	800215e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002158:	2301      	movs	r3, #1
 800215a:	73fb      	strb	r3, [r7, #15]
 800215c:	e001      	b.n	8002162 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800215e:	2300      	movs	r3, #0
 8002160:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002162:	7bfb      	ldrb	r3, [r7, #15]
}
 8002164:	4618      	mov	r0, r3
 8002166:	3714      	adds	r7, #20
 8002168:	46bd      	mov	sp, r7
 800216a:	bc80      	pop	{r7}
 800216c:	4770      	bx	lr

0800216e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800216e:	b480      	push	{r7}
 8002170:	b083      	sub	sp, #12
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
 8002176:	460b      	mov	r3, r1
 8002178:	807b      	strh	r3, [r7, #2]
 800217a:	4613      	mov	r3, r2
 800217c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800217e:	787b      	ldrb	r3, [r7, #1]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d003      	beq.n	800218c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002184:	887a      	ldrh	r2, [r7, #2]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800218a:	e003      	b.n	8002194 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800218c:	887b      	ldrh	r3, [r7, #2]
 800218e:	041a      	lsls	r2, r3, #16
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	611a      	str	r2, [r3, #16]
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	bc80      	pop	{r7}
 800219c:	4770      	bx	lr
	...

080021a0 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	460b      	mov	r3, r1
 80021aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80021ac:	4b09      	ldr	r3, [pc, #36]	@ (80021d4 <HAL_PWR_EnterSLEEPMode+0x34>)
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	4a08      	ldr	r2, [pc, #32]	@ (80021d4 <HAL_PWR_EnterSLEEPMode+0x34>)
 80021b2:	f023 0304 	bic.w	r3, r3, #4
 80021b6:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80021b8:	78fb      	ldrb	r3, [r7, #3]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d101      	bne.n	80021c2 <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80021be:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 80021c0:	e002      	b.n	80021c8 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 80021c2:	bf40      	sev
    __WFE();
 80021c4:	bf20      	wfe
    __WFE();
 80021c6:	bf20      	wfe
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bc80      	pop	{r7}
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	e000ed00 	.word	0xe000ed00

080021d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e272      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f000 8087 	beq.w	8002306 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021f8:	4b92      	ldr	r3, [pc, #584]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f003 030c 	and.w	r3, r3, #12
 8002200:	2b04      	cmp	r3, #4
 8002202:	d00c      	beq.n	800221e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002204:	4b8f      	ldr	r3, [pc, #572]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 030c 	and.w	r3, r3, #12
 800220c:	2b08      	cmp	r3, #8
 800220e:	d112      	bne.n	8002236 <HAL_RCC_OscConfig+0x5e>
 8002210:	4b8c      	ldr	r3, [pc, #560]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002218:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800221c:	d10b      	bne.n	8002236 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800221e:	4b89      	ldr	r3, [pc, #548]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d06c      	beq.n	8002304 <HAL_RCC_OscConfig+0x12c>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d168      	bne.n	8002304 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e24c      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800223e:	d106      	bne.n	800224e <HAL_RCC_OscConfig+0x76>
 8002240:	4b80      	ldr	r3, [pc, #512]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a7f      	ldr	r2, [pc, #508]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002246:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800224a:	6013      	str	r3, [r2, #0]
 800224c:	e02e      	b.n	80022ac <HAL_RCC_OscConfig+0xd4>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d10c      	bne.n	8002270 <HAL_RCC_OscConfig+0x98>
 8002256:	4b7b      	ldr	r3, [pc, #492]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a7a      	ldr	r2, [pc, #488]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 800225c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002260:	6013      	str	r3, [r2, #0]
 8002262:	4b78      	ldr	r3, [pc, #480]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a77      	ldr	r2, [pc, #476]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002268:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800226c:	6013      	str	r3, [r2, #0]
 800226e:	e01d      	b.n	80022ac <HAL_RCC_OscConfig+0xd4>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002278:	d10c      	bne.n	8002294 <HAL_RCC_OscConfig+0xbc>
 800227a:	4b72      	ldr	r3, [pc, #456]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a71      	ldr	r2, [pc, #452]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002280:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002284:	6013      	str	r3, [r2, #0]
 8002286:	4b6f      	ldr	r3, [pc, #444]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a6e      	ldr	r2, [pc, #440]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 800228c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002290:	6013      	str	r3, [r2, #0]
 8002292:	e00b      	b.n	80022ac <HAL_RCC_OscConfig+0xd4>
 8002294:	4b6b      	ldr	r3, [pc, #428]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a6a      	ldr	r2, [pc, #424]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 800229a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800229e:	6013      	str	r3, [r2, #0]
 80022a0:	4b68      	ldr	r3, [pc, #416]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a67      	ldr	r2, [pc, #412]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 80022a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d013      	beq.n	80022dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b4:	f7ff fcb0 	bl	8001c18 <HAL_GetTick>
 80022b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ba:	e008      	b.n	80022ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022bc:	f7ff fcac 	bl	8001c18 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b64      	cmp	r3, #100	@ 0x64
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e200      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ce:	4b5d      	ldr	r3, [pc, #372]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d0f0      	beq.n	80022bc <HAL_RCC_OscConfig+0xe4>
 80022da:	e014      	b.n	8002306 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022dc:	f7ff fc9c 	bl	8001c18 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022e4:	f7ff fc98 	bl	8001c18 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b64      	cmp	r3, #100	@ 0x64
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e1ec      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022f6:	4b53      	ldr	r3, [pc, #332]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1f0      	bne.n	80022e4 <HAL_RCC_OscConfig+0x10c>
 8002302:	e000      	b.n	8002306 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002304:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d063      	beq.n	80023da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002312:	4b4c      	ldr	r3, [pc, #304]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f003 030c 	and.w	r3, r3, #12
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00b      	beq.n	8002336 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800231e:	4b49      	ldr	r3, [pc, #292]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f003 030c 	and.w	r3, r3, #12
 8002326:	2b08      	cmp	r3, #8
 8002328:	d11c      	bne.n	8002364 <HAL_RCC_OscConfig+0x18c>
 800232a:	4b46      	ldr	r3, [pc, #280]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d116      	bne.n	8002364 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002336:	4b43      	ldr	r3, [pc, #268]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d005      	beq.n	800234e <HAL_RCC_OscConfig+0x176>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d001      	beq.n	800234e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e1c0      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800234e:	4b3d      	ldr	r3, [pc, #244]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	4939      	ldr	r1, [pc, #228]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 800235e:	4313      	orrs	r3, r2
 8002360:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002362:	e03a      	b.n	80023da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d020      	beq.n	80023ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800236c:	4b36      	ldr	r3, [pc, #216]	@ (8002448 <HAL_RCC_OscConfig+0x270>)
 800236e:	2201      	movs	r2, #1
 8002370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002372:	f7ff fc51 	bl	8001c18 <HAL_GetTick>
 8002376:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002378:	e008      	b.n	800238c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800237a:	f7ff fc4d 	bl	8001c18 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e1a1      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800238c:	4b2d      	ldr	r3, [pc, #180]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0f0      	beq.n	800237a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002398:	4b2a      	ldr	r3, [pc, #168]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	695b      	ldr	r3, [r3, #20]
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	4927      	ldr	r1, [pc, #156]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	600b      	str	r3, [r1, #0]
 80023ac:	e015      	b.n	80023da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ae:	4b26      	ldr	r3, [pc, #152]	@ (8002448 <HAL_RCC_OscConfig+0x270>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b4:	f7ff fc30 	bl	8001c18 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023bc:	f7ff fc2c 	bl	8001c18 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e180      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1f0      	bne.n	80023bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0308 	and.w	r3, r3, #8
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d03a      	beq.n	800245c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d019      	beq.n	8002422 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ee:	4b17      	ldr	r3, [pc, #92]	@ (800244c <HAL_RCC_OscConfig+0x274>)
 80023f0:	2201      	movs	r2, #1
 80023f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f4:	f7ff fc10 	bl	8001c18 <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023fc:	f7ff fc0c 	bl	8001c18 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e160      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800240e:	4b0d      	ldr	r3, [pc, #52]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d0f0      	beq.n	80023fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800241a:	2001      	movs	r0, #1
 800241c:	f000 fa9c 	bl	8002958 <RCC_Delay>
 8002420:	e01c      	b.n	800245c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002422:	4b0a      	ldr	r3, [pc, #40]	@ (800244c <HAL_RCC_OscConfig+0x274>)
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002428:	f7ff fbf6 	bl	8001c18 <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800242e:	e00f      	b.n	8002450 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002430:	f7ff fbf2 	bl	8001c18 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d908      	bls.n	8002450 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e146      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
 8002442:	bf00      	nop
 8002444:	40021000 	.word	0x40021000
 8002448:	42420000 	.word	0x42420000
 800244c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002450:	4b92      	ldr	r3, [pc, #584]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1e9      	bne.n	8002430 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 80a6 	beq.w	80025b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800246a:	2300      	movs	r3, #0
 800246c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800246e:	4b8b      	ldr	r3, [pc, #556]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d10d      	bne.n	8002496 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800247a:	4b88      	ldr	r3, [pc, #544]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	4a87      	ldr	r2, [pc, #540]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002480:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002484:	61d3      	str	r3, [r2, #28]
 8002486:	4b85      	ldr	r3, [pc, #532]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800248e:	60bb      	str	r3, [r7, #8]
 8002490:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002492:	2301      	movs	r3, #1
 8002494:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002496:	4b82      	ldr	r3, [pc, #520]	@ (80026a0 <HAL_RCC_OscConfig+0x4c8>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d118      	bne.n	80024d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024a2:	4b7f      	ldr	r3, [pc, #508]	@ (80026a0 <HAL_RCC_OscConfig+0x4c8>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a7e      	ldr	r2, [pc, #504]	@ (80026a0 <HAL_RCC_OscConfig+0x4c8>)
 80024a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ae:	f7ff fbb3 	bl	8001c18 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024b6:	f7ff fbaf 	bl	8001c18 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b64      	cmp	r3, #100	@ 0x64
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e103      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c8:	4b75      	ldr	r3, [pc, #468]	@ (80026a0 <HAL_RCC_OscConfig+0x4c8>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0f0      	beq.n	80024b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d106      	bne.n	80024ea <HAL_RCC_OscConfig+0x312>
 80024dc:	4b6f      	ldr	r3, [pc, #444]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	4a6e      	ldr	r2, [pc, #440]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 80024e2:	f043 0301 	orr.w	r3, r3, #1
 80024e6:	6213      	str	r3, [r2, #32]
 80024e8:	e02d      	b.n	8002546 <HAL_RCC_OscConfig+0x36e>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10c      	bne.n	800250c <HAL_RCC_OscConfig+0x334>
 80024f2:	4b6a      	ldr	r3, [pc, #424]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	4a69      	ldr	r2, [pc, #420]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 80024f8:	f023 0301 	bic.w	r3, r3, #1
 80024fc:	6213      	str	r3, [r2, #32]
 80024fe:	4b67      	ldr	r3, [pc, #412]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	4a66      	ldr	r2, [pc, #408]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002504:	f023 0304 	bic.w	r3, r3, #4
 8002508:	6213      	str	r3, [r2, #32]
 800250a:	e01c      	b.n	8002546 <HAL_RCC_OscConfig+0x36e>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	2b05      	cmp	r3, #5
 8002512:	d10c      	bne.n	800252e <HAL_RCC_OscConfig+0x356>
 8002514:	4b61      	ldr	r3, [pc, #388]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	4a60      	ldr	r2, [pc, #384]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 800251a:	f043 0304 	orr.w	r3, r3, #4
 800251e:	6213      	str	r3, [r2, #32]
 8002520:	4b5e      	ldr	r3, [pc, #376]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	4a5d      	ldr	r2, [pc, #372]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002526:	f043 0301 	orr.w	r3, r3, #1
 800252a:	6213      	str	r3, [r2, #32]
 800252c:	e00b      	b.n	8002546 <HAL_RCC_OscConfig+0x36e>
 800252e:	4b5b      	ldr	r3, [pc, #364]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002530:	6a1b      	ldr	r3, [r3, #32]
 8002532:	4a5a      	ldr	r2, [pc, #360]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002534:	f023 0301 	bic.w	r3, r3, #1
 8002538:	6213      	str	r3, [r2, #32]
 800253a:	4b58      	ldr	r3, [pc, #352]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 800253c:	6a1b      	ldr	r3, [r3, #32]
 800253e:	4a57      	ldr	r2, [pc, #348]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002540:	f023 0304 	bic.w	r3, r3, #4
 8002544:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d015      	beq.n	800257a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800254e:	f7ff fb63 	bl	8001c18 <HAL_GetTick>
 8002552:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002554:	e00a      	b.n	800256c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002556:	f7ff fb5f 	bl	8001c18 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002564:	4293      	cmp	r3, r2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e0b1      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800256c:	4b4b      	ldr	r3, [pc, #300]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0ee      	beq.n	8002556 <HAL_RCC_OscConfig+0x37e>
 8002578:	e014      	b.n	80025a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800257a:	f7ff fb4d 	bl	8001c18 <HAL_GetTick>
 800257e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002580:	e00a      	b.n	8002598 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002582:	f7ff fb49 	bl	8001c18 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002590:	4293      	cmp	r3, r2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e09b      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002598:	4b40      	ldr	r3, [pc, #256]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1ee      	bne.n	8002582 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025a4:	7dfb      	ldrb	r3, [r7, #23]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d105      	bne.n	80025b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025aa:	4b3c      	ldr	r3, [pc, #240]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	4a3b      	ldr	r2, [pc, #236]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 80025b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f000 8087 	beq.w	80026ce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025c0:	4b36      	ldr	r3, [pc, #216]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f003 030c 	and.w	r3, r3, #12
 80025c8:	2b08      	cmp	r3, #8
 80025ca:	d061      	beq.n	8002690 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	69db      	ldr	r3, [r3, #28]
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d146      	bne.n	8002662 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d4:	4b33      	ldr	r3, [pc, #204]	@ (80026a4 <HAL_RCC_OscConfig+0x4cc>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025da:	f7ff fb1d 	bl	8001c18 <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025e0:	e008      	b.n	80025f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e2:	f7ff fb19 	bl	8001c18 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e06d      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025f4:	4b29      	ldr	r3, [pc, #164]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1f0      	bne.n	80025e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002608:	d108      	bne.n	800261c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800260a:	4b24      	ldr	r3, [pc, #144]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	4921      	ldr	r1, [pc, #132]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002618:	4313      	orrs	r3, r2
 800261a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800261c:	4b1f      	ldr	r3, [pc, #124]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a19      	ldr	r1, [r3, #32]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800262c:	430b      	orrs	r3, r1
 800262e:	491b      	ldr	r1, [pc, #108]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002630:	4313      	orrs	r3, r2
 8002632:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002634:	4b1b      	ldr	r3, [pc, #108]	@ (80026a4 <HAL_RCC_OscConfig+0x4cc>)
 8002636:	2201      	movs	r2, #1
 8002638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263a:	f7ff faed 	bl	8001c18 <HAL_GetTick>
 800263e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002640:	e008      	b.n	8002654 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002642:	f7ff fae9 	bl	8001c18 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e03d      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002654:	4b11      	ldr	r3, [pc, #68]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d0f0      	beq.n	8002642 <HAL_RCC_OscConfig+0x46a>
 8002660:	e035      	b.n	80026ce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002662:	4b10      	ldr	r3, [pc, #64]	@ (80026a4 <HAL_RCC_OscConfig+0x4cc>)
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002668:	f7ff fad6 	bl	8001c18 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002670:	f7ff fad2 	bl	8001c18 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e026      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002682:	4b06      	ldr	r3, [pc, #24]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f0      	bne.n	8002670 <HAL_RCC_OscConfig+0x498>
 800268e:	e01e      	b.n	80026ce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	69db      	ldr	r3, [r3, #28]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d107      	bne.n	80026a8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e019      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
 800269c:	40021000 	.word	0x40021000
 80026a0:	40007000 	.word	0x40007000
 80026a4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026a8:	4b0b      	ldr	r3, [pc, #44]	@ (80026d8 <HAL_RCC_OscConfig+0x500>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d106      	bne.n	80026ca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d001      	beq.n	80026ce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e000      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3718      	adds	r7, #24
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40021000 	.word	0x40021000

080026dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e0d0      	b.n	8002892 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026f0:	4b6a      	ldr	r3, [pc, #424]	@ (800289c <HAL_RCC_ClockConfig+0x1c0>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0307 	and.w	r3, r3, #7
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d910      	bls.n	8002720 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fe:	4b67      	ldr	r3, [pc, #412]	@ (800289c <HAL_RCC_ClockConfig+0x1c0>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f023 0207 	bic.w	r2, r3, #7
 8002706:	4965      	ldr	r1, [pc, #404]	@ (800289c <HAL_RCC_ClockConfig+0x1c0>)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	4313      	orrs	r3, r2
 800270c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800270e:	4b63      	ldr	r3, [pc, #396]	@ (800289c <HAL_RCC_ClockConfig+0x1c0>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	429a      	cmp	r2, r3
 800271a:	d001      	beq.n	8002720 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e0b8      	b.n	8002892 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d020      	beq.n	800276e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0304 	and.w	r3, r3, #4
 8002734:	2b00      	cmp	r3, #0
 8002736:	d005      	beq.n	8002744 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002738:	4b59      	ldr	r3, [pc, #356]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	4a58      	ldr	r2, [pc, #352]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 800273e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002742:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0308 	and.w	r3, r3, #8
 800274c:	2b00      	cmp	r3, #0
 800274e:	d005      	beq.n	800275c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002750:	4b53      	ldr	r3, [pc, #332]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	4a52      	ldr	r2, [pc, #328]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002756:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800275a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800275c:	4b50      	ldr	r3, [pc, #320]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	494d      	ldr	r1, [pc, #308]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 800276a:	4313      	orrs	r3, r2
 800276c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d040      	beq.n	80027fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d107      	bne.n	8002792 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002782:	4b47      	ldr	r3, [pc, #284]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d115      	bne.n	80027ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e07f      	b.n	8002892 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b02      	cmp	r3, #2
 8002798:	d107      	bne.n	80027aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800279a:	4b41      	ldr	r3, [pc, #260]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d109      	bne.n	80027ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e073      	b.n	8002892 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027aa:	4b3d      	ldr	r3, [pc, #244]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e06b      	b.n	8002892 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ba:	4b39      	ldr	r3, [pc, #228]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f023 0203 	bic.w	r2, r3, #3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	4936      	ldr	r1, [pc, #216]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027cc:	f7ff fa24 	bl	8001c18 <HAL_GetTick>
 80027d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d2:	e00a      	b.n	80027ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027d4:	f7ff fa20 	bl	8001c18 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e053      	b.n	8002892 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ea:	4b2d      	ldr	r3, [pc, #180]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f003 020c 	and.w	r2, r3, #12
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d1eb      	bne.n	80027d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027fc:	4b27      	ldr	r3, [pc, #156]	@ (800289c <HAL_RCC_ClockConfig+0x1c0>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0307 	and.w	r3, r3, #7
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	429a      	cmp	r2, r3
 8002808:	d210      	bcs.n	800282c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280a:	4b24      	ldr	r3, [pc, #144]	@ (800289c <HAL_RCC_ClockConfig+0x1c0>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f023 0207 	bic.w	r2, r3, #7
 8002812:	4922      	ldr	r1, [pc, #136]	@ (800289c <HAL_RCC_ClockConfig+0x1c0>)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	4313      	orrs	r3, r2
 8002818:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800281a:	4b20      	ldr	r3, [pc, #128]	@ (800289c <HAL_RCC_ClockConfig+0x1c0>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	429a      	cmp	r2, r3
 8002826:	d001      	beq.n	800282c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e032      	b.n	8002892 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	d008      	beq.n	800284a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002838:	4b19      	ldr	r3, [pc, #100]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	4916      	ldr	r1, [pc, #88]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002846:	4313      	orrs	r3, r2
 8002848:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0308 	and.w	r3, r3, #8
 8002852:	2b00      	cmp	r3, #0
 8002854:	d009      	beq.n	800286a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002856:	4b12      	ldr	r3, [pc, #72]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	490e      	ldr	r1, [pc, #56]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002866:	4313      	orrs	r3, r2
 8002868:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800286a:	f000 f821 	bl	80028b0 <HAL_RCC_GetSysClockFreq>
 800286e:	4602      	mov	r2, r0
 8002870:	4b0b      	ldr	r3, [pc, #44]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	091b      	lsrs	r3, r3, #4
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	490a      	ldr	r1, [pc, #40]	@ (80028a4 <HAL_RCC_ClockConfig+0x1c8>)
 800287c:	5ccb      	ldrb	r3, [r1, r3]
 800287e:	fa22 f303 	lsr.w	r3, r2, r3
 8002882:	4a09      	ldr	r2, [pc, #36]	@ (80028a8 <HAL_RCC_ClockConfig+0x1cc>)
 8002884:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002886:	4b09      	ldr	r3, [pc, #36]	@ (80028ac <HAL_RCC_ClockConfig+0x1d0>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f7ff f982 	bl	8001b94 <HAL_InitTick>

  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	40022000 	.word	0x40022000
 80028a0:	40021000 	.word	0x40021000
 80028a4:	080031bc 	.word	0x080031bc
 80028a8:	2000006c 	.word	0x2000006c
 80028ac:	20000070 	.word	0x20000070

080028b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b087      	sub	sp, #28
 80028b4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028b6:	2300      	movs	r3, #0
 80028b8:	60fb      	str	r3, [r7, #12]
 80028ba:	2300      	movs	r3, #0
 80028bc:	60bb      	str	r3, [r7, #8]
 80028be:	2300      	movs	r3, #0
 80028c0:	617b      	str	r3, [r7, #20]
 80028c2:	2300      	movs	r3, #0
 80028c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80028c6:	2300      	movs	r3, #0
 80028c8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028ca:	4b1e      	ldr	r3, [pc, #120]	@ (8002944 <HAL_RCC_GetSysClockFreq+0x94>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f003 030c 	and.w	r3, r3, #12
 80028d6:	2b04      	cmp	r3, #4
 80028d8:	d002      	beq.n	80028e0 <HAL_RCC_GetSysClockFreq+0x30>
 80028da:	2b08      	cmp	r3, #8
 80028dc:	d003      	beq.n	80028e6 <HAL_RCC_GetSysClockFreq+0x36>
 80028de:	e027      	b.n	8002930 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028e0:	4b19      	ldr	r3, [pc, #100]	@ (8002948 <HAL_RCC_GetSysClockFreq+0x98>)
 80028e2:	613b      	str	r3, [r7, #16]
      break;
 80028e4:	e027      	b.n	8002936 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	0c9b      	lsrs	r3, r3, #18
 80028ea:	f003 030f 	and.w	r3, r3, #15
 80028ee:	4a17      	ldr	r2, [pc, #92]	@ (800294c <HAL_RCC_GetSysClockFreq+0x9c>)
 80028f0:	5cd3      	ldrb	r3, [r2, r3]
 80028f2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d010      	beq.n	8002920 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028fe:	4b11      	ldr	r3, [pc, #68]	@ (8002944 <HAL_RCC_GetSysClockFreq+0x94>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	0c5b      	lsrs	r3, r3, #17
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	4a11      	ldr	r2, [pc, #68]	@ (8002950 <HAL_RCC_GetSysClockFreq+0xa0>)
 800290a:	5cd3      	ldrb	r3, [r2, r3]
 800290c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a0d      	ldr	r2, [pc, #52]	@ (8002948 <HAL_RCC_GetSysClockFreq+0x98>)
 8002912:	fb03 f202 	mul.w	r2, r3, r2
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	fbb2 f3f3 	udiv	r3, r2, r3
 800291c:	617b      	str	r3, [r7, #20]
 800291e:	e004      	b.n	800292a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a0c      	ldr	r2, [pc, #48]	@ (8002954 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002924:	fb02 f303 	mul.w	r3, r2, r3
 8002928:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	613b      	str	r3, [r7, #16]
      break;
 800292e:	e002      	b.n	8002936 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002930:	4b05      	ldr	r3, [pc, #20]	@ (8002948 <HAL_RCC_GetSysClockFreq+0x98>)
 8002932:	613b      	str	r3, [r7, #16]
      break;
 8002934:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002936:	693b      	ldr	r3, [r7, #16]
}
 8002938:	4618      	mov	r0, r3
 800293a:	371c      	adds	r7, #28
 800293c:	46bd      	mov	sp, r7
 800293e:	bc80      	pop	{r7}
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	40021000 	.word	0x40021000
 8002948:	007a1200 	.word	0x007a1200
 800294c:	080031cc 	.word	0x080031cc
 8002950:	080031dc 	.word	0x080031dc
 8002954:	003d0900 	.word	0x003d0900

08002958 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002960:	4b0a      	ldr	r3, [pc, #40]	@ (800298c <RCC_Delay+0x34>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a0a      	ldr	r2, [pc, #40]	@ (8002990 <RCC_Delay+0x38>)
 8002966:	fba2 2303 	umull	r2, r3, r2, r3
 800296a:	0a5b      	lsrs	r3, r3, #9
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	fb02 f303 	mul.w	r3, r2, r3
 8002972:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002974:	bf00      	nop
  }
  while (Delay --);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	1e5a      	subs	r2, r3, #1
 800297a:	60fa      	str	r2, [r7, #12]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1f9      	bne.n	8002974 <RCC_Delay+0x1c>
}
 8002980:	bf00      	nop
 8002982:	bf00      	nop
 8002984:	3714      	adds	r7, #20
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr
 800298c:	2000006c 	.word	0x2000006c
 8002990:	10624dd3 	.word	0x10624dd3

08002994 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e041      	b.n	8002a2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d106      	bne.n	80029c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7ff f84e 	bl	8001a5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2202      	movs	r2, #2
 80029c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	3304      	adds	r3, #4
 80029d0:	4619      	mov	r1, r3
 80029d2:	4610      	mov	r0, r2
 80029d4:	f000 fa56 	bl	8002e84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
	...

08002a34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d001      	beq.n	8002a4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e035      	b.n	8002ab8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2202      	movs	r2, #2
 8002a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68da      	ldr	r2, [r3, #12]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f042 0201 	orr.w	r2, r2, #1
 8002a62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a16      	ldr	r2, [pc, #88]	@ (8002ac4 <HAL_TIM_Base_Start_IT+0x90>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d009      	beq.n	8002a82 <HAL_TIM_Base_Start_IT+0x4e>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a76:	d004      	beq.n	8002a82 <HAL_TIM_Base_Start_IT+0x4e>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a12      	ldr	r2, [pc, #72]	@ (8002ac8 <HAL_TIM_Base_Start_IT+0x94>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d111      	bne.n	8002aa6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f003 0307 	and.w	r3, r3, #7
 8002a8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2b06      	cmp	r3, #6
 8002a92:	d010      	beq.n	8002ab6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f042 0201 	orr.w	r2, r2, #1
 8002aa2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aa4:	e007      	b.n	8002ab6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f042 0201 	orr.w	r2, r2, #1
 8002ab4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3714      	adds	r7, #20
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bc80      	pop	{r7}
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	40012c00 	.word	0x40012c00
 8002ac8:	40000400 	.word	0x40000400

08002acc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d020      	beq.n	8002b30 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d01b      	beq.n	8002b30 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f06f 0202 	mvn.w	r2, #2
 8002b00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f998 	bl	8002e4c <HAL_TIM_IC_CaptureCallback>
 8002b1c:	e005      	b.n	8002b2a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f98b 	bl	8002e3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 f99a 	bl	8002e5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	f003 0304 	and.w	r3, r3, #4
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d020      	beq.n	8002b7c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f003 0304 	and.w	r3, r3, #4
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d01b      	beq.n	8002b7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f06f 0204 	mvn.w	r2, #4
 8002b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2202      	movs	r2, #2
 8002b52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f972 	bl	8002e4c <HAL_TIM_IC_CaptureCallback>
 8002b68:	e005      	b.n	8002b76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f965 	bl	8002e3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 f974 	bl	8002e5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	f003 0308 	and.w	r3, r3, #8
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d020      	beq.n	8002bc8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f003 0308 	and.w	r3, r3, #8
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d01b      	beq.n	8002bc8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f06f 0208 	mvn.w	r2, #8
 8002b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2204      	movs	r2, #4
 8002b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	69db      	ldr	r3, [r3, #28]
 8002ba6:	f003 0303 	and.w	r3, r3, #3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 f94c 	bl	8002e4c <HAL_TIM_IC_CaptureCallback>
 8002bb4:	e005      	b.n	8002bc2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 f93f 	bl	8002e3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 f94e 	bl	8002e5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	f003 0310 	and.w	r3, r3, #16
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d020      	beq.n	8002c14 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f003 0310 	and.w	r3, r3, #16
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d01b      	beq.n	8002c14 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f06f 0210 	mvn.w	r2, #16
 8002be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2208      	movs	r2, #8
 8002bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 f926 	bl	8002e4c <HAL_TIM_IC_CaptureCallback>
 8002c00:	e005      	b.n	8002c0e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f919 	bl	8002e3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 f928 	bl	8002e5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00c      	beq.n	8002c38 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d007      	beq.n	8002c38 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f06f 0201 	mvn.w	r2, #1
 8002c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7fe fc84 	bl	8001540 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00c      	beq.n	8002c5c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d007      	beq.n	8002c5c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 fa6f 	bl	800313a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00c      	beq.n	8002c80 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d007      	beq.n	8002c80 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 f8f8 	bl	8002e70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	f003 0320 	and.w	r3, r3, #32
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00c      	beq.n	8002ca4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f003 0320 	and.w	r3, r3, #32
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d007      	beq.n	8002ca4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f06f 0220 	mvn.w	r2, #32
 8002c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 fa42 	bl	8003128 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ca4:	bf00      	nop
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d101      	bne.n	8002cc8 <HAL_TIM_ConfigClockSource+0x1c>
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	e0b4      	b.n	8002e32 <HAL_TIM_ConfigClockSource+0x186>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002ce6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002cee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68ba      	ldr	r2, [r7, #8]
 8002cf6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d00:	d03e      	beq.n	8002d80 <HAL_TIM_ConfigClockSource+0xd4>
 8002d02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d06:	f200 8087 	bhi.w	8002e18 <HAL_TIM_ConfigClockSource+0x16c>
 8002d0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d0e:	f000 8086 	beq.w	8002e1e <HAL_TIM_ConfigClockSource+0x172>
 8002d12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d16:	d87f      	bhi.n	8002e18 <HAL_TIM_ConfigClockSource+0x16c>
 8002d18:	2b70      	cmp	r3, #112	@ 0x70
 8002d1a:	d01a      	beq.n	8002d52 <HAL_TIM_ConfigClockSource+0xa6>
 8002d1c:	2b70      	cmp	r3, #112	@ 0x70
 8002d1e:	d87b      	bhi.n	8002e18 <HAL_TIM_ConfigClockSource+0x16c>
 8002d20:	2b60      	cmp	r3, #96	@ 0x60
 8002d22:	d050      	beq.n	8002dc6 <HAL_TIM_ConfigClockSource+0x11a>
 8002d24:	2b60      	cmp	r3, #96	@ 0x60
 8002d26:	d877      	bhi.n	8002e18 <HAL_TIM_ConfigClockSource+0x16c>
 8002d28:	2b50      	cmp	r3, #80	@ 0x50
 8002d2a:	d03c      	beq.n	8002da6 <HAL_TIM_ConfigClockSource+0xfa>
 8002d2c:	2b50      	cmp	r3, #80	@ 0x50
 8002d2e:	d873      	bhi.n	8002e18 <HAL_TIM_ConfigClockSource+0x16c>
 8002d30:	2b40      	cmp	r3, #64	@ 0x40
 8002d32:	d058      	beq.n	8002de6 <HAL_TIM_ConfigClockSource+0x13a>
 8002d34:	2b40      	cmp	r3, #64	@ 0x40
 8002d36:	d86f      	bhi.n	8002e18 <HAL_TIM_ConfigClockSource+0x16c>
 8002d38:	2b30      	cmp	r3, #48	@ 0x30
 8002d3a:	d064      	beq.n	8002e06 <HAL_TIM_ConfigClockSource+0x15a>
 8002d3c:	2b30      	cmp	r3, #48	@ 0x30
 8002d3e:	d86b      	bhi.n	8002e18 <HAL_TIM_ConfigClockSource+0x16c>
 8002d40:	2b20      	cmp	r3, #32
 8002d42:	d060      	beq.n	8002e06 <HAL_TIM_ConfigClockSource+0x15a>
 8002d44:	2b20      	cmp	r3, #32
 8002d46:	d867      	bhi.n	8002e18 <HAL_TIM_ConfigClockSource+0x16c>
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d05c      	beq.n	8002e06 <HAL_TIM_ConfigClockSource+0x15a>
 8002d4c:	2b10      	cmp	r3, #16
 8002d4e:	d05a      	beq.n	8002e06 <HAL_TIM_ConfigClockSource+0x15a>
 8002d50:	e062      	b.n	8002e18 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d62:	f000 f96a 	bl	800303a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002d74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68ba      	ldr	r2, [r7, #8]
 8002d7c:	609a      	str	r2, [r3, #8]
      break;
 8002d7e:	e04f      	b.n	8002e20 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d90:	f000 f953 	bl	800303a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689a      	ldr	r2, [r3, #8]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002da2:	609a      	str	r2, [r3, #8]
      break;
 8002da4:	e03c      	b.n	8002e20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002db2:	461a      	mov	r2, r3
 8002db4:	f000 f8ca 	bl	8002f4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2150      	movs	r1, #80	@ 0x50
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 f921 	bl	8003006 <TIM_ITRx_SetConfig>
      break;
 8002dc4:	e02c      	b.n	8002e20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	f000 f8e8 	bl	8002fa8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2160      	movs	r1, #96	@ 0x60
 8002dde:	4618      	mov	r0, r3
 8002de0:	f000 f911 	bl	8003006 <TIM_ITRx_SetConfig>
      break;
 8002de4:	e01c      	b.n	8002e20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002df2:	461a      	mov	r2, r3
 8002df4:	f000 f8aa 	bl	8002f4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2140      	movs	r1, #64	@ 0x40
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f000 f901 	bl	8003006 <TIM_ITRx_SetConfig>
      break;
 8002e04:	e00c      	b.n	8002e20 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4619      	mov	r1, r3
 8002e10:	4610      	mov	r0, r2
 8002e12:	f000 f8f8 	bl	8003006 <TIM_ITRx_SetConfig>
      break;
 8002e16:	e003      	b.n	8002e20 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e1c:	e000      	b.n	8002e20 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b083      	sub	sp, #12
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e42:	bf00      	nop
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bc80      	pop	{r7}
 8002e4a:	4770      	bx	lr

08002e4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bc80      	pop	{r7}
 8002e5c:	4770      	bx	lr

08002e5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e66:	bf00      	nop
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr

08002e70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bc80      	pop	{r7}
 8002e80:	4770      	bx	lr
	...

08002e84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a2b      	ldr	r2, [pc, #172]	@ (8002f44 <TIM_Base_SetConfig+0xc0>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d007      	beq.n	8002eac <TIM_Base_SetConfig+0x28>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ea2:	d003      	beq.n	8002eac <TIM_Base_SetConfig+0x28>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a28      	ldr	r2, [pc, #160]	@ (8002f48 <TIM_Base_SetConfig+0xc4>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d108      	bne.n	8002ebe <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002eb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a20      	ldr	r2, [pc, #128]	@ (8002f44 <TIM_Base_SetConfig+0xc0>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d007      	beq.n	8002ed6 <TIM_Base_SetConfig+0x52>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ecc:	d003      	beq.n	8002ed6 <TIM_Base_SetConfig+0x52>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a1d      	ldr	r2, [pc, #116]	@ (8002f48 <TIM_Base_SetConfig+0xc4>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d108      	bne.n	8002ee8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002edc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	689a      	ldr	r2, [r3, #8]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a0d      	ldr	r2, [pc, #52]	@ (8002f44 <TIM_Base_SetConfig+0xc0>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d103      	bne.n	8002f1c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	691a      	ldr	r2, [r3, #16]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d005      	beq.n	8002f3a <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	f023 0201 	bic.w	r2, r3, #1
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	611a      	str	r2, [r3, #16]
  }
}
 8002f3a:	bf00      	nop
 8002f3c:	3714      	adds	r7, #20
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bc80      	pop	{r7}
 8002f42:	4770      	bx	lr
 8002f44:	40012c00 	.word	0x40012c00
 8002f48:	40000400 	.word	0x40000400

08002f4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b087      	sub	sp, #28
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	f023 0201 	bic.w	r2, r3, #1
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	011b      	lsls	r3, r3, #4
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	f023 030a 	bic.w	r3, r3, #10
 8002f88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	621a      	str	r2, [r3, #32]
}
 8002f9e:	bf00      	nop
 8002fa0:	371c      	adds	r7, #28
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bc80      	pop	{r7}
 8002fa6:	4770      	bx	lr

08002fa8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b087      	sub	sp, #28
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	f023 0210 	bic.w	r2, r3, #16
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002fd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	031b      	lsls	r3, r3, #12
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002fe4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	011b      	lsls	r3, r3, #4
 8002fea:	697a      	ldr	r2, [r7, #20]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	621a      	str	r2, [r3, #32]
}
 8002ffc:	bf00      	nop
 8002ffe:	371c      	adds	r7, #28
 8003000:	46bd      	mov	sp, r7
 8003002:	bc80      	pop	{r7}
 8003004:	4770      	bx	lr

08003006 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003006:	b480      	push	{r7}
 8003008:	b085      	sub	sp, #20
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
 800300e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800301c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800301e:	683a      	ldr	r2, [r7, #0]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	4313      	orrs	r3, r2
 8003024:	f043 0307 	orr.w	r3, r3, #7
 8003028:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	609a      	str	r2, [r3, #8]
}
 8003030:	bf00      	nop
 8003032:	3714      	adds	r7, #20
 8003034:	46bd      	mov	sp, r7
 8003036:	bc80      	pop	{r7}
 8003038:	4770      	bx	lr

0800303a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800303a:	b480      	push	{r7}
 800303c:	b087      	sub	sp, #28
 800303e:	af00      	add	r7, sp, #0
 8003040:	60f8      	str	r0, [r7, #12]
 8003042:	60b9      	str	r1, [r7, #8]
 8003044:	607a      	str	r2, [r7, #4]
 8003046:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003054:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	021a      	lsls	r2, r3, #8
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	431a      	orrs	r2, r3
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	4313      	orrs	r3, r2
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	4313      	orrs	r3, r2
 8003066:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	609a      	str	r2, [r3, #8]
}
 800306e:	bf00      	nop
 8003070:	371c      	adds	r7, #28
 8003072:	46bd      	mov	sp, r7
 8003074:	bc80      	pop	{r7}
 8003076:	4770      	bx	lr

08003078 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003088:	2b01      	cmp	r3, #1
 800308a:	d101      	bne.n	8003090 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800308c:	2302      	movs	r3, #2
 800308e:	e041      	b.n	8003114 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2202      	movs	r2, #2
 800309c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	4313      	orrs	r3, r2
 80030c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a14      	ldr	r2, [pc, #80]	@ (8003120 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d009      	beq.n	80030e8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030dc:	d004      	beq.n	80030e8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a10      	ldr	r2, [pc, #64]	@ (8003124 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d10c      	bne.n	8003102 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	68ba      	ldr	r2, [r7, #8]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68ba      	ldr	r2, [r7, #8]
 8003100:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3714      	adds	r7, #20
 8003118:	46bd      	mov	sp, r7
 800311a:	bc80      	pop	{r7}
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	40012c00 	.word	0x40012c00
 8003124:	40000400 	.word	0x40000400

08003128 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	bc80      	pop	{r7}
 8003138:	4770      	bx	lr

0800313a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800313a:	b480      	push	{r7}
 800313c:	b083      	sub	sp, #12
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003142:	bf00      	nop
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	bc80      	pop	{r7}
 800314a:	4770      	bx	lr

0800314c <memset>:
 800314c:	4603      	mov	r3, r0
 800314e:	4402      	add	r2, r0
 8003150:	4293      	cmp	r3, r2
 8003152:	d100      	bne.n	8003156 <memset+0xa>
 8003154:	4770      	bx	lr
 8003156:	f803 1b01 	strb.w	r1, [r3], #1
 800315a:	e7f9      	b.n	8003150 <memset+0x4>

0800315c <__libc_init_array>:
 800315c:	b570      	push	{r4, r5, r6, lr}
 800315e:	2600      	movs	r6, #0
 8003160:	4d0c      	ldr	r5, [pc, #48]	@ (8003194 <__libc_init_array+0x38>)
 8003162:	4c0d      	ldr	r4, [pc, #52]	@ (8003198 <__libc_init_array+0x3c>)
 8003164:	1b64      	subs	r4, r4, r5
 8003166:	10a4      	asrs	r4, r4, #2
 8003168:	42a6      	cmp	r6, r4
 800316a:	d109      	bne.n	8003180 <__libc_init_array+0x24>
 800316c:	f000 f81a 	bl	80031a4 <_init>
 8003170:	2600      	movs	r6, #0
 8003172:	4d0a      	ldr	r5, [pc, #40]	@ (800319c <__libc_init_array+0x40>)
 8003174:	4c0a      	ldr	r4, [pc, #40]	@ (80031a0 <__libc_init_array+0x44>)
 8003176:	1b64      	subs	r4, r4, r5
 8003178:	10a4      	asrs	r4, r4, #2
 800317a:	42a6      	cmp	r6, r4
 800317c:	d105      	bne.n	800318a <__libc_init_array+0x2e>
 800317e:	bd70      	pop	{r4, r5, r6, pc}
 8003180:	f855 3b04 	ldr.w	r3, [r5], #4
 8003184:	4798      	blx	r3
 8003186:	3601      	adds	r6, #1
 8003188:	e7ee      	b.n	8003168 <__libc_init_array+0xc>
 800318a:	f855 3b04 	ldr.w	r3, [r5], #4
 800318e:	4798      	blx	r3
 8003190:	3601      	adds	r6, #1
 8003192:	e7f2      	b.n	800317a <__libc_init_array+0x1e>
 8003194:	080031e0 	.word	0x080031e0
 8003198:	080031e0 	.word	0x080031e0
 800319c:	080031e0 	.word	0x080031e0
 80031a0:	080031e4 	.word	0x080031e4

080031a4 <_init>:
 80031a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031a6:	bf00      	nop
 80031a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031aa:	bc08      	pop	{r3}
 80031ac:	469e      	mov	lr, r3
 80031ae:	4770      	bx	lr

080031b0 <_fini>:
 80031b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031b2:	bf00      	nop
 80031b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031b6:	bc08      	pop	{r3}
 80031b8:	469e      	mov	lr, r3
 80031ba:	4770      	bx	lr
